#!/bin/bash

# install-git-hooks.sh
# Installs optional git hooks for knowledge base maintenance reminders
# Run: ./scripts/install-git-hooks.sh

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
HOOKS_DIR="$REPO_ROOT/.git/hooks"
POST_COMMIT_HOOK="$HOOKS_DIR/post-commit"

echo "📋 Knowledge Base Git Hooks Installer"
echo "======================================"
echo ""

# Check if we're in a git repository
if [ ! -d "$REPO_ROOT/.git" ]; then
    echo "❌ Error: Not in a git repository"
    exit 1
fi

# Create hooks directory if it doesn't exist
mkdir -p "$HOOKS_DIR"

# Check if post-commit hook already exists
if [ -f "$POST_COMMIT_HOOK" ]; then
    echo "⚠️  A post-commit hook already exists."
    echo ""
    echo "Options:"
    echo "  1) Backup existing hook and install new one"
    echo "  2) Append KB reminder to existing hook"
    echo "  3) Cancel installation"
    echo ""
    read -p "Choose option (1-3): " choice
    
    case $choice in
        1)
            backup="$POST_COMMIT_HOOK.backup.$(date +%Y%m%d-%H%M%S)"
            mv "$POST_COMMIT_HOOK" "$backup"
            echo "✅ Backed up existing hook to: $backup"
            ;;
        2)
            echo "" >> "$POST_COMMIT_HOOK"
            echo "# === Knowledge Base Reminder (added $(date +%Y-%m-%d)) ===" >> "$POST_COMMIT_HOOK"
            cat "$SCRIPT_DIR/.git-hooks-template/post-commit" | tail -n +3 >> "$POST_COMMIT_HOOK"
            echo "✅ Appended KB reminder to existing hook"
            chmod +x "$POST_COMMIT_HOOK"
            echo ""
            echo "✨ Installation complete!"
            echo ""
            echo "🔔 The post-commit hook will now remind you to update knowledge base"
            echo "   when you commit changes to migrations, functions, or docs."
            echo ""
            echo "To uninstall: Edit $POST_COMMIT_HOOK and remove the KB reminder section"
            exit 0
            ;;
        3)
            echo "❌ Installation cancelled"
            exit 0
            ;;
        *)
            echo "❌ Invalid option"
            exit 1
            ;;
    esac
fi

# Create the post-commit hook
cat > "$POST_COMMIT_HOOK" << 'HOOK_EOF'
#!/bin/bash

# Post-commit hook: Knowledge Base Update Reminder
# Auto-generated by scripts/install-git-hooks.sh
# To disable: Remove this file or set KB_REMINDER_DISABLED=true in .env

# Check if reminders are disabled
if [ "$KB_REMINDER_DISABLED" = "true" ]; then
    exit 0
fi

# Get the list of files in the last commit
CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD)

# Flags for different types of changes
MIGRATION_CHANGES=false
FUNCTION_CHANGES=false
DOC_CHANGES=false
SCHEMA_CHANGES=false

# Check what types of files were changed
while IFS= read -r file; do
    case "$file" in
        supabase/migrations/*.sql)
            MIGRATION_CHANGES=true
            ;;
        supabase/functions/*)
            FUNCTION_CHANGES=true
            ;;
        docs/*|*.md)
            DOC_CHANGES=true
            ;;
        supabase/config.toml)
            SCHEMA_CHANGES=true
            ;;
    esac
done <<< "$CHANGED_FILES"

# If no relevant changes, exit quietly
if [ "$MIGRATION_CHANGES" = "false" ] && \
   [ "$FUNCTION_CHANGES" = "false" ] && \
   [ "$SCHEMA_CHANGES" = "false" ]; then
    exit 0
fi

# Show reminder
echo ""
echo "╔════════════════════════════════════════════════════════════════╗"
echo "║  📚 Knowledge Base Update Reminder                            ║"
echo "╚════════════════════════════════════════════════════════════════╝"
echo ""

if [ "$MIGRATION_CHANGES" = "true" ]; then
    echo "📊 Database migration detected!"
    echo "   Consider documenting in: skogai/migrations/"
    echo "   Template: skogai/templates/migration-template.md"
    echo ""
fi

if [ "$FUNCTION_CHANGES" = "true" ]; then
    echo "⚡ Edge function change detected!"
    echo "   Consider documenting in: supabase/functions/<function>/README.md"
    echo "   Template: skogai/templates/function-template.md"
    echo ""
fi

if [ "$SCHEMA_CHANGES" = "true" ]; then
    echo "🔧 Configuration change detected!"
    echo "   Update relevant concept docs in: skogai/concepts/"
    echo ""
fi

echo "Quick commands:"
echo "  • Copy template:  cp skogai/templates/<type>-template.md <destination>"
echo "  • View templates: ls skogai/templates/"
echo "  • See coverage:   cat skogai/project/Knowledge\\ Base\\ Coverage.md"
echo ""
echo "To disable reminders: Set KB_REMINDER_DISABLED=true in .env"
echo "To uninstall hook:    rm .git/hooks/post-commit"
echo ""
echo "────────────────────────────────────────────────────────────────"
echo ""

HOOK_EOF

# Make the hook executable
chmod +x "$POST_COMMIT_HOOK"

echo "✅ Post-commit hook installed successfully!"
echo ""
echo "📍 Location: $POST_COMMIT_HOOK"
echo ""
echo "✨ What happens now?"
echo "   • After each commit, the hook checks for migrations, functions, or config changes"
echo "   • If found, you'll get a friendly reminder to update documentation"
echo "   • The hook is non-blocking and won't prevent commits"
echo ""
echo "🎛️  Configuration:"
echo "   • To disable reminders: Add 'KB_REMINDER_DISABLED=true' to .env"
echo "   • To uninstall: rm $POST_COMMIT_HOOK"
echo "   • To customize: Edit $POST_COMMIT_HOOK"
echo ""
echo "📚 Documentation templates available in:"
echo "   skogai/templates/"
echo ""
echo "🧪 Test the hook by making a commit to:"
echo "   • supabase/migrations/*.sql"
echo "   • supabase/functions/*"
echo "   • supabase/config.toml"
echo ""
echo "────────────────────────────────────────────────────────────────"
echo "Happy documenting! 📝"
echo ""
