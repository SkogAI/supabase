[{"id":"initializing","title":"Initializing","$ref":"@supabase/supabase-js.index.SupabaseClient.constructor","examples":[{"id":"create-client","name":"Create Client","code":"```js\n  import { createClient } from '@supabase/supabase-js'\n\n  // Create a single supabase client for interacting with your database\n  const supabase = createClient('https://xyzcompany.supabase.co', 'publishable-or-anon-key')\n```\n"},{"id":"with-additional-parameters","name":"With Additional Parameters","code":"```js\n  import { createClient } from '@supabase/supabase-js'\n\n  const options = {\n    schema: 'public',\n    headers: { 'x-my-custom-header': 'my-app-name' },\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n  }\n  const supabase = createClient('https://xyzcompany.supabase.co', 'publishable-or-anon-key', options)\n```\n"},{"id":"api-schemas","name":"API schemas","code":"```js\n  import { createClient } from '@supabase/supabase-js'\n\n  const options = {\n    schema: 'public',\n    headers: { 'x-my-custom-header': 'my-app-name' },\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n  }\n  const supabase = createClient('https://xyzcompany.supabase.co', 'publishable-or-anon-key', options)\n```\n","description":"By default the API server points to the `public` schema. You can enable other database schemas within the Dashboard.\nGo to `Settings > API > Schema` and add the schema which you want to expose to the API. You also need to grant `USAGE` on your new schema with the grants you desire, such as `SELECT, INSERT, UPDATE, DELETE`.\n\nNote: each client connection can only access a single schema, so the code above can access the `other_schema` schema but cannot access the `public` schema.\n"},{"id":"custom-fetch-implementation","name":"Custom Fetch Implementation","code":"```js\n  import { createClient } from '@supabase/supabase-js'\n\n  const supabase = createClient('https://xyzcompany.supabase.co', 'publishable-or-anon-key', {\n    fetch: fetch.bind(globalThis),\n  })\n```\n","description":"`supabase-js` uses the [`cross-fetch`](https://www.npmjs.com/package/cross-fetch) library to make HTTP requests,\nbut an alternative `fetch` implementation can be provided as an option.\nThis is most useful in environments where `cross-fetch` is not compatible (for instance Cloudflare Workers).\n"}]},{"id":"sign-up","title":"signUp()","$ref":"@supabase/gotrue-js.GoTrueClient.signUp","notes":"- By default, the user will need to verify their email address before logging in. If you would like to change this, you can disable \"Email Confirmations\" by going to Authentication -> Settings on [supabase.com/dashboard](https://supabase.com/dashboard)\n- If \"Email Confirmations\" is turned on, a `user` is returned but `session` will be null\n- If \"Email Confirmations\" is turned off, both a `user` and a `session` will be returned\n- When the user confirms their email address, they will be redirected to localhost:3000 by default. To change this, you can go to Authentication -> Settings on [supabase.com/dashboard](https://supabase.com/dashboard)\n- If signUp() is called for an existing confirmed user:\n    - If \"Enable email confirmations\" is enabled on the \"Authentication\" -> \"Settings\" page, an obfuscated / fake user object will be returned.\n    - If \"Enable email confirmations\" is disabled, an error with a message \"User already registered\" will be returned.\n- To check if a user already exists, refer to getUser().\n","examples":[{"id":"sign-up","name":"Sign up.","isSpotlight":true,"code":"```js\nconst { user, session, error } = await supabase.auth.signUp({\n  email: 'example@email.com',\n  password: 'example-password',\n})\n```\n"},{"id":"sign-up-with-additional-user-metadata.","name":"Sign up with additional user meta data.","isSpotlight":true,"code":"```js\nconst { user, session, error } = await supabase.auth.signUp(\n  {\n    email: 'example@email.com',\n    password: 'example-password',\n  },\n  {\n    data: {\n      first_name: 'John',\n      age: 27,\n    }\n  }\n)\n```\n"},{"id":"sign-up-with-third-party-provider","name":"Sign up with third-party providers.","hideCodeBlock":true,"description":"You can sign up with OAuth providers using the [`signIn()`](/docs/reference/javascript/v1/auth-signin#sign-in-using-third-party-providers) method.\n"},{"id":"sign-up-with-phone","name":"Sign up with Phone.","description":"Supabase supports Phone Auth. After a user has verified their number, they can use the [`signIn()`](/docs/reference/javascript/v1/auth-signin#sign-in-using-phone) method.\n","code":"```js\nconst { user, session, error } = await supabase.auth.signUp({\n  phone: '+13334445555',\n  password: 'some-password',\n})\n\n// After receiving an SMS with One Time Password.\nlet { session, error } = await supabase.auth.verifyOTP({\n  phone: '+13334445555',\n  token: '123456',\n})\n```\n"}]},{"id":"sign-in","title":"signIn()","$ref":"@supabase/gotrue-js.GoTrueClient.signIn","notes":"- A user can sign up either via email or OAuth.\n- If you provide `email` without a `password`, the user will be sent a magic link.\n- The magic link's destination URL is determined by the SITE_URL config variable. To change this, you can go to Authentication -> Settings on [supabase.com/dashboard](https://supabase.com/dashboard)\n- Specifying a `provider` will open the browser to the relevant login page.\n","examples":[{"id":"sign-in-with-email-and-password","name":"Sign in with email and password","isSpotlight":true,"code":"```js\nconst { user, session, error } = await supabase.auth.signIn({\n  email: 'example@email.com',\n  password: 'example-password',\n})\n```\n"},{"id":"sign-in-with-magic-link","name":"Sign in with magic link.","description":"If no password is provided, the user will be sent a \"magic link\" to their email address, which they can click to open your application with a valid session. By default, a given user can only request a Magic Link once every 60 seconds.","code":"```js\nconst { user, session, error } = await supabase.auth.signIn({\n  email: 'example@email.com'\n})\n```\n"},{"id":"sign-in-with-third-party-provider","name":"Sign in using third-party providers.","description":"Supabase supports many different [third-party providers](https://supabase.com/docs/guides/auth#providers).","code":"```js\nconst { user, session, error } = await supabase.auth.signIn({\n  // provider can be 'github', 'google', 'gitlab', and more\n  provider: 'github'\n})\n```\n"},{"id":"sign-in-with-phone-and-password","name":"Sign in with phone and password","isSpotlight":false,"code":"```js\nconst { user, session, error } = await supabase.auth.signIn({\n  phone: '+13334445555',\n  password: 'some-password',\n})\n```\n"},{"id":"sign-in-using-a-third-party-provider-with-redirect","name":"Sign in using a third-party provider with redirect","description":"Note that the `redirectTo` param is only relevant for OAuth logins, where the login flow is managed by\nthe Auth server. If you are using email/phone logins you should set up your own redirects (within the email/sms template).\n\nSometimes you want to control where the user is redirected to after they are logged in. Supabase supports this for\nany URL path on your website (the URL must either be on the same domain as your [Site URL](https://supabase.com/dashboard/project/_/auth/url-configuration) or match one of the Redirect URLs).\n\nSee [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n","code":"```js\nconst { user, session, error } = await supabase.auth.signIn({\n  provider: 'github'\n}, {\n  redirectTo: 'https://example.com/welcome'\n})\n```\n"},{"id":"sign-in-with-scopes","name":"Sign in with scopes","description":"If you need additional data from an OAuth provider, you can include a space-separated list of scopes in your request to get back an OAuth provider token.\nYou may also need to specify the scopes in the provider's OAuth app settings, depending on the provider.\n","code":"```js\nconst { user, session, error } = await supabase.auth.signIn({\n  provider: 'github'\n}, {\n  scopes: 'repo gist notifications'\n})\nconst oAuthToken = session.provider_token // use to access provider API\n```\n"},{"id":"sign-in-with-refresh-token","name":"Sign in using a refresh token (e.g. in React Native).","description":"If you are completing a sign up or login in a React Native app you can pass the refresh token obtained from the provider to obtain a session.\n","code":"```js\n// An example using Expo's `AuthSession`\nconst redirectUri = AuthSession.makeRedirectUri({ useProxy: false });\nconst provider = 'google';\n\nAuthSession.startAsync({\n  authUrl: `https://MYSUPABASEAPP.supabase.co/auth/v1/authorize?provider=${provider}&redirect_to=${redirectUri}`,\n  returnUrl: redirectUri,\n}).then(async (response: any) => {\n  if (!response) return;\n  const { user, session, error } = await supabase.auth.signIn({\n    refreshToken: response.params?.refresh_token,\n  });\n});\n```\n"}]},{"id":"sign-out","title":"signOut()","$ref":"@supabase/gotrue-js.GoTrueClient.signOut","examples":[{"id":"sign-out","name":"Sign out","isSpotlight":true,"code":"```js\nconst { error } = await supabase.auth.signOut()\n```\n"}]},{"id":"session","title":"session()","$ref":"@supabase/gotrue-js.GoTrueClient.session","examples":[{"id":"get-the-session-data","name":"Get the session data","isSpotlight":true,"code":"```js\nconst session = supabase.auth.session()\n```\n"}]},{"id":"user","title":"user()","$ref":"@supabase/gotrue-js.GoTrueClient.user","notes":"This method gets the user object from memory.\n","examples":[{"id":null,"name":"Get the logged in user","isSpotlight":true,"code":"```js\nconst user = supabase.auth.user()\n```\n"}]},{"id":"auth-update","title":"update()","$ref":"@supabase/gotrue-js.GoTrueClient.update","notes":"User email: By Default, email updates sends a confirmation link to both the user's current and new email.\nTo only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](https://supabase.com/dashboard/project/_/auth/providers).\n\nUser metadata: It's generally better to store user data in a table within your public schema (i.e., `public.users`).\nUse the `update()` method if you have data which rarely changes or is specific only to the logged in user.\n","examples":[{"id":"update-the-email-for-an-authenticated-user","name":"Update the email for an authenticated user","description":"Sends a \"Confirm Email Change\" email to the new email address.","isSpotlight":true,"code":"```js\nconst { user, error } = await supabase.auth.update({email: 'new@email.com'})\n```\n"},{"id":"update-the-password-for-an-authenticated-user","name":"Update the password for an authenticated user","isSpotlight":true,"code":"```js\nconst { user, error } = await supabase.auth.update({password: 'new password'})\n```\n"},{"id":"update-the-users-metadata","name":"Update the user's metadata","isSpotlight":true,"code":"```js\nconst { user, error } = await supabase.auth.update({\n  data: { hello: 'world' }\n})\n```\n"}]},{"id":"set-auth","title":"setAuth()","$ref":"@supabase/gotrue-js.GoTrueClient.setAuth","examples":[{"id":"basic-example","name":"Basic example.","description":"This is most useful on server-side functions where you cannot log the user in, but have access to the user's access token.","isSpotlight":true,"code":"```js\nfunction apiFunction(req, res) {\n  // Assuming the access token was sent as a header \"X-Supabase-Auth\"\n  const { access_token } = req.get('X-Supabase-Auth')\n\n  // You can now use it within a Supabase Client\n  const supabase = createClient(\"https://xyzcompany.supabase.co\", \"publishable-or-anon-key\")\n  const { user, error } = supabase.auth.setAuth(access_token)\n\n  // This client will now send requests as this user\n  const { data } = await supabase.from('your_table').select()\n}\n```\n"},{"id":"with-express","name":"With Express.","isSpotlight":true,"code":"```js\n\n/**\n* Make a request from the client to your server function\n*/\nasync function makeApiRequest() {\n  const token = newClient.session()?.access_token\n\n  await fetch('https://example.com/withAuth', {\n     method: 'GET',\n     withCredentials: true,\n     credentials: 'include',\n     headers: {\n      'Content-Type': 'application/json',\n      'Authorization': bearer, // Your own auth\n      'X-Supabase-Auth': token, // Set the Supabase user\n     }\n  })\n}\n\n/**\n* Use the Auth token in your server-side function.\n*/\nasync function apiFunction(req, res) {\n  const { access_token } = req.get('X-Supabase-Auth')\n\n  // You can now use it within a Supabase Client\n  const supabase = createClient(\"https://xyzcompany.supabase.co\", \"publishable-or-anon-key\")\n  const { user, error } = supabase.auth.setAuth(access_token)\n\n  // This client will now send requests as this user\n  const { data } = await supabase.from('your_table').select()\n}\n```\n"}]},{"id":"on-auth-state-change","title":"onAuthStateChange()","$ref":"@supabase/gotrue-js.GoTrueClient.onAuthStateChange","examples":[{"id":"listen-to-auth-changes","name":"Listen to auth changes","isSpotlight":true,"code":"```js\nsupabase.auth.onAuthStateChange((event, session) => {\n  console.log(event, session)\n})\n```\n"},{"id":"listen-to-sign-in","name":"Listen to sign in","code":"```js\nsupabase.auth.onAuthStateChange((event, session) => {\n  if (event == 'SIGNED_IN') console.log('SIGNED_IN', session)\n})\n```\n"},{"id":"listen-to-sign-out","name":"Listen to sign out","code":"```js\nsupabase.auth.onAuthStateChange((event, session) => {\n  if (event == 'SIGNED_OUT') console.log('SIGNED_OUT', session)\n})\n```\n"},{"id":"listen-to-token-refresh","name":"Listen to token refresh","code":"```js\nsupabase.auth.onAuthStateChange((event, session) => {\n  if (event == 'TOKEN_REFRESHED') console.log('TOKEN_REFRESHED', session)\n})\n```\n"},{"id":"listen-to-user-updates","name":"Listen to user updates","code":"```js\nsupabase.auth.onAuthStateChange((event, session) => {\n  if (event == 'USER_UPDATED') console.log('USER_UPDATED', session)\n})\n```\n"},{"id":"listen-to-user-deleted","name":"Listen to user deleted","code":"```js\nsupabase.auth.onAuthStateChange((event, session) => {\n  if (event == 'USER_DELETED') console.log('USER_DELETED', session)\n})\n```\n"},{"id":"listen-to-password-recovery-events","name":"Listen to password recovery events","code":"```js\nsupabase.auth.onAuthStateChange((event, session) => {\n  if (event == 'PASSWORD_RECOVERY') console.log('PASSWORD_RECOVERY', session)\n})\n```\n"}]},{"id":"get-user","title":"getUser()","$ref":"@supabase/gotrue-js.GoTrueApi.getUser","notes":"- Fetches the user object from the database instead of local storage.\n- Note that user() fetches the user object from local storage which might not be the most updated.\n- Requires the user's access_token.\n","examples":[{"id":"fetch-the-user-object-using-the-access-token-jwt","name":"Fetch the user object using the access_token jwt.","isSpotlight":true,"code":"```js\nconst { user, error } = await supabase.auth.api.getUser(\n  'ACCESS_TOKEN_JWT',\n)\n```\n"}]},{"id":"list-users","title":"listUsers()","$ref":"@supabase/gotrue-js.GoTrueApi.listUsers","notes":"- Requires a `service_role` key.\n- This function should be called on a server. Never expose your `service_role` key in the browser.\n","examples":[{"id":"get-a-full-list-of-users","name":"Get a full list of users.","isSpotlight":true,"code":"```js\nconst { data: user, error } = await supabase.auth.api.listUsers()\n```\n"}]},{"id":"create-user","title":"createUser()","$ref":"@supabase/gotrue-js.GoTrueApi.createUser","notes":"- Requires a `service_role` key.\n- This function should be called on a server. Never expose your `service_role` key in the browser.\n- If you do not provide the `email_confirm` and `phone_confirm` options to this function, both will default to false.\n","examples":[{"id":"create-a-new-user-with-custom-user-metadata","name":"Create a new user with custom user metadata","isSpotlight":true,"code":"```js\nconst { data: user, error } = await supabase.auth.api.createUser({\n  email: 'user@email.com',\n  password: 'password',\n  user_metadata: { name: 'Yoda' }\n})\n```\n"},{"id":"auto-confirm-the-users-email","name":"Auto-confirm email.","isSpotlight":true,"code":"```js\nconst { data: user, error } = await supabase.auth.api.createUser({\n  email: 'user@email.com',\n  email_confirm: true\n})\n```\n"},{"id":"auto-confirm-the-users-phone-number","name":"Auto-confirm phone.","isSpotlight":true,"code":"```js\nconst { data: user, error } = await supabase.auth.api.createUser({\n  phone: '1234567890',\n  phone_confirm: true\n})\n```\n"}]},{"id":"delete-user","title":"deleteUser()","$ref":"@supabase/gotrue-js.GoTrueApi.deleteUser","notes":"- Requires a `service_role` key.\n- This function should be called on a server. Never expose your `service_role` key in the browser.\n","examples":[{"id":"removes-a-user","name":"Remove a user completely.","isSpotlight":true,"code":"```js\nconst { data: user, error } = await supabase.auth.api.deleteUser(\n  '715ed5db-f090-4b8c-a067-640ecee36aa0'\n)\n```\n"}]},{"id":"invite-user-by-email","title":"inviteUserByEmail()","$ref":"@supabase/gotrue-js.GoTrueApi.inviteUserByEmail","notes":"- Requires a `service_role` key.\n- This function should only be called on a server. Never expose your `service_role` key in the browser.\n- The `inviteUserByEmail()` method is typically used by administrators to invite users to join the application.\n","examples":[{"id":"basic-example","name":"Basic example.","isSpotlight":false,"code":"```js\nconst { data: user, error } = await supabase.auth\n  .api\n  .inviteUserByEmail('email@example.com')\n```\n"}]},{"id":"send-mobile-otp","title":"sendMobileOTP()","$ref":"@supabase/gotrue-js.GoTrueApi.sendMobileOTP","notes":"- Requires a `service_role` key.\n- This function should only be called on a server. Never expose your `service_role` key in the browser.\n","examples":[{"id":"basic-example","name":"Basic example.","isSpotlight":false,"code":"```js\nconst { data: user, error } = await supabase.auth\n  .api\n  .sendMobileOTP('12345879')\n```\n"}]},{"id":"reset-password-for-email","title":"resetPasswordForEmail()","$ref":"@supabase/gotrue-js.GoTrueApi.resetPasswordForEmail","notes":"Sends a password reset request to an email address.\n- When the user clicks the reset link in the email they are redirected back to your application.\nYou can configure the URL that the user is redirected to via the `redirectTo` param.\nSee [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `updateUser()`:\n```js\nconst { data, error } = await supabase.auth.update({\n  password: new_password,\n})\n```\n","examples":[{"id":"reset-password","name":"Reset password","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase.auth.api.resetPasswordForEmail(\n  email,\n  { redirectTo: 'https://example.com/update-password' }\n)\n```\n"},{"id":"reset-password-react","name":"Reset password (React)","isSpotlight":true,"code":"```js\n/**\n * Step 1: Send the user an email to get a password reset token.\n * This email contains a link which sends the user back to your application.\n */\nconst { data, error } = await supabase.auth.api.resetPasswordForEmail(\n  email,\n  { redirectTo: 'https://example.com/update-password' }\n)\n\n/**\n * Step 2: Once the user is redirected back to your application,\n * ask the user to reset their password.\n */\nuseEffect(() => {\n  supabase.auth.onAuthStateChange(async (event, session) => {\n    if (event == \"PASSWORD_RECOVERY\") {\n      const newPassword = prompt(\"What would you like your new password to be?\");\n      const { data, error } = await supabase.auth.update({\n        password: newPassword,\n      })\n\n      if (data) alert(\"Password updated successfully!\")\n      if (error) alert(\"There was an error updating your password.\")\n    }\n  })\n}, [])\n```\n"}]},{"id":"generate-link","title":"generateLink()","$ref":"@supabase/gotrue-js.GoTrueApi.generateLink","notes":"- Requires a `service_role` key.\n- This function should only be called on a server. Never expose your `service_role` key in the browser.\n","examples":[{"id":"generate-an-invite-link","name":"Generate an invite link","isSpotlight":false,"code":"```js\nconst { data: user, error } = await supabase.auth.api.generateLink(\n  'invite',\n  'email@example.com'\n)\n```\n"}]},{"id":"update-user-by-id","title":"updateUserById()","$ref":"@supabase/gotrue-js.GoTrueApi.updateUserById","notes":"- Requires a `service_role` key.\n- This function should only be called on a server. Never expose your `service_role` key in the browser.\n","examples":[{"id":"updates-a-users-email","name":"Updates a user's email.","isSpotlight":true,"code":"```js\nconst { data: user, error } = await supabase.auth.api.updateUserById(\n  '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',\n  { email: 'new@email.com' }\n)\n```\n"},{"id":"updates-a-users-password","name":"Updates a user's password.","isSpotlight":true,"code":"```js\nconst { data: user, error } = await supabase.auth.api.updateUserById(\n  '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',\n  { password: 'new_password' }\n)\n```\n"},{"id":"updates-a-users-metadata","name":"Updates a user's metadata.","isSpotlight":true,"code":"```js\nconst { data: user, error } = await supabase.auth.api.updateUserById(\n  '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',\n  { user_metadata: { hello: 'world' } }\n)\n```\n"},{"id":"updates-a-users-app-metadata","name":"Updates a user's app_metadata.","isSpotlight":true,"code":"```js\nconst { data: user, error } = await supabase.auth.api.updateUserById(\n  '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',\n  { app_metadata: { plan: 'trial' } }\n)\n```\n"},{"id":"confirms-a-users-email-address","name":"Confirms a user's email address.","isSpotlight":true,"code":"```js\nconst { data: user, error } = await supabase.auth.api.updateUserById(\n  '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',\n  { email_confirm: true }\n)\n```\n"},{"id":"confirms-a-users-phone-number","name":"Confirms a user's phone number.","isSpotlight":true,"code":"```js\nconst { data: user, error } = await supabase.auth.api.updateUserById(\n  '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',\n  { phone_confirm: true }\n)\n```\n"}]},{"id":"invoke","title":"invoke()","description":"Invokes a Supabase Edge Function.\n","$ref":"@supabase/functions-js.FunctionsClient.invoke","notes":"- Requires an Authorization header.\n- Invoke params generally match the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) spec.\n","examples":[{"id":"basic-invocation","name":"Basic invocation.","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase.functions.invoke('hello', {\n  body: JSON.stringify({ foo: 'bar' })\n})\n```\n"},{"name":"Specifying response type.","description":"By default, `invoke()` will parse the response as JSON. You can parse the response in the following formats: `json`, `blob`, `text`, and `arrayBuffer`.\n","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase.functions.invoke('hello', {\n  responseType: 'text',\n  body: JSON.stringify({ foo: 'bar' })\n})\n```\n"},{"id":"passing-custom-headers","name":"Passing custom headers.","description":"You can pass custom headers to your Edge Function. Note: supabase-js automatically passes the `Authorization` header with the signed in user's JWT.\n","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase.functions.invoke('hello', {\n  headers: {\n    \"my-custom-header\": 'my-custom-header-value'\n  },\n  body: JSON.stringify({ foo: 'bar' })\n})\n```\n"}]},{"id":"select","title":"Fetch data: select()","$ref":"@supabase/postgrest-js.\"lib/PostgrestQueryBuilder\".PostgrestQueryBuilder.select","notes":"- By default, Supabase projects will return a maximum of 1,000 rows. This setting can be changed in Project API Settings. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Modifiers](/docs/reference/javascript/using-modifiers)\n- `select()` can be combined with [Filters](/docs/reference/javascript/using-filters)\n- If using the Supabase hosted platform `apikey` is technically a reserved keyword, since the API gateway will pluck it out for authentication. [It should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n","examples":[{"id":"getting-your-data","name":"Getting your data","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .select()\n```\n"},{"id":"selecting-specific-columns","name":"Selecting specific columns","description":"You can select specific fields from your tables.","code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name')\n```\n"},{"id":"query-foreign-tables","name":"Query foreign tables","description":"If your database has foreign key relationships, you can query related tables too.","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .select(`\n    name,\n    cities (\n      name\n    )\n  `)\n```\n","note":"What about join tables\nIf you're in a situation where your tables are **NOT** directly related, but instead are joined by a _join table_,\nyou can still use the `select()` method to query the related data. The PostgREST engine detects the relationship automatically.\nFor more details, [follow the link](https://postgrest.org/en/latest/api.html#embedding-through-join-tables).\n"},{"id":"query-the-same-foreign-table-multiple-times","name":"Query the same foreign table multiple times","description":"Sometimes you will need to query the same foreign table twice.\nIn this case, you can use the name of the joined column to identify\nwhich join you intend to use. For convenience, you can also give an\nalias for each column.\n","code":"```js\nconst { data, error } = await supabase\n  .from('products')\n  .select(`\n    id,\n    supplier:supplier_id ( name ),\n    purchaser:purchaser_id ( name )\n  `)\n```\n"},{"id":"filtering-with-inner-joins","name":"Filtering with inner joins","description":"If you want to filter a table based on a child table's values you can use the `!inner()` function. For example, if you wanted\nto select all rows in a `message` table which belong to a user with the `username` \"Jane\":\n","code":"```js\nconst { data, error } = await supabase\n  .from('messages')\n  .select('*, users!inner(*)')\n  .eq('users.username', 'Jane')\n```\n"},{"id":"querying-with-count-option","name":"Querying with count option","description":"You can get the number of rows by using the count option.\nAllowed values for count option are `null`, [exact](https://postgrest.org/en/stable/api.html#exact-count), [planned](https://postgrest.org/en/stable/api.html#planned-count) and [estimated](https://postgrest.org/en/stable/api.html#estimated-count).\n","code":"```js\nconst { data, error, count } = await supabase\n  .from('cities')\n  .select('name', { count: 'exact' }) // if you don't want to return any rows, you can use { count: 'exact', head: true }\n```\n"},{"id":"querying-json-data","name":"Querying JSON data","description":"If you have data inside of a JSONB column, you can apply select\nand query filters to the data values. Postgres offers a\n[number of operators](https://www.postgresql.org/docs/current/functions-json.html)\nfor querying JSON data. Also see\n[PostgREST docs](http://postgrest.org/en/v7.0.0/api.html#json-columns) for more details.\n","code":"```js\nconst { data, error } = await supabase\n  .from('users')\n  .select(`\n    id, name,\n    address->street\n  `)\n  .eq('address->postcode', 90210)\n```\n"},{"name":"Return data as CSV","description":"By default the data is returned in JSON format, however you can also request for it to be returned as Comma Separated Values.\n","code":"```js\nconst { data, error } = await supabase\n  .from('users')\n  .select()\n  .csv()\n```\n"},{"name":"Aborting requests in-flight","description":"You can use an [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController) to abort requests. Note that `status` and `statusText` doesn't mean anything for aborted requests, since the request wasn't actually fulfilled.\n","code":"```js\nconst ac = new AbortController()\nsupabase\n  .from('very_big_table')\n  .select()\n  .abortSignal(ac.signal)\n  .then(console.log)\nac.abort()\n// {\n//   error: {\n//     message: 'FetchError: The user aborted a request.',\n//     details: '',\n//     hint: '',\n//     code: ''\n//   },\n//   data: null,\n//   body: null,\n//   count: null,\n//   status: 400,\n//   statusText: 'Bad Request'\n// }\n```\n"}]},{"id":"insert","title":"Create data: insert()","$ref":"@supabase/postgrest-js.\"lib/PostgrestQueryBuilder\".PostgrestQueryBuilder.insert","notes":"- By default, every time you run `insert()`, the client library will make a `select` to return the full record.\nThis is convenient, but it can also cause problems if your Policies are not configured to allow the `select` operation.\nIf you are using Row Level Security and you are encountering problems, try setting the `returning` param to `minimal`.\n","examples":[{"id":"create-a-record","name":"Create a record","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .insert([\n    { name: 'The Shire', country_id: 554 }\n  ])\n```\n"},{"id":"bulk-create","name":"Bulk create","description":"When running a bulk create, the operation is handled in a single transaction. If any of the inserts fail, all other operations are\nrolled back.\n","code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .insert([\n    { name: 'The Shire', country_id: 554 },\n    { name: 'Rohan', country_id: 555 },\n  ])\n```\n"},{"id":"upsert","name":"Upsert","description":"For upsert, if set to true, primary key columns would need to be included\nin the data parameter in order for an update to properly happen. Also, primary keys\nused must be natural, not surrogate. There are however,\n[workarounds](https://github.com/PostgREST/postgrest/issues/1118)\nfor surrogate primary keys.\n","code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .insert(\n    [\n      { name: 'The Shire', country_id: 554 },\n      { name: 'Rohan', country_id: 555 },\n      { name: 'City by the Bay', country_id:840}\n    ],\n    { upsert: true })\n```\n"}]},{"id":"update","title":"Modify data: update()","$ref":"@supabase/postgrest-js.\"lib/PostgrestQueryBuilder\".PostgrestQueryBuilder.update","notes":"- `update()` should always be combined with [Filters](/docs/reference/javascript/using-filters) to target the item(s) you wish to update.\n","examples":[{"id":"updating-your-data","name":"Updating your data","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('characters')\n  .update({ name: 'Han Solo' })\n  .match({ name: 'Han' })\n```\n"},{"id":"updating-json-data","name":"Updating JSON data","description":"Postgres offers a\n[number of operators](https://www.postgresql.org/docs/current/functions-json.html)\nfor working with JSON data. Right now it is only possible to update an entire JSON document,\nbut we are [working on ideas](https://github.com/PostgREST/postgrest/issues/465) for updating individual keys.\n","code":"```js\nconst { data, error } = await supabase\n  .from('users')\n  .update(`\n    address: {\n      street: 'Melrose Place',\n      postcode: 90210\n    }\n  `)\n  .eq('address->postcode', 90210)\n```\n"}]},{"id":"upsert","title":"Upsert data: upsert()","$ref":"@supabase/postgrest-js.\"lib/PostgrestQueryBuilder\".PostgrestQueryBuilder.upsert","notes":"- Primary keys should be included in the data payload in order for an update to work correctly.\n- Primary keys  must be natural, not surrogate. There are however, [workarounds](https://github.com/PostgREST/postgrest/issues/1118) for surrogate primary keys.\n- If you need to insert new data and update existing data at the same time, use [Postgres triggers](https://github.com/supabase/postgrest-js/issues/173#issuecomment-825124550).\n","examples":[{"id":"upsert-your-data","name":"Upsert your data","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('messages')\n  .upsert({ id: 3, message: 'foo', username: 'supabot' })\n```\n"},{"id":"bulk-upsert-your-data","name":"Bulk Upsert your data","isSpotlight":false,"code":"```js\nconst { data, error } = await supabase\n  .from('messages')\n  .upsert([\n  { id: 3, message: 'foo', username: 'supabot' },\n  { id: 4, message: 'bar', username: 'supabot' }\n  ])\n```\n"},{"id":"upserting-into-tables-with-constraints","name":"Upserting into tables with constraints","description":"Running the following will cause supabase to upsert data into the `users` table.\nIf the username 'supabot' already exists, the `onConflict` argument tells supabase to overwrite that row\nbased on the column passed into `onConflict`.\n","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('users')\n  .upsert({ username: 'supabot' }, { onConflict: 'username' })\n```\n"},{"name":"Return the exact number of rows","isSpotlight":true,"code":"```js\nconst { data, error, count } = await supabase\n  .from('users')\n  .upsert({\n      id: 3, message: 'foo',\n      username: 'supabot'\n  }, {\n    count: 'exact'\n  })\n```\n"}]},{"id":"delete","title":"Delete data: delete()","$ref":"@supabase/postgrest-js.\"lib/PostgrestQueryBuilder\".PostgrestQueryBuilder.delete","notes":"- `delete()` should always be combined with [filters](/docs/reference/javascript/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have\n  [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only\n  rows visible through `SELECT` policies are deleted. Note that by default\n  no rows are visible, so you need at least one `SELECT`/`ALL` policy that\n  makes the rows visible.\n","examples":[{"id":"delete-records","name":"Delete records","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .delete()\n  .match({ id: 666 })\n```\n"}]},{"id":"rpc","title":"Postgres functions: rpc()","description":"You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere.\nFunctions are useful when the logic rarely changes—like for password resets and updates.\n\n```sql\ncreate or replace function hello_world() returns text as $$\n  select 'Hello world';\n$$ language sql;\n```\n","$ref":"@supabase/postgrest-js.\"lib/PostgrestRpcBuilder\".PostgrestRpcBuilder.rpc","examples":[{"id":"call-a-postgres-function-without-arguments","name":"Call a Postgres function without arguments","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .rpc('hello_world')\n```\n"},{"id":"call-a-postgres-function-with-arguments","name":"Call a Postgres function with arguments","code":"```js\nconst { data, error } = await supabase\n  .rpc('echo_city', { name: 'The Shire' })\n```\n"},{"id":"bulk-processing","name":"Bulk processing","description":"You can process large payloads at once using [array parameters](https://postgrest.org/en/stable/api.html#calling-functions-with-array-parameters).","code":"```js\nconst { data, error } = await postgrest\n  .rpc('echo_cities', { names: ['The Shire', 'Mordor'] })\n```\n"},{"id":"call-a-postgres-function-with-filters","name":"Call a Postgres function with filters","description":"Postgres functions that return tables can also be combined with\n[Modifiers](/docs/reference/javascript/using-modifiers) and\n[Filters](/docs/reference/javascript/using-filters).\n","code":"```js\nconst { data, error } = await supabase\n  .rpc('echo_all_cities')\n  .select('name, population')\n  .eq('name', 'The Shire')\n```\n"},{"id":"call-a-postgres-function-with-count-option","name":"Call a Postgres function with a count option","description":"You can specify a count option to get the row count along with your data.\nAllowed values for count option are `null`, `exact`, `planned` and `estimated`.\n","code":"```js\nconst { data, error, count } = await supabase\n  .rpc('hello_world', {}, { count: 'exact' })\n```\n"}]},{"id":"subscribe","title":"on().subscribe()","$ref":"@supabase/supabase-js.lib/SupabaseQueryBuilder.SupabaseQueryBuilder.on","notes":"- Realtime is disabled by default for new Projects for better database performance and security. You can turn it on by [managing replication](/docs/guides/database/api#managing-realtime).\n- If you want to receive the \"previous\" data for updates and deletes, you will need to set `REPLICA IDENTITY` to `FULL`, like this: `ALTER TABLE your_table REPLICA IDENTITY FULL;`\n","examples":[{"id":"listen-to-all-database-changes","name":"Listen to all database changes","isSpotlight":true,"code":"```js\nconst mySubscription = supabase\n  .from('*')\n  .on('*', payload => {\n    console.log('Change received!', payload)\n  })\n  .subscribe()\n```\n"},{"id":"listen-to-a-specific-table","name":"Listen to a specific table","code":"```js\nconst mySubscription = supabase\n  .from('countries')\n  .on('*', payload => {\n    console.log('Change received!', payload)\n  })\n  .subscribe()\n```\n"},{"id":"listen-to-inserts","name":"Listen to inserts","code":"```js\nconst mySubscription = supabase\n  .from('countries')\n  .on('INSERT', payload => {\n    console.log('Change received!', payload)\n  })\n  .subscribe()\n```\n"},{"id":"listen-to-updates","name":"Listen to updates","description":"By default, Supabase will send only the updated record. If you want to receive the previous values as well you can\nenable full replication for the table you are listening too:\n\n```sql\nalter table \"your_table\" replica identity full;\n```\n","code":"```js\nconst mySubscription = supabase\n  .from('countries')\n  .on('UPDATE', payload => {\n    console.log('Change received!', payload)\n  })\n  .subscribe()\n```\n"},{"id":"listen-to-deletes","name":"Listen to deletes","description":"By default, Supabase does not send deleted records. If you want to receive the deleted record you can\nenable full replication for the table you are listening too:\n\n```sql\nalter table \"your_table\" replica identity full;\n```\n","code":"```js\nconst mySubscription = supabase\n  .from('countries')\n  .on('DELETE', payload => {\n    console.log('Change received!', payload)\n  })\n  .subscribe()\n```\n"},{"id":"listen-to-multiple-events","name":"Listen to multiple events","description":"You can chain listeners if you want to listen to multiple events for each table.","code":"```js\nconst mySubscription = supabase\n  .from('countries')\n  .on('INSERT', handleRecordInserted)\n  .on('DELETE', handleRecordDeleted)\n  .subscribe()\n```\n"},{"id":"listening-to-row-level-changes","name":"Listen to row level changes","description":"You can listen to individual rows using the format `{table}:{col}=eq.{val}` - where `{col}` is the column name, and `{val}` is the value which you want to match.","notes":"- ``eq`` filter works with all database types as under the hood, it's casting both the filter value and the database value to the correct type and then comparing them.\n","code":"```js\nconst mySubscription = supabase\n  .from('countries:id=eq.200')\n  .on('UPDATE', handleRecordUpdated)\n  .subscribe()\n```\n"}]},{"id":"remove-subscription","title":"removeSubscription()","$ref":"@supabase/supabase-js.index.SupabaseClient.removeSubscription","notes":"- Removing subscriptions is a great way to maintain the performance of your project's database. Supabase will automatically handle cleanup 30 seconds after a user is disconnected, but unused subscriptions may cause degradation as more users are simultaneously subscribed.\n","examples":[{"id":"remove-a-subscription","name":"Remove a subscription","isSpotlight":true,"code":"```js\nsupabase.removeSubscription(mySubscription)\n```\n"}]},{"id":"remove-all-subscriptions","title":"removeAllSubscriptions()","$ref":"@supabase/supabase-js.index.SupabaseClient.removeAllSubscriptions","notes":"- Removing subscriptions is a great way to maintain the performance of your project's database. Supabase will automatically handle cleanup 30 seconds after a user is disconnected, but unused subscriptions may cause degradation as more users are simultaneously subscribed.\n","examples":[{"id":"removes-all-subscriptions","name":"Removes all subscriptions","isSpotlight":true,"code":"```js\nsupabase.removeAllSubscriptions()\n```\n"}]},{"id":"get-subscriptions","title":"getSubscriptions()","$ref":"@supabase/supabase-js.index.SupabaseClient.getSubscriptions","examples":[{"id":"get-all-subscriptions","name":"Get all subscriptions","isSpotlight":true,"code":"```js\nconst subscriptions = supabase.getSubscriptions()\n```\n"}]},{"id":"list-buckets","title":"listBuckets()","$ref":"@supabase/storage-js.\"lib/StorageBucketApi\".StorageBucketApi.listBuckets","notes":"- Policy permissions required:\n  - `buckets` permissions: `select`\n  - `objects` permissions: none\n","examples":[{"id":"list-buckets","name":"List buckets","isSpotlight":true,"code":"```ts\nconst { data, error } = await supabase\n  .storage\n  .listBuckets()\n```\n"}]},{"id":"get-bucket","title":"getBucket()","$ref":"@supabase/storage-js.\"lib/StorageBucketApi\".StorageBucketApi.getBucket","notes":"- Policy permissions required:\n  - `buckets` permissions: `select`\n  - `objects` permissions: none\n","examples":[{"id":"get-bucket","name":"Get bucket","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .storage\n  .getBucket('avatars')\n```\n"}]},{"id":"create-bucket","title":"createBucket()","$ref":"@supabase/storage-js.\"lib/StorageBucketApi\".StorageBucketApi.createBucket","notes":"- Policy permissions required:\n  - `buckets` permissions: `insert`\n  - `objects` permissions: none\n","examples":[{"id":"create-bucket","name":"Create bucket","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .storage\n  .createBucket('avatars', { public: false })\n```\n"}]},{"id":"empty-bucket","title":"emptyBucket()","$ref":"@supabase/storage-js.\"lib/StorageBucketApi\".StorageBucketApi.emptyBucket","notes":"- Policy permissions required:\n  - `buckets` permissions: `select`\n  - `objects` permissions: `select` and `delete`\n","examples":[{"id":"empty-bucket","name":"Empty bucket","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .storage\n  .emptyBucket('avatars')\n```\n"}]},{"id":"update-bucket","title":"updateBucket()","$ref":"@supabase/storage-js.\"lib/StorageBucketApi\".StorageBucketApi.updateBucket","notes":"- Policy permissions required:\n  - `buckets` permissions: `update`\n  - `objects` permissions: none\n","examples":[{"id":"update-bucket","name":"Update bucket","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .storage\n  .updateBucket('avatars', { public: false })\n```\n"}]},{"id":"delete-bucket","title":"deleteBucket()","$ref":"@supabase/storage-js.\"lib/StorageBucketApi\".StorageBucketApi.deleteBucket","notes":"- Policy permissions required:\n  - `buckets` permissions: `select` and `delete`\n  - `objects` permissions: none\n","examples":[{"id":"delete-bucket","name":"Delete bucket","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .storage\n  .deleteBucket('avatars')\n```\n"}]},{"id":"from-upload","title":"from.upload()","$ref":"@supabase/storage-js.\"lib/StorageFileApi\".StorageFileApi.upload","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `insert`\n- For React Native, using either `Blob`, `File` or `FormData` does not work as intended. Upload file using `ArrayBuffer` from base64 file data instead, see example below.\n","examples":[{"id":"upload-file","name":"Upload file","isSpotlight":true,"code":"```js\nconst avatarFile = event.target.files[0]\nconst { data, error } = await supabase\n  .storage\n  .from('avatars')\n  .upload('public/avatar1.png', avatarFile, {\n    cacheControl: '3600',\n    upsert: false\n  })\n```\n"},{"id":"upload-file-using-arraybuffer-from-base64-file-data","name":"Upload file using `ArrayBuffer` from base64 file data","code":"```js\nimport { decode } from 'base64-arraybuffer'\n\nconst { data, error } = await supabase\n  .storage\n  .from('avatars')\n  .upload('public/avatar1.png', decode('base64FileData'), {\n    contentType: 'image/png'\n  })\n```\n"}]},{"id":"from-update","title":"from.update()","$ref":"@supabase/storage-js.\"lib/StorageFileApi\".StorageFileApi.update","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `update` and `select`\n- For React Native, using either `Blob`, `File` or `FormData` does not work as intended. Update file using `ArrayBuffer` from base64 file data instead, see example below.\n","examples":[{"id":"update-file","name":"Update file","isSpotlight":true,"code":"```js\nconst avatarFile = event.target.files[0]\nconst { data, error } = await supabase\n  .storage\n  .from('avatars')\n  .update('public/avatar1.png', avatarFile, {\n    cacheControl: '3600',\n    upsert: false\n  })\n```\n"},{"id":"update-file-using-arraybuffer-from-base64-file-data","name":"Update file using `ArrayBuffer` from base64 file data","code":"```js\nimport {decode} from 'base64-arraybuffer'\n\nconst { data, error } = await supabase\n  .storage\n  .from('avatars')\n  .update('public/avatar1.png', decode('base64FileData'), {\n    contentType: 'image/png'\n  })\n```\n"}]},{"id":"from-move","title":"from.move()","$ref":"@supabase/storage-js.\"lib/StorageFileApi\".StorageFileApi.move","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `update` and `select`\n","examples":[{"id":"move-file","name":"Move file","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .storage\n  .from('avatars')\n  .move('public/avatar1.png', 'private/avatar2.png')\n```\n"}]},{"id":"from-copy","title":"from.copy()","$ref":"@supabase/storage-js.\"lib/StorageFileApi\".StorageFileApi.copy","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `insert` and `select`\n","examples":[{"id":"copy-file","name":"Copy file","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .storage\n  .from('avatars')\n  .copy('public/avatar1.png', 'private/avatar2.png')\n```\n"}]},{"id":"from-create-signed-url","title":"from.createSignedUrl()","$ref":"@supabase/storage-js.\"lib/StorageFileApi\".StorageFileApi.createSignedUrl","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `select`\n","examples":[{"id":"create-signed-url","name":"Create Signed URL","isSpotlight":true,"code":"```js\nconst { signedURL, error } = await supabase\n  .storage\n  .from('avatars')\n  .createSignedUrl('folder/avatar1.png', 60)\n```\n"}]},{"id":"from-create-signed-urls","title":"from.createSignedUrls()","$ref":"@supabase/storage-js.\"lib/StorageFileApi\".StorageFileApi.createSignedUrls","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `select`\n","examples":[{"id":"create-signed-urls","name":"Create Signed URLs","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .storage\n  .from('avatars')\n  .createSignedUrls(['folder/avatar1.png', 'folder/avatar2.png'], 60)\n```\n"}]},{"id":"from-get-public-url","title":"from.getPublicUrl()","$ref":"@supabase/storage-js.\"lib/StorageFileApi\".StorageFileApi.getPublicUrl","notes":"- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/javascript/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: none\n","examples":[{"id":"returns-the-url-for-an-asset-in-a-public-bucket","name":"Returns the URL for an asset in a public bucket","isSpotlight":true,"code":"```js\nconst { publicURL, error } = supabase\n  .storage\n  .from('public-bucket')\n  .getPublicUrl('folder/avatar1.png')\n```\n"}]},{"id":"from-download","title":"from.download()","$ref":"@supabase/storage-js.\"lib/StorageFileApi\".StorageFileApi.download","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `select`\n","examples":[{"id":"download-file","name":"Download file","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .storage\n  .from('avatars')\n  .download('folder/avatar1.png')\n```\n"}]},{"id":"from-remove","title":"from.remove()","$ref":"@supabase/storage-js.\"lib/StorageFileApi\".StorageFileApi.remove","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `delete` and `select`\n","examples":[{"id":"delete-file","name":"Delete file","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .storage\n  .from('avatars')\n  .remove(['folder/avatar1.png'])\n```\n"}]},{"id":"from-list","title":"from.list()","$ref":"@supabase/storage-js.\"lib/StorageFileApi\".StorageFileApi.list","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `select`\n","examples":[{"id":"list-files-in-a-bucket","name":"List files in a bucket","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .storage\n  .from('avatars')\n  .list('folder', {\n    limit: 100,\n    offset: 0,\n    sortBy: { column: 'name', order: 'asc' },\n  })\n```\n"},{"id":"search-files-in-a-bucket","name":"Search files in a bucket","code":"```js\nconst { data, error } = await supabase\n  .storage\n  .from('avatars')\n  .list('folder', {\n    limit: 100,\n    offset: 0,\n    sortBy: { column: 'name', order: 'asc' },\n    search: 'jon'\n  })\n```\n"}]},{"id":"using-modifiers","title":"Using Modifiers","description":"Modifiers can be used on `select()` queries.\n\nIf a Postgres function returns a table response, you can also apply modifiers to the `rpc()` function.\n"},{"id":"limit","title":"limit()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.limit","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .limit(1)\n```\n"},{"id":"with-embedded-resources","name":"With embedded resources","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .select('name, cities(name)')\n  .eq('name', 'The Shire')\n  .limit(1, { foreignTable: 'cities' })\n```\n"}]},{"id":"order","title":"order()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.order","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .order('id', { ascending: false })\n```\n"},{"id":"with-embedded-resources","name":"With embedded resources","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .select('name, cities(name)')\n  .eq('name', 'The Shire')\n  .order('name', {foreignTable: 'cities'})\n```\n"},{"id":"ordering-multiple-columns","name":"Ordering multiple columns","code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name', 'country_id')\n  .order('country_id', { ascending: false })\n  .order('name', { ascending: false })\n```\n"}]},{"id":"range","title":"range()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.range","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .range(0,3)\n```\n"}]},{"id":"single","title":"single()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.single","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .limit(1)\n  .single()\n```\n"}]},{"id":"maybe-single","title":"maybeSingle()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.maybeSingle","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('instruments')\n  .select('name, section_id')\n  .eq('name', 'violin')\n  .maybeSingle()\n```\n"}]},{"id":"using-filters","title":"Using Filters","description":"Filters can be used on `select()`, `update()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\n### Applying Filters\n\nYou must apply your filters to the end of your query. For example:\n\n```js\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .eq('name', 'The Shire')    // Correct\n\nconst { data, error } = await supabase\n  .from('cities')\n  .eq('name', 'The Shire')    // Incorrect\n  .select('name, country_id')\n```\n\n### Chaining\n\nFilters can be chained together to produce advanced queries. For example:\n\n```js\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .gte('population', 1000)\n  .lt('population', 10000)\n```\n\n### Conditional Chaining\n\nFilters can be built up one step at a time and then executed. For example:\n\n```js\nconst filterByName = null\nconst filterPopLow = 1000\nconst filterPopHigh = 10000\n\nlet query = supabase\n  .from('cities')\n  .select('name, country_id')\n\nif (filterByName)  { query = query.eq('name', filterByName) }\nif (filterPopLow)  { query = query.gte('population', filterPopLow) }\nif (filterPopHigh) { query = query.lt('population', filterPopHigh) }\n\nconst { data, error } = await query\n```\n"},{"id":"or","title":"or()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.or","notes":"- `.or()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for the filter names and values.\n\n  ```js\n  .or('id.in.(6,7), arraycol.cs.{\"a\",\"b\"}')  // Use Postgres list () for in filter. Array {} for array column and 'cs' for contains.\n  .or(`id.in.(${arrList}),arraycol.cs.{${arr}}`)\t// You can insert a javascipt array for list or array on array column.\n  .or(`id.in.(${arrList}),rangecol.cs.[${arrRange})`)\t// You can insert a javascipt array for list or range on a range column.\n  ```\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .or('id.eq.20,id.eq.30')\n```\n"},{"id":"use-or-with-and","name":"Use `or` with `and`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('characters')\n  .select('name, book_id')\n  .or('id.gt.20,and(name.eq.Harry,name.eq.Frodo)')\n```\n"},{"id":"use-or-on-foreign-tables","name":"Use `or` on foreign tables","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('books')\n  .select('id, characters(*)')\n  .or('name.eq.Luke,name.eq.Leia', { foreignTable: \"characters\" })\n```\n"}]},{"id":"not","title":"not()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.not","notes":"- `.not()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for the filter names and values.\n\n  ```js\n    .not('name','eq','Luke')\n    .not('arraycol','cs','{\"a\",\"b\"}') // Use Postgres array {} for array column and 'cs' for contains.\n    .not('rangecol','cs','(1,2]') // Use Postgres range syntax for range column.\n    .not('id','in','(6,7)')  // Use Postgres list () for in filter.\n    .not('id','in',`(${arr})`)  // You can insert a javascript array.\n  ```\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .select('name, country_id')\n  .not('name', 'eq', 'The Shire')\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .update({ name: 'Mordor' })\n  .not('name', 'eq', 'Rohan')\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .delete()\n  .not('name', 'eq', 'The Shire')\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_countries')\n  .not('name', 'eq', 'The Shire')\n```\n"}]},{"id":"match","title":"match()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.match","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('characters')\n  .select('name, book_id')\n  .match({name: 'Harry', book_id: 156})\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('instruments')\n  .update({ name: 'piano' })\n  .match({name: 'harpsichord', section_id: 2})\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .delete()\n  .match({name: 'The Shire', country_id: 156})\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_characters')\n  .match({name: 'Frodo', book_id: 156})\n```\n"}]},{"id":"eq","title":"eq()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.eq","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .eq('name', 'The shire')\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .update({ name: 'Mordor' })\n  .eq('name', 'Rohan')\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .delete()\n  .eq('name', 'Mordor')\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_countries')\n  .eq('name', 'Mordor')\n```\n"}]},{"id":"neq","title":"neq()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.neq","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .neq('name', 'The shire')\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .update({ name: 'Mordor' })\n  .neq('name', 'Gondor')\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .delete()\n  .neq('name', 'Mordor')\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_countries')\n  .neq('name', 'Mordor')\n```\n"}]},{"id":"gt","title":"gt()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.gt","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .gt('country_id', 250)\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .update({ name: 'Mordor' })\n  .gt('country_id', 250)\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .delete()\n  .gt('country_id', 250)\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_cities')\n  .gt('country_id', 250)\n```\n"}]},{"id":"gte","title":"gte()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.gte","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .gte('country_id', 250)\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .update({ name: 'Mordor' })\n  .gte('country_id', 250)\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .delete()\n  .gte('country_id', 250)\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_cities')\n  .gte('country_id', 250)\n```\n"}]},{"id":"lt","title":"lt()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.lt","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .lt('country_id', 250)\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .update({ name: 'Mordor' })\n  .lt('country_id', 250)\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .delete()\n  .lt('country_id', 250)\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_cities')\n  .lt('country_id', 250)\n```\n"}]},{"id":"lte","title":"lte()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.lte","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .lte('country_id', 250)\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .update({ name: 'Mordor' })\n  .lte('country_id', 250)\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .delete()\n  .lte('country_id', 250)\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_cities')\n  .lte('country_id', 250)\n```\n"}]},{"id":"like","title":"like()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.like","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .like('name', '%la%')\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .update({ name: 'Mordor' })\n  .like('name', '%la%')\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .delete()\n  .like('name', '%la%')\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_cities')\n  .like('name', '%la%')\n```\n"}]},{"id":"ilike","title":"ilike()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.ilike","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .ilike('name', '%la%')\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .update({ name: 'Mordor' })\n  .ilike('name', '%la%')\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .delete()\n  .ilike('name', '%la%')\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_cities')\n  .ilike('name', '%la%')\n```\n"}]},{"id":"is","title":"is()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.is","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .is('name', null)\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .update({ name: 'Mordor' })\n  .is('name', null)\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('cities')\n  .delete()\n  .is('name', null)\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_cities')\n  .is('name', null)\n```\n"}]},{"id":"in","title":"in()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.in","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('characters')\n  .select('name, book_id')\n  .in('name', ['Harry', 'Hermione'])\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .update({ name: 'Mordor' })\n  .in('name', ['Gondor', 'Rohan'])\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('characters')\n  .delete()\n  .in('name', ['Dumbledore', 'Snape'])\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_characters')\n  .in('name', ['Luke', 'Leia'])\n```\n"}]},{"id":"contains","title":"contains()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.contains","notes":"- `.contains()` can work on array columns or range columns.\n  It is very useful for finding rows where a tag array contains all the values in the filter array.\n\n  ```js\n  .contains('arraycol',[\"a\",\"b\"]) // You can use a javascript array for an array column\n  .contains('arraycol','{\"a\",\"b\"}') // You can use a string with Postgres array {} for array column.\n  .contains('rangecol','(1,2]') // Use Postgres range syntax for range column.\n  .contains('rangecol',`(${arr}]`) // You can insert an array into a string.\n  ```\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .select('name, id, main_exports')\n  .contains('main_exports', ['oil'])\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .update({ name: 'Mordor' })\n  .contains('main_exports', ['oil'])\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .delete()\n  .contains('main_exports', ['oil'])\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_countries')\n  .contains('main_exports', ['oil'])\n```\n"}]},{"id":"contained-by","title":"containedBy()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.containedBy","notes":"- `.containedBy()` can work on array columns or range columns.\n\n  ```js\n  .containedBy('arraycol',[\"a\",\"b\"]) // You can use a javascript array for an array column\n  .containedBy('arraycol','{\"a\",\"b\"}') // You can use a string with Postgres array {} for array column.\n  .containedBy('rangecol','(1,2]') // Use Postgres range syntax for range column.\n  .containedBy('rangecol',`(${arr}]`) // You can insert an array into a string.\n  ```\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .select('name, id, main_exports')\n  .containedBy('main_exports', ['cars', 'food', 'machine'])\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .update({ name: 'Mordor' })\n  .containedBy('main_exports', ['orks', 'surveillance', 'evil'])\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .delete()\n  .containedBy('main_exports', ['cars', 'food', 'machine'])\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_countries')\n  .containedBy('main_exports', ['cars', 'food', 'machine'])\n```\n"}]},{"id":"range-lte","title":"rangeLte()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.rangeLt","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .select('name, id, population_range_millions')\n  .rangeLt('population_range_millions', '[150, 250]')\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .update({ name: 'Mordor' })\n  .rangeLt('population_range_millions', '[150, 250]')\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .delete()\n  .rangeLt('population_range_millions', '[150, 250]')\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_countries')\n  .rangeLt('population_range_millions', '[150, 250]')\n```\n"}]},{"id":"range-gt","title":"rangeGt()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.rangeGt","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .select('name, id, population_range_millions')\n  .rangeGt('population_range_millions', '[150, 250]')\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .update({ name: 'Mordor' })\n  .rangeGt('population_range_millions', '[150, 250]')\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .delete()\n  .rangeGt('population_range_millions', '[150, 250]')\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_countries')\n  .rangeGt('population_range_millions', '[150, 250]')\n```\n"}]},{"id":"range-gte","title":"rangeGte()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.rangeGte","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .select('name, id, population_range_millions')\n  .rangeGte('population_range_millions', '[150, 250]')\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .update({ name: 'Mordor' })\n  .rangeGte('population_range_millions', '[150, 250]')\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .delete()\n  .rangeGte('population_range_millions', '[150, 250]')\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_countries')\n  .rangeGte('population_range_millions', '[150, 250]')\n```\n"}]},{"id":"range-lte","title":"rangeLte()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.rangeLte","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .select('name, id, population_range_millions')\n  .rangeLte('population_range_millions', '[150, 250]')\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .update({ name: 'Mordor' })\n  .rangeLte('population_range_millions', '[150, 250]')\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .delete()\n  .rangeLte('population_range_millions', '[150, 250]')\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_countries')\n  .rangeLte('population_range_millions', '[150, 250]')\n```\n"}]},{"id":"range-adjacent","title":"rangeAdjacent()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.rangeAdjacent","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .select('name, id, population_range_millions')\n  .rangeAdjacent('population_range_millions', '[70, 185]')\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .update({ name: 'Mordor' })\n  .rangeAdjacent('population_range_millions', '[70, 185]')\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .delete()\n  .rangeAdjacent('population_range_millions', '[70, 185]')\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_countries')\n  .rangeAdjacent('population_range_millions', '[70, 185]')\n```\n"}]},{"id":"overlaps","title":"overlaps()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.overlaps","notes":"- `.overlaps()` can work on array columns or range columns.\n\n  ```js\n  .overlaps('arraycol',[\"a\",\"b\"]) // You can use a javascript array for an array column\n  .overlaps('arraycol','{\"a\",\"b\"}') // You can use a string with Postgres array {} for array column.\n  .overlaps('rangecol','(1,2]') // Use Postgres range syntax for range column.\n  .overlaps('rangecol',`(${arr}]`)  // You can insert an array into a string.\n  ```\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .select('name, id, main_exports')\n  .overlaps('main_exports', ['computers', 'minerals'])\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nlet countries = await supabase\n  .from('countries')\n  .update({ name: 'Mordor' })\n  .overlaps('main_exports', ['computers', 'minerals'])\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .delete()\n  .overlaps('main_exports', ['computers', 'minerals'])\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_countries')\n  .overlaps('main_exports', ['computers', 'minerals'])\n```\n"}]},{"id":"text-search","title":"textSearch()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.textSearch","examples":[{"id":"text-search","name":"Text search","code":"```js\nconst { data, error } = await supabase\n  .from('quotes')\n  .select('catchphrase')\n  .textSearch('catchphrase', `'fat' & 'cat'`, {\n    config: 'english'\n  })\n```\n"},{"id":"basic-normalization","name":"Basic normalization","description":"Uses PostgreSQL's `plainto_tsquery` function.","code":"```js\nconst { data, error } = await supabase\n  .from('quotes')\n  .select('catchphrase')\n  .textSearch('catchphrase', `'fat' & 'cat'`, {\n    type: 'plain',\n    config: 'english'\n  })\n```\n"},{"id":"full-normalization","name":"Full normalization","description":"Uses PostgreSQL's `phraseto_tsquery` function.","code":"```js\nconst { data, error } = await supabase\n  .from('quotes')\n  .select('catchphrase')\n  .textSearch('catchphrase', `'fat' & 'cat'`, {\n    type: 'phrase',\n    config: 'english'\n  })\n```\n"},{"id":"web-search","name":"Websearch","description":"Uses PostgreSQL's `websearch_to_tsquery` function.\nThis function will never raise syntax errors, which makes it possible to use raw user-supplied input for search, and can be used with advanced operators.\n\n- `unquoted text`: text not inside quote marks will be converted to terms separated by & operators, as if processed by plainto_tsquery.\n- `\"quoted text\"`: text inside quote marks will be converted to terms separated by `<->` operators, as if processed by phraseto_tsquery.\n- `OR`: the word “or” will be converted to the | operator.\n- `-`: a dash will be converted to the ! operator.\n","code":"```js\nconst { data, error } = await supabase\n  .from('quotes')\n  .select('catchphrase')\n  .textSearch('catchphrase', `'fat or cat'`, {\n    type: 'websearch',\n    config: 'english'\n  })\n```\n"}]},{"id":"filter","title":"filter()","$ref":"@supabase/postgrest-js.\"lib/PostgrestFilterBuilder\".PostgrestFilterBuilder.filter","notes":"- `.filter()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for the filter names and values, so it should only be used as an escape hatch in case other filters don't work.\n  ```js\n    .filter('arraycol','cs','{\"a\",\"b\"}') // Use Postgres array {} for array column and 'cs' for contains.\n    .filter('rangecol','cs','(1,2]') // Use Postgres range syntax for range column.\n    .filter('id','in','(6,7)')  // Use Postgres list () for in filter.\n    .filter('id','in',`(${arr})`)  // You can insert a javascript array.\n  ```\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```js\nconst { data, error } = await supabase\n  .from('characters')\n  .select('name, book_id')\n  .filter('name', 'in', '(\"Harry\",\"Hermione\")')\n```\n"},{"id":"with-update","name":"With `update()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .update({ name: 'Mordor' })\n  .filter('name', 'in', '(\"Gondor\",\"Rohan\")')\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```js\nconst { data, error } = await supabase\n  .from('countries')\n  .delete()\n  .filter('name', 'in', '(\"Mordor\",\"The Shire\")')\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```js\n// Only valid if the Postgres function returns a table type.\nconst { data, error } = await supabase\n  .rpc('echo_all_countries')\n  .filter('name', 'in', '(\"Mordor\",\"The Shire\")')\n```\n"},{"id":"filter-embedded-resources","name":"Filter embedded resources","code":"```js\nconst { data, error } = await supabase\n  .from('instruments')\n  .select('name, orchestral_sections ( name )')\n  .filter('orchestral_sections.name', 'in', '(\"strings\",\"woodwinds\")')\n```\n"}]}]