[{"id":"initializing","title":"Initializing","description":"You can initialize Supabase with the `SupabaseClient` by passing your `Project URL` and `Project Key`. You can find these under your `Project Settings` â†’ `API Settings`\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n","examples":[{"id":"initialize-client","name":"Initialize Client","code":"```swift\nlet client = SupabaseClient(supabaseURL: URL(string: \"https://xyzcompany.supabase.co\")!, supabaseKey: \"publishable-or-anon-key\")\n```\n"},{"id":"initialize-client-custom-options","name":"Initialize Client with custom options","code":"```swift\nlet supabase = SupabaseClient(\n  supabaseURL: URL(string: \"https://xyzcompany.supabase.co\")!,\n  supabaseKey: \"publishable-or-anon-key\",\n  options: SupabaseClientOptions(\n    db: .init(\n      schema: \"public\"\n    ),\n    auth: .init(\n      storage: MyCustomLocalStorage(),\n      flowType: .pkce\n    ),\n    global: .init(\n      headers: [\"x-my-custom-header\": \"my-app-name\"],\n      session: URLSession.myCustomSession\n    )\n  )\n)\n```\n"}]},{"id":"auth-api","title":"Overview","notes":"- The auth methods can be accessed via the `supabase.auth` namespace.\n","examples":[{"id":"create-auth-client","name":"Create auth client","isSpotlight":true,"code":"```swift\nlet supabase = SupabaseClient(supabaseURL: URL(string: \"https://xyzcompany.supabase.co\")!, supabaseKey: \"publishable-or-anon-key\")\nlet auth = supabase.auth\n```\n"},{"id":"create-auth-client-with-custom-storage","name":"Create auth client with custom storage","isSpotlight":true,"code":"```swift\nlet supabase = SupabaseClient(\n  supabaseURL: URL(string: \"https://xyzcompany.supabase.co\")!,\n  supabaseKey: \"publishable-or-anon-key\",\n  options: .init(\n    auth: .init(\n      MyCustomLocalStorage()\n    )\n  )\n)\nlet auth = supabase.auth\n```\n"}]},{"id":"sign-up","title":"signUp()","notes":"- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- When the user confirms their email address, they are redirected to the [`SITE_URL`](/docs/guides/auth/redirect-urls) by default. You can modify your `SITE_URL` or add additional redirect URLs in [your project](/dashboard/project/_/auth/url-configuration).\n- If signUp() is called for an existing confirmed user:\n    - If **Confirm email** is enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n    - If **Confirm email** is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`getUser()`](/docs/reference/swift/get-user).\n","examples":[{"id":"sign-up","name":"Sign up","isSpotlight":true,"code":"```swift\ntry await supabase.auth.signUp(\n  email: \"example@email.com\",\n  password: \"example-password\"\n)\n```\n"},{"id":"sign-up-with-additional-user-metadata","name":"Sign up with additional user metadata","isSpotlight":false,"description":"The custom data is defined as `[String: AnyJSON]`, where `AnyJSON` is a helper type defined in the library.\n","code":"```swift\ntry await supabase.auth.signUp(\n  email: \"example@email.com\",\n  password: \"example-password\",\n  data: [\n    \"first_name\": .string(\"John\"),\n    \"age\": .number(24)\n  ]\n)\n```\n"},{"id":"sign-up-with-redirect","name":"Sign up with a redirect URL","description":"- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n","code":"```swift\ntry await supabase.auth.signUp(\n  email:  \"example@email.com\",\n  password: \"example-password\",\n  redirectTo: URL(string: \"https://example.com/welcome\")!\n)\n```\n"}]},{"id":"sign-in-with-password","title":"signInWithPassword()","notes":"- Requires either an email and password or a phone number and password.\n","examples":[{"id":"sign-in-with-email-and-password","name":"Sign in with email and password","isSpotlight":true,"code":"```swift\ntry await supabase.auth.signIn(\n  email: \"example@email.com\",\n  password: \"example-password\"\n)\n```\n"},{"id":"sign-in-with-phone-and-password","name":"Sign in with phone and password","isSpotlight":false,"code":"```swift\ntry await supabase.auth.signIn(\n  phone: \"+13334445555\",\n  password: \"same-password\"\n)\n\n// After receiving a SMS with a OTP.\ntry await supabase.auth.verifyOTP(\n  phone: \"+13334445555\",\n  token: \"123456\",\n  type: .sms\n)\n```\n"}]},{"id":"sign-in-with-otp","title":"signInWithOTP()","notes":"- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `signInWithOTP()` will signup the user instead. To restrict this behavior, you can set `shouldCreateUser` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](/dashboard/project/_/auth/templates) to include `{{ .Token }}` instead of `{{ .ConfirmationURL }}`.\n- When using magic links, specify a `redirectTo` that matches a configured url scheme in your iOS app, so Supabase can correctly redirect back to your app.\n- See our [Twilio Phone Auth Guide](/docs/guides/auth/phone-login/twilio) for details about configuring WhatsApp sign in.\n","examples":[{"id":"sign-in-with-email","name":"Sign in with email","isSpotlight":true,"description":"The user will be sent an email which contains either a magiclink or a OTP or both. By default, a given user can only request a OTP once every 60 seconds.","code":"```swift\ntry await supabase.auth.signInWithOTP(\n  email: \"example@email.com\",\n  redirectTo: URL(string: \"my-app-scheme://\")!\n)\n```\n"},{"id":"sign-in-with-sms-otp","name":"Sign in with SMS OTP","isSpotlight":false,"description":"The user will be sent a SMS which contains a OTP. By default, a given user can only request a OTP once every 60 seconds.","code":"```swift\ntry await supabase.auth.signInWithOTP(phone: \"+13334445555\")\n```\n"}]},{"id":"sign-in-with-oauth","title":"getOAuthSignInURL()","notes":"- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](https://supabase.com/docs/guides/auth#providers).\n","examples":[{"id":"sign-in-using-a-third-party-provider","name":"Sign in using a third-party provider","isSpotlight":true,"description":"- getOAuthSignInURL() provides the URL which needs to be opened preferably in a [ASWebAuthenticationSession](ASWebAuthenticationSession) instance..\n- The redirectTo URL, or `callbackURLScheme` needs to be setup correctly in your project under Authentication -> URL Configuration -> Redirect URLs.\n- When using `ASWebAuthenticationSession` or any other implementation, use the returning URL as input to `session(from:)` method.\n","code":"```swift\nlet url = try await supabase.auth.getOAuthSignInURL(provider: .github)\n\nlet session = ASWebAuthenticationSession(url: url, callbackURLScheme: \"my-app-scheme\") { url, error in\n  guard let url else { return }\n\n  Task {\n    try await supabase.auth.session(from: url)\n  }\n}\n\nsession.presentationContextProvider = self // yours ASWebAuthenticationPresentationContextProviding implementation.\n\nsession.start()\n```\n"},{"id":"sign-in-using-a-third-party-provider-with-redirect","name":"Sign in using a third-party provider with redirect","isSpotlight":false,"description":"- When the third-party provider successfully authenticates the user, the provider redirects the user to the URL specified in the `redirectTo` parameter. This parameter defaults to the [`SITE_URL`](/docs/guides/auth/redirect-urls). It does not redirect the user immediately after invoking this method.\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- getOAuthSignInURL() provides the URL which needs to be opened in a SFSafariViewController instance.\n- The redirectTo URL needs to be setup correctly in your project under Authentication -> URL Configuration -> Redirect URLs.\n","code":"```swift\nlet url = try await supabase.auth.getOAuthSignInURL(\n  provider: .google,\n  redirectTo: URL(string: \"https://example.com/welcome\")!\n)\n```\n"},{"id":"sign-in-with-scopes","name":"Sign in with scopes","isSpotlight":false,"description":"If you need additional data from an OAuth provider, you can include a space-separated list of scopes in your request to get back an OAuth provider token.\nYou may also need to specify the scopes in the provider's OAuth app settings, depending on the provider. The list of scopes will be documented by the third-party provider you are using and specifying scopes will enable you to use the OAuth provider token to call additional APIs supported by the third-party provider to get more information.\n","code":"```swift\nlet url = try await supabase.auth.getOAuthSignInURL(\n  provider: .github,\n  scopes: \"repo gist notifications\"\n)\n```\n"}]},{"id":"sign-in-with-id-token","title":"signInWithIdToken()","examples":[{"id":"sign-in-with-id-token","name":"Sign In using ID Token","description":"Use this method to implement native Sign In With Apple.","code":"```swift\nlet session = try await supabase.auth.signInWithIdToken(\n  credentials: OpenIDConnectCredentials(\n    provider: .apple,\n    idToken: \"your-id-token\",\n    nonce: \"your nonce\"\n  )\n)\n```\n"}]},{"id":"sign-out","title":"signOut()","notes":"- In order to use the `signOut()` method, the user needs to be signed in first.\n","examples":[{"id":"sign-out","name":"Sign out","isSpotlight":true,"code":"```swift\ntry await supabase.auth.signOut()\n```\n"}]},{"id":"verify-otp","title":"verifyOTP()","notes":"- The `verifyOTP` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `signup`, `magiclink`, `recovery`, `invite`, `email_change`, or `email`.\n- The verification type used should be determined based on the corresponding auth method called before `verifyOTP` to sign up / sign-in a user.\n","examples":[{"id":"verify-sms-one-time-password(otp)","name":"Verify Sms One-Time Password (OTP)","isSpotlight":true,"code":"```swift\ntry await supabase.auth.verifyOTP(\n  phone: \"+13334445555\",\n  token: \"123456\",\n  type: .sms\n)\n```\n"},{"id":"verify-signup-one-time-password(otp)","name":"Verify Signup One-Time Password (OTP)","isSpotlight":false,"code":"```swift\n   try await supabase.auth.verifyOTP(\n    email: \"example@example-email.com\",\n    token: \"123456\",\n    type: .signup\n  )\n```\n"}]},{"id":"get-session","title":"session","description":"- Returns the session, refreshing it if necessary. If no session can be found, a `GoTrueError.sessionNotFound` error is thrown.\n","examples":[{"id":"get-the-session-data","name":"Get the session data","isSpotlight":true,"code":"```swift\ntry await supabase.auth.session\n```\n"}]},{"id":"get-user","title":"user()","description":"- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n- Fetches the user object from the database instead of local session.\n- Should be used only when you require the most current user data. For faster results, `session.user` is recommended.\n","examples":[{"id":"get-the-logged-in-user-with-the-current-existing-session","name":"Get the logged in user with the current existing session","isSpotlight":true,"code":"```swift\nlet user = try await supabase.auth.user()\n```\n"},{"id":"get-the-logged-in-user-with-a-custom-access-token-jwt","name":"Get the logged in user with a custom access token jwt","isSpotlight":false,"code":"```swift\nlet user = try await supabase.auth.user(jwt: \"custom-jwt\")\n```\n"}]},{"id":"update-user","title":"updateUser()","notes":"- In order to use the `updateUser()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email.\nTo only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](https://supabase.com/dashboard/project/_/auth/providers).\n","examples":[{"id":"update-the-email-for-an-authenticated-user","name":"Update the email for an authenticated user","description":"Sends a \"Confirm Email Change\" email to the new email address.","isSpotlight":false,"code":"```swift\ntry await supabase.auth.update(user: UserAttributes(email: \"new@email.com\"))\n```\n"},{"id":"update-the-password-for-an-authenticated-user","name":"Update the password for an authenticated user","isSpotlight":false,"code":"```swift\ntry await supabase.auth.update(user: UserAttributes(password: \"newPassw0rd?\"))\n```\n"},{"id":"update-the-users-metadata","name":"Update the user's metadata","isSpotlight":true,"code":"```swift\ntry await supabase.auth.update(\n  user: UserAttributes(\n    data: [\n      \"hello\": .string(\"world\")\n    ]\n  )\n)\n```\n"}]},{"id":"set-session","title":"setSession()","notes":"- `setSession()` takes in a refresh token and uses it to get a new session.\n- The refresh token can only be used once to obtain a new session.\n- [Refresh token rotation](/docs/reference/auth/config#refresh_token_rotation_enabled) is enabled by default on all projects to guard against replay attacks.\n- You can configure the [`REFRESH_TOKEN_REUSE_INTERVAL`](https://supabase.com/docs/reference/auth/config#refresh_token_reuse_interval) which provides a short window in which the same refresh token can be used multiple times in the event of concurrency or offline issues.\n","examples":[{"id":"refresh-the-session","name":"Refresh the session","description":"Sets the session data from refresh_token and returns current session or an error if the refresh_token is invalid.","isSpotlight":true,"code":"```swift\n  try await supabase.auth.setSession(accessToken: \"access_token\", refreshToken: \"refresh_token\")\n```\n"}]},{"id":"refresh-session","title":"refreshSession()","notes":"- This method will refresh the session whether the current one is expired or not.\n","examples":[{"id":"refresh-session-using-the-current-session","name":"Refresh session using the current session","isSpotlight":true,"code":"```swift\nlet session = try await supabase.auth.refreshSession()\n```\n"},{"id":"refresh-session-using-a-passed-in-session","name":"Refresh session using a refresh token","isSpotlight":false,"code":"```swift\nlet session = try await supabase.auth.refreshSession(refreshToken: \"custom-refresh-token\")\n```\n"}]},{"id":"on-auth-state-change","title":"authStateChanges","notes":"- Types of auth events: `INITIAL_SESSION`, `SIGNED_IN`, `SIGNED_OUT`, `TOKEN_REFRESHED`, `USER_UPDATED`, `PASSWORD_RECOVERY`, `MFA_CHALLENGE_VERIFIED`\n- The `INITIAL_SESSION` can be used to allow you to invoke the callback function when `authStateChanges` is first called.\n","examples":[{"id":"listen-to-auth-changes","name":"Listen to auth changes","isSpotlight":true,"code":"```swift\nfor await (event, session) in await supabase.auth.authStateChanges {\n  print(event, session)\n}\n```\n"},{"id":"list-to-a-specific-event","name":"Listen to a specific event","code":"```swift\nfor await (_, session) in await supabase.auth.authStateChanges.filter({ $0.event == .signedIn }) {\n  // handle signIn event.\n}\n```\n"}]},{"id":"exchange-code-for-session","title":"exchangeCodeForSession()","notes":"- Used when `flowType` is set to `pkce` in client options.\n","examples":[{"id":"exchange-auth-code","name":"Exchange Auth Code","isSpotlight":true,"code":"```swift\ntry await supabase.auth.exchangeCodeForSession(authCode: \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n```\n"}]},{"id":"auth-mfa-api","title":"Overview","notes":"This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n"},{"id":"mfa-enroll","title":"mfa.enroll()","notes":"- Currently, `totp` is the only supported `factorType`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/swift/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/swift/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challengeAndVerify()`](/docs/reference/swift/auth-mfa-challengeandverify).\n","examples":[{"id":"enroll-totp-factor","name":"Enroll a time-based, one-time password (TOTP) factor","isSpotlight":true,"code":"```swift\nlet response = try await supabase.auth.mfa.enroll(\n  params: MFAEnrollParams(\n    issuer: \"optional issuer\",\n    friendlyName: \"optional friendly name\"\n  )\n)\n\n// Use the id to create a challenge.\n// The challenge can be verified by entering the code generated from the authenticator app.\n// The code will be generated upon scanning the qrCode or entering the secret into the authenticator app.\nlet id = response.id\nlet type = response.type\nlet qrCode = response.totp?.qrCode\nlet secret = response.totp?.secret\nlet uri = response.totp?.uri\n```\n"}]},{"id":"mfa-challenge","title":"mfa.challenge()","notes":"- An [enrolled factor](/docs/reference/swift/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/swift/auth-mfa-verify).\n","examples":[{"id":"create-mfa-challenge","name":"Create a challenge for a factor","isSpotlight":true,"code":"```swift\nlet response = try await supabase.auth.mfa.challenge(\n  params: MFAChallengeParams(\n    factorId: \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"\n  )\n)\n```\n"}]},{"id":"mfa-verify","title":"mfa.verify()","notes":"- To verify a challenge, please [create a challenge](/docs/reference/swift/auth-mfa-challenge) first.\n","examples":[{"id":"verify-challenge","name":"Verify a challenge for a factor","isSpotlight":true,"code":"```swift\nlet session = try await supabase.auth.mfa.verify(\n  params: MFAVerifyParams(\n    factorId: \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n    challengeId: \"4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15\",\n    code: \"123456\"\n  )\n)\n```\n"}]},{"id":"mfa-challenge-and-verify","title":"mfa.challengeAndVerify()","notes":"- An [enrolled factor](/docs/swift/javascript/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/swift/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/swift/auth-mfa-verify) in a single step.\n","examples":[{"id":"challenge-and-verify","name":"Create and verify a challenge for a factor","isSpotlight":true,"code":"```swift\nlet session = try await supabase.auth.mfa.challengeAndVerify(\n  params: MFAChallengeAndVerifyParams(\n    factorId: \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n    code: \"123456\"\n  )\n)\n```\n"}]},{"id":"mfa-unenroll","title":"mfa.unenroll()","examples":[{"id":"unenroll-a-factor","name":"Unenroll a factor","isSpotlight":true,"code":"```swift\nlet response = try await supabase.auth.mfa.unenroll(\n  params: MFAUnenrollParams(\n    factorId: \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"\n  )\n)\n```\n"}]},{"id":"mfa-get-authenticator-assurance-level","title":"mfa.getAuthenticatorAssuranceLevel()","notes":"- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `nextLevel` field will return `aal2`, else, it will return `aal1`.\n","examples":[{"id":"get-aal","name":"Get the AAL details of a session","isSpotlight":true,"code":"```swift\nlet aal = try await supabase.auth.mfa.getAuthenticatorAssuranceLevel()\nlet currentLevel = aal.currentLevel\nlet nextLevel = aal.nextLevel\nlet currentAuthenticationMethods = aal.currentAuthenticationMethods\n```\n"}]},{"id":"mfa-list-factors","title":"mfa.listFactors()","examples":[{"id":"list-factors","name":"List all factors for a user","isSpotlight":true,"code":"```swift\nlet factors = try await supabase.auth.mfa.listFactors()\n```\n"}]},{"id":"select","title":"Fetch data: select()","notes":"- By default, Supabase projects will return a maximum of 1,000 rows. This setting can be changed in Project API Settings. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Modifiers](/docs/reference/swift/using-modifiers)\n- `select()` can be combined with [Filters](/docs/reference/swift/using-filters)\n- If using the Supabase hosted platform `apikey` is technically a reserved keyword, since the API gateway will pluck it out for authentication. [It should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n- The recommended solution for getting data is to use the value property which will return a decoded model. Create a `Codable` to easily decode your database responses.\n","examples":[{"id":"getting-your-data","name":"Getting your data","isSpotlight":true,"code":"```swift\nstruct Instrument: Decodable {\n  let id: Int\n  let name: String\n}\n\nlet instruments: [Instrument] = try await supabase.database\n  .from(\"instruments\")\n  .select()\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"violin\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"viola\"\n    },\n    {\n      \"id\": 3,\n      \"name\": \"cello\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n"},{"id":"selecting-specific-columns","name":"Selecting specific columns","code":"```swift\nstruct Instrument: Decodable {\n  let name: String\n}\n\nlet instruments: [Instrument] = try await supabase.database\n  .from(\"instruments\")\n  .select(\"name\")\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"violin\"\n    },\n    {\n      \"name\": \"viola\"\n    },\n    {\n      \"name\": \"cello\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n"},{"id":"query-foreign-tables","name":"Query foreign tables","description":"If your database has foreign key relationships, you can query related tables too.\n","code":"```swift\nstruct OrchestralSection: Decodable {\n  let name: String\n  let instruments: [Instrument]\n}\n\nstruct Instrument: Decodable {\n  let name: String\n}\n\nlet orchestralSections: [OrchestralSection] = try await supabase.database\n  .from(\"orchestral_sections\")\n  .select(\n    \"\"\"\n      name,\n      instruments (\n        name\n      )\n    \"\"\"\n  )\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, seciton_id, name)\nvalues\n  (1, 2, 'violin'),\n  (2, 1, 'flute');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"instruments\": [\n        {\n          \"name\": \"violin\"\n        }\n      ]\n    },\n    {\n      \"name\": \"woodwinds\",\n      \"instruments\": [\n        {\n          \"name\": \"flute\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n"},{"id":"query-foreign-tables-through-a-join-table","name":"Query foreign tables through a join table","code":"```swift\n  struct User: Decodable {\n    let name: String\n    let teams: [Team]\n  }\n\n  struct Team: Decodable {\n    let name: String\n  }\n\n  let users: [User] = try await supabase.database\n    .from(\"users\")\n    .select(\n      \"\"\"\n        name,\n        teams (\n          name\n        )\n      \"\"\"\n    )\n    .execute()\n    .value\n  ```\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 primary key,\n    name text\n  );\ncreate table\n  teams (\n    id int8 primary key,\n    name text\n  );\n-- join table\ncreate table\n  users_teams (\n    user_id int8 not null references users,\n    team_id int8 not null references teams,\n    -- both foreign keys must be part of a composite primary key\n    primary key (user_id, team_id)\n  );\n\ninsert into\n  users (id, name)\nvalues\n  (1, 'Kiran'),\n  (2, 'Evan');\ninsert into\n  teams (id, name)\nvalues\n  (1, 'Green'),\n  (2, 'Blue');\ninsert into\n  users_teams (user_id, team_id)\nvalues\n  (1, 1),\n  (1, 2),\n  (2, 2);\n```\n"},"response":"```json\n  {\n    \"data\": [\n      {\n        \"name\": \"Kiran\",\n        \"teams\": [\n          {\n            \"name\": \"Green\"\n          },\n          {\n            \"name\": \"Blue\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Evan\",\n        \"teams\": [\n          {\n            \"name\": \"Blue\"\n          }\n        ]\n      }\n    ],\n    \"status\": 200,\n    \"statusText\": \"OK\"\n  }\n  ```\n","description":"If you're in a situation where your tables are **NOT** directly\nrelated, but instead are joined by a _join table_, you can still use\nthe `select()` method to query the related data. The join table needs\nto have the foreign keys as part of its composite primary key.\n","hideCodeBlock":true},{"id":"query-the-same-foreign-table-multiple-times","name":"Query the same foreign table multiple times","code":"```swift\nstruct Message: Decodable {\n  let content: String\n  let from: User\n  let to: User\n}\n\nstruct User: Decodable {\n  let name: String\n}\n\nlet messages: [Message] = try await supabase.database\n  .from(\"messages\")\n  .select(\n    \"\"\"\n      content,\n      from:sender_id(name),\n      to:sended_id(name)\n    \"\"\"\n  )\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\n create table\n users (id int8 primary key, name text);\n\n create table\n   messages (\n     sender_id int8 not null references users,\n     receiver_id int8 not null references users,\n     content text\n   );\n\n insert into\n   users (id, name)\n values\n   (1, 'Kiran'),\n   (2, 'Evan');\n\n insert into\n   messages (sender_id, receiver_id, content)\n values\n   (1, 2, 'ðŸ‘‹');\n ```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"content\": \"ðŸ‘‹\",\n      \"from\": {\n        \"name\": \"Kiran\"\n      },\n      \"to\": {\n        \"name\": \"Evan\"\n      }\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"If you need to query the same foreign table twice, use the name of the\njoined column to identify which join to use. You can also give each\ncolumn an alias.\n","hideCodeBlock":true},{"id":"filtering-through-foreign-tables","name":"Filtering through foreign tables","code":"```swift\nstruct Instrument: Decodable {\n  let name: String\n  let orchestral_sections: [OrchestralSection]?\n}\n\nstruct OrchestralSection: Decodable {\n  let name: String\n}\n\nlet instruments: [Instrument] = try await supabase.database\n  .from(\"instruments\")\n  .select(\"name, orchestral_sections(*)\")\n  .eq(\"orchestral_sections.name\", value: \"percussion\")\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, book_id, name)\nvalues\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"flute\",\n      \"orchestral_sections\": null\n    },\n    {\n      \"name\": \"violin\",\n      \"orchestral_sections\": null\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"If the filter on a foreign table's column is not satisfied, the foreign\ntable returns `[]` or `null` but the parent table is not filtered out.\nIf you want to filter out the parent table rows, use the `!inner` hint\n","hideCodeBlock":true},{"id":"querying-foreign-table-with-count","name":"Querying foreign table with count","code":"```swift\nstruct OrchestralSection: Decodable {\n  let id: UUID\n  let name: String\n  let instruments: [Instrument]\n}\n\nstruct Instrument: Decodable {\n  let count: Int\n}\n\nlet orchestralSections: [OrchestralSection] = try await supabase.database\n  .from(\"orchestral_sections\")\n  .select(\"*, instruments(count)\")\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table orchestral_sections (\n  \"id\" \"uuid\" primary key default \"extensions\".\"uuid_generate_v4\"() not null,\n  \"name\" text\n);\n\ncreate table instruments (\n  \"id\" \"uuid\" primary key default \"extensions\".\"uuid_generate_v4\"() not null,\n  \"name\" text,\n  \"section_id\" \"uuid\" references public.orchestral_sections on delete cascade\n);\n\nwith section as (\n  insert into orchestral_sections (name)\n  values ('strings') returning id\n)\ninsert into instruments (name, section_id) values\n('violin', (select id from section)),\n('viola', (select id from section)),\n('cello', (select id from section)),\n('double bass', (select id from section));\n```\n"},"response":"```json\n[\n  {\n    \"id\": \"693694e7-d993-4360-a6d7-6294e325d9b6\",\n    \"name\": \"strings\",\n    \"cities\": [\n      {\n        \"count\": 4\n      }\n    ]\n  }\n]\n```\n","description":"You can get the number of rows in a related table by using the\n**count** property.\n","hideCodeBlock":true},{"id":"querying-with-count-option","name":"Querying with count option","code":"```swift\nlet count = try await supabase.database\n  .from(\"instruments\")\n  .select(\"*\", head: true, count: .exact)\n  .execute()\n  .count\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```json\n{\n  \"count\": 3,\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"You can get the number of rows by using the\n[count](/docs/reference/swift/select#parameters) option.\n","hideCodeBlock":true},{"id":"querying-json-data","name":"Querying JSON data","code":"```swift\nstruct User: Decodable {\n  let id: Int\n  let name: String\n  let city: String\n}\n\nlet users: [User] = try await supabase.database\n  .from(\"users\")\n  .select(\n    \"\"\"\n      id, name,\n      address->city\n    \"\"\"\n  )\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\ninsert into\n  users (id, name, address)\nvalues\n  (1, 'Frodo', '{\"city\":\"Hobbiton\"}');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Frodo\",\n      \"city\": \"Hobbiton\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"You can select and filter data inside of\n[JSON](/docs/guides/database/json) columns. Postgres offers some\n[operators](/docs/guides/database/json#query-the-jsonb-data) for\nquerying JSON data.\n","hideCodeBlock":true},{"id":"querying-foreign-table-with-inner-join","name":"Querying foreign table with inner join","code":"```swift\nstruct Instrument: Decodable {\n  let name: String\n  let sections: [Section]\n}\n\nstruct Section: Decodable {\n  let name: String\n}\n\nlet instruments: [Instrument] = try await supabase.database\n  .from(\"instruments\")\n  .select(\"name, sections!inner(name)\")\n  .eq(\"sections.name\", value: \"strings\")\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table sections (\n  \"id\" \"uuid\" primary key default \"extensions\".\"uuid_generate_v4\"() not null,\n  \"name\" text\n);\n\ncreate table instruments (\n  \"id\" \"uuid\" primary key default \"extensions\".\"uuid_generate_v4\"() not null,\n  \"name\" text,\n  \"section_id\" \"uuid\" references public.sections on delete cascade\n);\n\nwith section as (\n  insert into sections (name)\n  values ('strings') returning id\n)\ninsert into instruments (name, section_id) values\n('violin', (select id from section)),\n('viola', (select id from section)),\n('cello', (select id from section)),\n('double bass', (select id from section));\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"violin\",\n      \"sections\": {\"name\": \"strings\"}\n    },\n    {\n      \"name\": \"viola\",\n      \"sections\": {\"name\": \"strings\"}\n    },\n    {\n      \"name\": \"cello\",\n      \"sections\": {\"name\": \"strings\"}\n    },\n    {\n      \"name\": \"double bass\",\n      \"sections\": {\"name\": \"strings\"}\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"If you don't want to return the foreign table contents, you can leave the parenthesis empty.\nLike `.select('name, sections!inner()')`.\n","hideCodeBlock":true}]},{"id":"insert","title":"Create data: insert()","examples":[{"id":"create-a-record","name":"Create a record","code":"```swift\nstruct Instrument: Encodable {\n  let id: Int\n  let name: String\n}\n\nlet instrument = Instrument(id: 1, name: \"piano\")\n\ntry await supabase.database\n  .from(\"instruments\")\n  .insert(instrument)\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n```\n"},"response":"```json\n{\n  \"status\": 201,\n  \"statusText\": \"Created\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"create-a-record-and-return-it","name":"Create a record and return it","code":"```swift\nstruct Instrument: Codable {\n  let id: Int\n  let name: String\n}\n\nlet country: Country = try await supabase.database\n  .from(\"instruments\")\n  // use `returning: .representation` to return the created object.\n  .insert(Instrument(id: 1, name: \"piano\"), returning: .representation)\n  // specify you want a single value returned, otherwise it returns a list.\n  .single()\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"piano\"\n    }\n  ],\n  \"status\": 201,\n  \"statusText\": \"Created\"\n}\n```\n","hideCodeBlock":true},{"id":"bulk-create","name":"Bulk create","code":"```swift\nstruct Instrument: Encodable {\n  let id: Int\n  let name: String\n}\n\nlet instruments = [\n  Instrument(id: 1, name: \"piano\"),\n  Instrument(id: 1, name: \"guitar\"),\n]\n\ntry await supabase.database\n  .from(\"instruments\")\n  .insert(instruments)\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n```\n"},"response":"```json\n{\n  \"error\": {\n    \"code\": \"23505\",\n    \"details\": \"Key (id)=(1) already exists.\",\n    \"hint\": null,\n    \"message\": \"duplicate key value violates unique constraint \\\"instruments_pkey\\\"\"\n  },\n  \"status\": 409,\n  \"statusText\": \"Conflict\"\n}\n```\n","description":"A bulk create operation is handled in a single transaction.\nIf any of the inserts fail, none of the rows are inserted.\n","hideCodeBlock":true}]},{"id":"update","title":"Modify data: update()","notes":"- `update()` should always be combined with [Filters](/docs/reference/swift/using-filters) to target the item(s) you wish to update.\n","examples":[{"id":"updating-your-data","name":"Updating your data","code":"```swift\ntry await supabase.database\n  .from(\"instruments\")\n  .update([\"name\": \"piano\"])\n  .eq(\"id\", value: 1)\n  .execute()\n```\n","notes":"Not always you need to create a `Encodable`` struct to define\nthe object being updated, in this example we use a `[String: String]`\ntype directly, since it conforms to `Encodable``.\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'harpsichord');\n```\n"},"response":"```json\n{\n  \"status\": 204,\n  \"statusText\": \"No Content\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"update-a-record-and-return-it","name":"Update a record and return it","code":"```swift\nstruct Instrument: Decodable {\n  let id: Int\n  let name: String\n}\n\nlet instrument: Instrument = try await supabase.database\n  .from(\"instruments\")\n  .update([\"name\": \"piano\"], returning: .representation)\n  .eq(\"id\", value: 1)\n   // If you know this query should return a single object, append a `single()` modifier to it.\n  .single()\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'harpsichord');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"piano\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true},{"id":"updating-json-data","name":"Updating JSON data","code":"```swift\nstruct User: Decodable {\n  let id: Int\n  let name: String\n  let address: Address\n\n  struct Address: Codable {\n    let street: String\n    let postcode: String\n  }\n}\n\nstruct UpdateUser: Encodable {\n  let address: User.Address\n}\n\nlet users: [User] = try await supabase.database\n  .from(\"users\")\n  .update(\n    UpdateUser(\n      address: .init(\n        street: \"Melrose Place\",\n        postcode: \"90210\"\n      )\n    ),\n    returning: .representation\n  )\n  .eq(\"address->postcode\", value: \"90210\")\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\ninsert into\n  users (id, name, address)\nvalues\n  (1, 'Michael', '{ \"postcode\": \"90210\" }');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Michael\",\n      \"address\": {\n        \"street\": \"Melrose Place\",\n        \"postcode\": \"90210\"\n      }\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"Postgres offers some\n[operators](/docs/guides/database/json#query-the-jsonb-data) for\nworking with JSON data. Currently, it is only possible to update the entire JSON document.\n","hideCodeBlock":true}]},{"id":"upsert","title":"Upsert data: upsert()","notes":"- Primary keys must be included in `values` to use upsert.\n","examples":[{"id":"upsert-your-data","name":"Upsert your data","code":"```swift\nstruct Instrument: Encodable {\n  let id: Int\n  let name: String\n}\ntry await supabase.database\n  .from(\"instruments\")\n  .upsert(Instrument(id: 1, name: \"piano\"))\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'harpsichord');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"piano\"\n    }\n  ],\n  \"status\": 201,\n  \"statusText\": \"Created\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"bulk-upsert-your-data","name":"Bulk Upsert your data","code":"```swift\nstruct Instrument: Encodable {\n  let id: Int\n  let name: String\n}\ntry await supabase.database\n  .from(\"instruments\")\n  .upsert([\n    Instrument(id: 1, name: \"piano\"),\n    Instrument(id: 2, name: \"guitar\"),\n  ])\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'harpsichord');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"piano\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"guitar\"\n    }\n  ],\n  \"status\": 201,\n  \"statusText\": \"Created\"\n}\n```\n","hideCodeBlock":true},{"id":"upserting-into-tables-with-constraints","name":"Upserting into tables with constraints","code":"```swift\nstruct User: Encodable {\n  let id: Int\n  let handle: String\n  let displayName: String\n\n  enum CodingKeys: String, CodingKey {\n    case id\n    case handle\n    case displayName = \"display_name\"\n  }\n}\n\ntry await supabase.database\n  .from(\"users\")\n  .upsert(\n    User(id: 42, handle: \"saoirse\", displayName: \"Saoirse\"),\n    onConflict: \"handle\"\n  )\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 generated by default as identity primary key,\n    handle text not null unique,\n    display_name text\n  );\n\ninsert into\n  users (id, handle, display_name)\nvalues\n  (1, 'saoirse', null);\n```\n"},"response":"```json\n{\n  \"error\": {\n    \"code\": \"23505\",\n    \"details\": \"Key (handle)=(saoirse) already exists.\",\n    \"hint\": null,\n    \"message\": \"duplicate key value violates unique constraint \\\"users_handle_key\\\"\"\n  },\n  \"status\": 409,\n  \"statusText\": \"Conflict\"\n}\n```\n","description":"In the following query, `upsert()` implicitly uses the `id`\n(primary key) column to determine conflicts. If there is no existing\nrow with the same `id`, `upsert()` inserts a new row, which\nwill fail in this case as there is already a row with `handle` `\"saoirse\"`.\nUsing the `onConflict` option, you can instruct `upsert()` to use\nanother column with a unique constraint to determine conflicts.\n","hideCodeBlock":true}]},{"id":"delete","title":"Delete data: delete()","notes":"- `delete()` should always be combined with [filters](/docs/reference/swift/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have\n  [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only\n  rows visible through `SELECT` policies are deleted. Note that by default\n  no rows are visible, so you need at least one `SELECT`/`ALL` policy that\n  makes the rows visible.\n","examples":[{"id":"delete-records","name":"Delete records","code":"```swift\ntry await supabase.database\n  .from(\"instruments\")\n  .delete()\n  .eq(\"id\", value: 1)\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'tuba');\n```\n"},"response":"```json\n{\n  \"status\": 204,\n  \"statusText\": \"No Content\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"rpc","title":"Postgres functions: rpc()","description":"You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere.\nFunctions are useful when the logic rarely changesâ€”like for password resets and updates.\n\n```sql\ncreate or replace function hello_world() returns text as $$\n  select 'Hello world';\n$$ language sql;\n```\n","examples":[{"id":"call-a-postgres-function-without-arguments","name":"Call a Postgres function without arguments","code":"```swift\nlet value: String = try await supabase.database\n  .rpc(\"hello_world\")\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate function hello_world() returns text as $$\n  select 'Hello world';\n$$ language sql;\n```\n"},"response":"```json\n{\n  \"data\": \"Hello world\",\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"call-a-postgres-function-with-arguments","name":"Call a Postgres function with arguments","code":"```swift\nlet response: String = try await supabase.database\n  .rpc(\"echo\", params: [\"say\": \"ðŸ‘‹\"])\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate function echo(say text) returns text as $$\n  select say;\n$$ language sql;\n```\n"},"response":"```json\n  {\n    \"data\": \"ðŸ‘‹\",\n    \"status\": 200,\n    \"statusText\": \"OK\"\n  }\n  ```\n","hideCodeBlock":true},{"id":"bulk-processing","name":"Bulk processing","code":"```swift\nlet response: [Int] = try await supabase.database\n  .rpc(\"add_one_each\", params: [\"arr\": [1, 2, 3]])\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate function add_one_each(arr int[]) returns int[] as $$\n  select array_agg(n + 1) from unnest(arr) as n;\n$$ language sql;\n```\n"},"response":"```json\n{\n  \"data\": [\n    2,\n    3,\n    4\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"You can process large payloads by passing in an array as an argument.\n","hideCodeBlock":true},{"id":"call-a-postgres-function-with-filters","name":"Call a Postgres function with filters","code":"```swift\nstruct Instrument: Decodable {\n  let id: Int\n  let name: String\n}\n\nlet instrument: Instrument = await supabase.database\n  .rpc(\"list_stored_instruments\")\n  .eq(\"id\", value: 1)\n  .single()\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'piano'),\n  (2, 'guitar');\n\ncreate function list_stored_instruments() returns setof instruments as $$\n  select * from instruments;\n$$ language sql;\n```\n"},"response":"```json\n{\n  \"data\": {\n    \"id\": 1,\n    \"name\": \"piano\"\n  },\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"Postgres functions that return tables can also be combined with\n[Filters](/docs/reference/javascript/using-filters) and\n[Modifiers](/docs/reference/javascript/using-modifiers).\n","hideCodeBlock":true}]},{"id":"using-filters","title":"Using Filters","description":"Filters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nImplement `URLQueryRepresentable` protocol in your own types to be able to use them as filter value.\n\nSupported filtes are: `eq`, `neq`, `gt`, `gte`, `lt`, `lte`, `like`, `ilike`, `is`, `in`, `cs`, `cd`, `sl`, `sr`, `nxl`, `nxr`, `adj`, `ov`, `fts`, `plfts`, `phfts`, `wfts`. Check available operators in [PostgREST](https://postgrest.org/en/stable/references/api/tables_views.html#operators).\n","examples":[{"id":"applying-filters","name":"Applying Filters","description":"Filters must be applied after any of `select()`, `update()`, `upsert()`,\n`delete()`, and `rpc()` and before\n[modifiers](/docs/reference/swift/using-modifiers).\n","code":"```swift\ntry await supabase.database\n  .from(\"cities\")\n  .select(\"name, country_id\")\n  .eq(\"name\", value: \"The Shire\")    // Correct\n\ntry await supabase.database\n  .from(\"cities\")\n  .eq(\"name\", value: \"The Shire\")    // Incorrect\n  .select(\"name, country_id\")\n```\n"},{"id":"chaining-filters","name":"Chaining","description":"Filters can be chained together to produce advanced queries. For example,\nto query cities with population between 1,000 and 10,000:\n","code":"```swift\ntry await supabase.database\n  .from(\"cities\")\n  .select(\"name, country_id\")\n  .gte(\"population\", value: 1000)\n  .lt(\"population\", value: 10000)\n```\n"},{"id":"conditional-chaining","name":"Conditional Chaining","description":"Filters can be built up one step at a time and then executed.\n","code":"```swift\nlet filterByName: String? = nil\nlet filterPopLow: Int? = 1000\nlet filterPopHigh: Int? = 10000\n\nvar query = await supabase.database\n  .from(\"cities\")\n  .select(\"name, country_id\")\n\nif let filterByName {\n  query = query.eq(\"name\", value: filterByName)\n}\nif let filterPopLow {\n  query = query.gte(\"population\", value: filterPopLow)\n}\nif let filterPopHigh {\n  query = query.lt(\"population\", value: filterPopHigh)\n}\n\nstruct Response: Decodable {\n  // expected fields\n}\nlet result: Response = try await query.execute().value\n```\n"},{"id":"filter-by-value-within-json-column","name":"Filter by values within a JSON column","code":"```swift\ntry await supabase.database\n  .from(\"users\")\n  .select()\n  .eq(\"address->postcode\", value: 90210)\n```\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\ninsert into\n  users (id, name, address)\nvalues\n  (1, 'Michael', '{ \"postcode\": 90210 }'),\n  (2, 'Jane', null);\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Michael\",\n      \"address\": {\n        \"postcode\": 90210\n      }\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n"},{"id":"filter-foreign-tables","name":"Filter Foreign Tables","code":"```swift\ntry await supabase.database\n  .from(\"sections\")\n  .select(\n    \"\"\"\n      name,\n      instruments!inner (\n        name\n      )\n    \"\"\"\n  )\n  .eq(\"instruments.name\", value: \"violin\")\n```\n","data":{"sql":"```sql\ncreate table\n  sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references sections,\n    name text\n  );\n\ninsert into\n  sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, country_id, name)\nvalues\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n","response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"instruments\": [\n        {\n          \"name\": \"violin\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n"},"description":"You can filter on foreign tables in your `select()` query using dot\nnotation.\n"}]},{"id":"or","title":"or()","notes":"or() expects you to use the raw PostgREST syntax for the filter names and values.\n\n```swift\n.or(#\"id.in.(5,6,7), arraycol.cs.{\"a\",\"b\"}\"#)  // Use `()` for `in` filter, `{}` for array values and `cs` for `contains()`.\n.or(#\"id.in.(5,6,7), arraycol.cd.{\"a\",\"b\"}\"#)  // Use `cd` for `containedBy()`\n```\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase.database\n  .from(\"instruments\")\n  .select(\"name\")\n  .or(\"id.eq.2,name.eq.cello\")\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"viola\"\n    },\n    {\n      \"name\": \"cello\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"use-or-with-and","name":"Use `or` with `and`","code":"```swift\ntry await supabase.database\n  .from(\"instruments\")\n  .select(\"name\")\n  .or(\"id.gt.3,and(id.eq.1,name.eq.violin)\")\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"reponse":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"violin\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true}]},{"id":"not","title":"not()","description":"Finds all rows that don't satisfy the filter.\n","notes":"- `.not()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for the filter names and values.\n\n  ```swift\n  .not(\"name\", operator: .eq, value: \"violin\")\n  .not(\"arraycol\", operator: .cs, value: #\"{\"a\",\"b\"}\"#) // Use Postgres array {} for array column and 'cs' for contains.\n  .not(\"rangecol\", operator: .cs, value: \"(1,2]\") // Use Postgres range syntax for range column.\n  .not(\"id\", operator: .in, value: \"(6,7)\")  // Use Postgres list () and 'in' for in_ filter.\n  .not(\"id\", operator: .in, value: \"(\\(mylist.join(separator: \",\")))\")  // You can insert a Swift list array.\n  ```\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```swift\ntry await supabase.database\n  .from(\"instruments\")\n  .select()\n  .not(\"name\", operator: .is, value: \"\")\n  .execute()\n```\n"}]},{"id":"match","title":"match()","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase.database\n  .from(\"instruments\")\n  .select(\"name\")\n  .match([\"id\": 2, \"name\": \"viola\"])\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"viola\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"filter","title":"filter()","notes":"filter() expects you to use the raw PostgREST syntax for the filter values.\n\n```swift\n.filter(\"id\", operator: .in, value: \"(5,6,7)\")  // Use `()` for `in` filter\n.filter(\"arraycol\", operator: .cs, value: #\"{\"a\",\"b\"}\"#)  // Use `cs` for `contains()`, `{}` for array values\n```\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase.database\n  .from(\"instruments\")\n  .select()\n  .filter(\"name\", operator: .in, value: #\"(\"cello\",\"guzheng\")\"#)\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 3,\n      \"name\": \"cello\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-a-foreign-table","name":"On a foreign table","code":"```swift\ntry await supabase.database\n  .from(\"sections\")\n  .select(\n    \"\"\"\n      name,\n      instruments!inner (\n        name\n      )\n    \"\"\"\n  )\n  .filter(\"instruments.name\", operator: .eq, value: \"flute\")\n```\n","data":{"sql":"```sql\ncreate table\n  sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references sections,\n    name text\n  );\n\ninsert into\n  sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"woodwinds\",\n      \"cities\": [\n        {\n          \"name\": \"flute\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true}]},{"id":"using-modifiers","title":"Using Modifiers","description":"Filters work on the row levelâ€”they allow you to return rows that\nonly match certain conditions without changing the shape of the rows.\nModifiers are everything that don't fit that definitionâ€”allowing you to\nchange the format of the response (e.g. returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for\nqueries that return rows (e.g., `select()` or `rpc()` on a function that\nreturns a table response).\n"},{"id":"db-modifiers-select","title":"select()","description":"Perform a SELECT on the query result.\n","examples":[{"id":"with-upsert","name":"With `upsert()`","code":"```swift\n  try await database.database\n    .from(\"instruments\")\n    .upsert(InstrumentModel(id: 1, name: \"piano\"))\n    .select()\n    .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'harpsichord');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"piano\"\n    }\n  ],\n  \"status\": 201,\n  \"statusText\": \"Created\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"order","title":"order()","description":"Order the query result by column.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase.database\n  .from(\"instruments\")\n  .select(\"id, name\")\n  .order(\"id\", ascending: false)\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```swifton\n{\n  \"data\": [\n    {\n      \"id\": 3,\n      \"name\": \"cello\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"viola\"\n    },\n    {\n      \"id\": 1,\n      \"name\": \"violin\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-a-foreign-table","name":"On a foreign table","code":"```swift\n  try await supabase.database\n    .from(\"sections\")\n    .select(\n      \"\"\"\n        name,\n        instruments (\n          name\n        )\n      \"\"\"\n    )\n    .order(\"name\", ascending: false, foreignTable: \"instruments\")\n    .execute()\n  ```\n","data":{"sql":"```sql\ncreate table\n  sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references sections,\n    name text\n  );\n\ninsert into\n  sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 1, 'double bass'),\n  (2, 1, 'violin');\n```\n"},"response":"```swifton\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"cities\": [\n        {\n          \"name\": \"violin\"\n        },\n        {\n          \"name\": \"double bass\"\n        }\n      ]\n    },\n    {\n      \"name\": \"woodwinds\",\n      \"cities\": []\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"Ordering on foreign tables doesn't affect the ordering of\nthe parent table.\n","hideCodeBlock":true}]},{"id":"limit","title":"limit()","description":"Limit the query result by count.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase.database\n  .from(\"instruments\")\n  .select(\"id, name\")\n  .limit(1)\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"violin\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-a-foreign-table","name":"On a foreign table","code":"```swift\ntry await supabase.database\n  .from(\"orchestral_sections\")\n  .select(\n    \"\"\"\n    name,\n    instruments (\n      name\n    )\n    \"\"\"\n  )\n  .limit(1, foreignTable: \"instruments\")\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 1, 'harp'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"cities\": [\n        {\n          \"name\": \"harp\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true}]},{"id":"range","title":"range()","description":"Limit the query result by from and to inclusively.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase.database\n  .from(\"orchestral_sections\")\n  .select(\n    \"\"\"\n      name,\n      instruments (\n        name\n      )\n    \"\"\"\n  )\n  .range(from: 0, to: 1)\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```swifton\n{\n  \"data\": [\n    {\n      \"name\": \"violin\"\n    },\n    {\n      \"name\": \"viola\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"single","title":"single()","description":"By default PostgREST returns all JSON results in an array, even when there is only one item, use `single()` to return the first object unenclosed by an array.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase.database\n  .from(\"instruments\")\n  .select(\"name\")\n  .limit(1)\n  .single()\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```json\n{\n  \"data\": {\n    \"name\": \"violin\"\n  },\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"csv","title":"csv()","examples":[{"id":"return-data-as-csv","name":"Return data as CSV","code":"```swift\ntry await supabase\n  .from(\"instruments\")\n  .select()\n  .csv()\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```json\n{\n  \"data\": \"id,name\\n1,violin\\n2,viola\\n3,cello\",\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"By default, the data is returned in JSON format, but can also be returned as Comma Separated Values.\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"invoke","title":"invoke()","description":"Invoke a Supabase Edge Function.\n","notes":"- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `String`, and `Data`. If it doesn't match any of these types we assume the payload is `json`, serialize it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n","examples":[{"id":"invocation-with-decodable","name":"Invocation with `Decodable` response","isSpotlight":true,"code":"```swift\nstruct Response: Decodable {\n  // Expected response definition\n}\n\nlet response: Response = try await supabase.functions\n  .invoke(\n    \"hello\",\n    options: FunctionInvokeOptions(\n      body: [\"foo\": \"bar\"]\n    )\n  )\n```\n"},{"id":"invocation-with-custom-response","name":"Invocation with custom response","isSpotlight":true,"code":"```swift\nlet response = try await supabase.functions\n  .invoke(\n    \"hello\",\n    options: FunctionInvokeOptions(\n      body: [\"foo\": \"bar\"]\n    ),\n    decode: { data, response in\n      String(data: data, encoding: .utf8)\n    }\n  )\n\nprint(type(of: response)) // String?\n```\n"},{"id":"error-handling","name":"Error handling","description":"A `FunctionsError` error is returned if your function throws an error, `FunctionsRelayError` if the Supabase Relay has an error processing your function and `FunctionsFetchError` if there is a network error in calling your function.\n  - `httpError(code: Int, data: Data)` in case a non-2xx status code is returned by the edge function.\n  - `relayError` in case the Supabase Relay has an error processing your function.\n","isSpotlight":true,"code":"```swift\n\ndo {\n  let response = try await supabase.functions\n    .invoke(\n      \"hello\",\n      options: FunctionInvokeOptions(\n        body: [\"foo\": \"bar\"]\n      )\n    )\n} catch FunctionsError.httpError(let code, let data) {\n  print(\"Function returned code \\(code) with response \\(String(data: data, encoding: .utf8) ?? \"\")\")\n} catch FunctionsError.relayError {\n  print(\"Relay error\")\n} catch {\n  print(\"Other error: \\(error.localizedDescription)\")\n}\n```\n"},{"id":"passing-custom-headers","name":"Passing custom headers","description":"You can pass custom headers to your function. Note: supabase-js automatically passes the `Authorization` header with the signed in user's JWT.\n","isSpotlight":true,"code":"```swift\nlet response = try await supabase.functions\n  .invoke(\n    \"hello\",\n    options: FunctionInvokeOptions(\n      headers: [\n        \"my-custom-header\": \"my-custom-header-value\"\n      ]\n    )\n  )\n```\n"},{"id":"calling-with-delete-verb","name":"Calling with DELETE HTTP verb","description":"You can also set the HTTP verb to `DELETE` when calling your Edge Function.\n","isSpotlight":true,"code":"```swift\nlet response = try await supabase.functions\n  .invoke(\n    \"hello\",\n    options: FunctionInvokeOptions(\n      method: .delete,\n      headers: [\n        \"my-custom-header\": \"my-custom-header-value\"\n      ],\n      body: [\"foo\": \"bar\"]\n    )\n  )\n```\n"},{"id":"calling-with-get-verb","name":"Calling with GET HTTP verb","description":"You can also set the HTTP verb to `GET` when calling your Edge Function.\n","isSpotlight":true,"code":"```swift\nlet response = try await supabase.functions\n  .invoke(\n    \"hello\",\n    options: FunctionInvokeOptions(\n      method: .get,\n      headers: [\n        \"my-custom-header\": \"my-custom-header-value\"\n      ]\n    )\n  )\n```\n"}]},{"id":"subscribe","title":"on().subscribe()","notes":"- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n","examples":[{"id":"listen-to-broadcast","name":"Listen to broadcast messages","isSpotlight":true,"code":"```swift\nlet channel = supabase\n  .realtime\n  .channel(\"room1\")\n\nchannel\n  .on(\"broadcast\", filter: ChannelFilter(event: \"cursor-pos\")) { message in\n    print(\"Cursor position received!\", message.payload)\n  }\n  .subscribe { status, error in\n    if status == .subscribed {\n      Task {\n        await channel.send(\n          type: .broadcast,\n          event: \"cursor-pos\",\n          payload: [\"x\": Double.random(in: 0...1), \"y\": Double.random(in: 0...1)]\n        )\n      }\n    }\n  }\n```\n"},{"id":"listen-to-presence-sync","name":"Listen to presence sync","isSpotlight":true,"code":"```swift\nlet channel = supabase.realtime.channel(\"room1\")\nchannel\n  .on(\"presence\", filter: ChannelFilter(event: \"sync\")) { _ in\n    print(\"Synced presence state: \", channel.presenceState())\n  }\n  .subscribe { status, error in\n    if status == .subscribed {\n      Task {\n        await channel.track([\"online_at\": Date().ISO8601Format()])\n      }\n    }\n  }\n```\n"},{"id":"listen-to-presence-join","name":"Listen to presence join","isSpotlight":true,"code":"```swift\nlet channel = supabase.realtime.channel(\"room1\")\nchannel\n  .on(\"presence\", filter: ChannelFilter(event: \"join\")) { message in\n    print(\"Newly joined presences: \", message.payload)\n  }\n  .subscribe { status, error in\n    if status == .subscribed {\n      Task {\n        await channel.track([\"online_at\": Date().ISO8601Format()])\n      }\n    }\n  }\n```\n"},{"id":"listen-to-presence-leave","name":"Listen to presence leave","isSpotlight":true,"code":"```swift\nlet channel = supabase.realtime.channel(\"room1\")\nchannel\n  .on(\"presence\", filter: ChannelFilter(event: \"leave\")) { message in\n    print(\"Newly left presences: \", message.payload)\n  }\n  .subscribe { status, error in\n    if status == .subscribed {\n      Task {\n        await channel.track([\"online_at\": Date().ISO8601Format()])\n        await channel.untrack()\n      }\n    }\n  }\n```\n"},{"id":"listen-to-all-database-changes","name":"Listen to all database changes","isSpotlight":true,"code":"```swift\nsupabase.realtime\n  .channel(\"room1\")\n  .on(\"postgres_changes\", filter: ChannelFilter(event: \"*\", schema: \"*\")) { message in\n    print(\"Change received!\", message.payload)\n  }\n  .subscribe()\n```\n"},{"id":"listen-to-a-specific-table","name":"Listen to a specific table","code":"```swift\nsupabase.realtime\n  .channel(\"room1\")\n  .on(\"postgres_changes\", filter: ChannelFilter(event: \"*\", schema: \"public\", table: \"countries\")) { message in\n    print(\"Change received!\", message.payload)\n  }\n  .subscribe()\n```\n"},{"id":"listen-to-inserts","name":"Listen to inserts","code":"```swift\nsupabase.realtime\n  .channel(\"room1\")\n  .on(\"postgres_changes\", filter: ChannelFilter(event: \"INSERT\", schema: \"public\", table: \"countries\")) { message in\n    print(\"Change received!\", message.payload)\n  }\n  .subscribe()\n```\n"},{"id":"listen-to-updates","name":"Listen to updates","description":"By default, Supabase will send only the updated record. If you want to receive the previous values as well you can\nenable full replication for the table you are listening to:\n\n```sql\nalter table \"your_table\" replica identity full;\n```\n","code":"```swift\nsupabase.realtime\n  .channel(\"room1\")\n  .on(\"postgres_changes\", filter: ChannelFilter(event: \"UPDATE\", schema: \"public\", table: \"countries\")) { message in\n    print(\"Change received!\", message.payload)\n  }\n  .subscribe()\n```\n"},{"id":"listen-to-deletes","name":"Listen to deletes","description":"By default, Supabase does not send deleted records. If you want to receive the deleted record you can\nenable full replication for the table you are listening too:\n\n```sql\nalter table \"your_table\" replica identity full;\n```\n","code":"```swift\nsupabase.realtime\n  .channel(\"room1\")\n  .on(\"postgres_changes\", filter: ChannelFilter(event: \"DELETE\", schema: \"public\", table: \"countries\")) { message in\n    print(\"Change received!\", message.payload)\n  }\n  .subscribe()\n```\n"},{"id":"listen-to-multiple-events","name":"Listen to multiple events","description":"You can chain listeners if you want to listen to multiple events for each table.","code":"```swift\nsupabase.realtime\n  .channel(\"room1\")\n  .on(\"postgres_changes\", filter: ChannelFilter(event: \"INSERT\", schema: \"public\", table: \"countries\"), handler: handleRecordInserted)\n  .on(\"postgres_changes\", filter: ChannelFilter(event: \"DELETE\", schema: \"public\", table: \"countries\"), handler: handleRecordDeleted)\n  .subscribe()\n\nfunc handleRecordInserted(_ message: Message) {\n  // handle message\n}\n\nfunc handleRecordDeleted(_ message: Message) {\n  // handle message\n}\n```\n"},{"id":"listening-to-row-level-changes","name":"Listen to row level changes","description":"You can listen to individual rows using the format `{table}:{col}=eq.{val}` - where `{col}` is the column name, and `{val}` is the value which you want to match.","notes":"- ``eq`` filter works with all database types as under the hood, it's casting both the filter value and the database value to the correct type and then comparing them.\n","code":"```swift\nsupabase.realtime\n  .channel(\"room1\")\n  .on(\n    \"postgres_changes\",\n    filter: ChannelFilter(\n      event: \"INSERT\",\n      schema: \"public\",\n      table: \"countries\",\n      filter: \"id=eq.200\"\n    ),\n    handler: handleRecordInserted\n  )\n  .subscribe()\n\n  func handleRecordInserted(_ message: Message) {\n    // handle message\n  }\n```\n"}]},{"id":"broadcast-message","title":"broadcastMessage()","description":"Broadcast a message to all connected clients to a channel.\n","notes":"- When using REST you don't need to subscribe to the channel\n","examples":[{"id":"send-a-message","name":"Send a message via websocket","isSpotlight":true,"code":"```swift\nsupabase.realtime\n  .channel(\"room1\")\n  .subscribe { status, error in\n    if status == .subscribed {\n      Task {\n        await channel.send(\n          type: \"broadcast\",\n          event: \"cursor-pos\",\n          payload: [\"x\": Double.random(in: 0...1), \"y\": Double.random(in: 0...1)]\n        )\n      }\n    }\n  }\n```\n"},{"id":"send-a-message-via-rest","name":"Send a message via REST","isSpotlight":true,"code":"```swift\nawait supabase.realtime\n  .channel(\"room1\")\n  .send(\n    type: \"broadcast\",\n    event: \"cursor-pos\",\n    payload: [\"x\": Double.random(in: 0...1), \"y\": Double.random(in: 0...1)]\n  )\n```\n"}]},{"id":"get-channels","title":"channels","examples":[{"id":"get-all-channels","name":"Get all channels","isSpotlight":true,"code":"```swift\nlet channels = supabase.realtime.channels\n```\n"}]},{"id":"remove-channel","title":"removeChannel()","notes":"- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n","examples":[{"id":"removes-a-channel","name":"Removes a channel","isSpotlight":true,"code":"```swift\nsupabase.realtime.remove(myChannel)\n```\n"}]},{"id":"remove-all-channels","title":"removeAllChannels()","notes":"- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n","examples":[{"id":"remove-all-channels","name":"Remove all channels","isSpotlight":true,"code":"```swift\nsupabase.realtime.removeAllChannels()\n```\n"}]},{"id":"list-buckets","title":"listBuckets()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"list-buckets","name":"List buckets","isSpotlight":true,"code":"```swift\ntry await supabase.storage\n  .listBuckets()\n```\n"}]},{"id":"get-bucket","title":"getBucket()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"get-bucket","name":"Get bucket","isSpotlight":true,"code":"```swift\nlet bucket = try await supabase.storage\n  .getBucket(\"avatars\")\n```\n"}]},{"id":"create-bucket","title":"createBucket()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"create-bucket","name":"Create bucket","isSpotlight":true,"code":"```swift\ntry await supabase.storage\n  .createBucket(\n    \"avatars\",\n    options: BucketOptions(\n      public: false,\n      allowedMimeTypes: [\"image/png\"],\n      fileSizeLimit: 1024\n    )\n  )\n```\n"}]},{"id":"empty-bucket","title":"emptyBucket()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"empty-bucket","name":"Empty bucket","isSpotlight":true,"code":"```swift\ntry await supabase.storage\n  .emptyBucket(\"avatars\")\n```\n"}]},{"id":"update-bucket","title":"updateBucket()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `update`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"update-bucket","name":"Update bucket","isSpotlight":true,"code":"```swift\ntry await supabase.storage\n  .updateBucket(\n    \"avatars\",\n    options: BucketOptions(\n      public: false,\n      fileSizeLimit: 1024,\n      allowedMimeTypes: [\"image/png\"]\n    )\n  )\n```\n"}]},{"id":"delete-bucket","title":"deleteBucket()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"delete-bucket","name":"Delete bucket","isSpotlight":true,"code":"```swift\ntry await supabase.storage\n  .deleteBucket(\"avatars\")\n```\n"}]},{"id":"from-upload","title":"from.upload()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: only `insert` when you are uploading new files and `select`, `insert` and `update` when you are upserting files\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"upload-file","name":"Upload file","isSpotlight":true,"code":"```swift\nlet fileName = \"avatar1.png\"\n\ntry await supabase.storage\n  .from(\"avatars\")\n  .upload(\n    path: \"public/\\(fileName)\",\n    file: fileData,\n    options: FileOptions(\n      cacheControl: \"3600\",\n      contentType: \"image/png\",\n      upsert: false\n    )\n  )\n```\n"}]},{"id":"from-update","title":"from.update()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"update-file","name":"Update file","isSpotlight":true,"code":"```swift\nlet fileName = \"avatar1.png\"\n\ntry await supabase.storage\n  .from(\"avatars\")\n  .update(\n    path: \"public/\\(fileName)\",\n    file: fileData,\n    options: FileOptions(\n      cacheControl: \"3600\",\n      contentType: \"image/png\",\n      upsert: true\n    )\n  )\n```\n"}]},{"id":"from-move","title":"from.move()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"move-file","name":"Move file","isSpotlight":true,"code":"```swift\ntry await supabase\n  .storage\n  .from(\"avatars\")\n  .move(from: \"public/avatar1.png\", to: \"private/avatar2.png\")\n```\n"}]},{"id":"from-copy","title":"from.copy()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"copy-file","name":"Copy file","isSpotlight":true,"code":"```swift\ntry await supabase\n  .storage\n  .from(\"avatars\")\n  .copy(from: \"public/avatar1.png\", to: \"private/avatar2.png\")\n```\n"}]},{"id":"from-create-signed-url","title":"from.createSignedUrl()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"create-signed-url","name":"Create Signed URL","isSpotlight":true,"code":"```swift\nlet signedURL = try await supabase.storage\n  .from(\"avatars\")\n  .createSignedURL(path: \"folder/avatar1.png\", expiresIn: 60)\n```\n"},{"id":"create-signed-url-with-transformations","name":"Create a signed URL for an asset with transformations","isSpotlight":true,"code":"```swift\nlet signedURL = try await supabase.storage\n  .from(\"avatars\")\n  .createSignedURL(\n    path: \"folder/avatar1.png\",\n    expiresIn: 60,\n    transform: TransformOptions(\n      width: 100,\n      height: 100\n    )\n  )\n```\n"},{"id":"create-signed-url-with-download","name":"Create a signed URL which triggers the download of the asset","isSpotlight":true,"code":"```swift\nlet signedURL = try await supabase.storage\n  .from(\"avatars\")\n  .createSignedURL(\n    path: \"folder/avatar1.png\", expiresIn: 60,\n    download: true\n  )\n```\n","note":"You can also sepcify a `String` in the `download` parameter to define the file name for the downloaded asset.\n"}]},{"id":"from-get-public-url","title":"from.getPublicUrl()","notes":"- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/javascript/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"returns-the-url-for-an-asset-in-a-public-bucket","name":"Returns the URL for an asset in a public bucket","isSpotlight":true,"code":"```swift\nlet publicURL = try supabase.storage\n  .from(\"public-bucket\")\n  .getPublicURL(path: \"folder/avatar1.png\")\n```\n"},{"id":"transform-asset-in-public-bucket","name":"Returns the URL for an asset in a public bucket with transformations","isSpotlight":true,"code":"```swift\nlet publicURL = try supabase.storage\n  .from(\"public-bucket\")\n  .getPublicURL(\n    path: \"folder/avatar1.png\",\n    options: TransformOptions(\n      width: 100,\n      height: 100\n    )\n  )\n```\n"},{"id":"download-asset-in-public-bucket","name":"Returns the URL which triggers the download of an asset in a public bucket","isSpotlight":true,"code":"```swift\nlet publicURL = try supabase.storage\n  .from(\"public-bucket\")\n  .getPublicURL(\n    path: \"folder/avatar1.png\",\n    download: true\n  )\n```\n","note":"You can also sepcify a `String` in the `download` parameter to define the file name for the downloaded asset.\n"}]},{"id":"from-download","title":"from.download()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"download-file","name":"Download file","isSpotlight":true,"code":"```swift\nlet data = try await supabase.storage\n  .from(\"avatars\")\n  .download(path: \"folder/avatar1.png\")\n```\n"},{"id":"download-file-with-transformations","name":"Download file with transformations","isSpotlight":true,"code":"```swift\nlet data = try await supabase.storage\n  .from(\"avatars\")\n  .download(\n    path: \"folder/avatar1.png\",\n    options: TransformOptions(\n      width: 100,\n      height: 100,\n      quality: 80\n    )\n  )\n```\n"}]},{"id":"from-remove","title":"from.remove()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"delete-file","name":"Delete file","isSpotlight":true,"code":"```swift\ntry await supabase.storage\n  .from(\"avatars\")\n  .remove(paths: [\"folder/avatar1.png\"])\n```\n"}]},{"id":"from-list","title":"from.list()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"list-files-in-a-bucket","name":"List files in a bucket","isSpotlight":true,"code":"```swift\nlet files = try await supabase.storage\n  .from(\"avatars\")\n  .list(\n    path: \"folder\",\n    options: SearchOptions(\n      limit: 100,\n      offset: 0,\n      sortBy: SortBy(column: \"name\", order: \"asc\")\n    )\n  )\n```\n"},{"id":"search-files-in-a-bucket","name":"Search files in a bucket","code":"```swift\nlet files = try await supabase.storage\n  .from(\"avatars\")\n  .list(\n    path: \"folder\",\n    options: SearchOptions(\n      limit: 100,\n      offset: 0,\n      sortBy: SortBy(column: \"name\", order: \"asc\"),\n      search: \"jon\"\n    )\n  )\n```\n"}]}]