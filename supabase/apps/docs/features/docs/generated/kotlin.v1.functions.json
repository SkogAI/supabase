[{"id":"initializing","title":"Initializing","description":"### Create Supabase Client\n\nIndependently of which Supabase module you are using, you will need to initialize the main client first and install the module.\n\nTo create a new client, you can use the `createSupabaseClient` function.\n\nWhen installing a module, you can pass a block to configure it.\n\n### OAuth and OTP link verification\n\n[supabase-kt](https://github.com/supabase-community/supabase-kt) provides several platform implementations for OAuth and OTP link verification. \\\n**On JVM**, it uses a HTTP Callback Server to receive the session data from a successful OAuth login.\n\n*Note: OTP link verification such as sign ups are not supported on JVM. You may have to send a verification token rather than a url in your E-Mail. To send the token, rather than a redirect url, you have to change `{{ .ConfirmationURL }}` in your sign up email to `{{ .Token }}`*\n\n**On Android, IOS & macOS**, it uses deeplinks. Refer to the guide below on how to setup deeplinks. Alternatively you could use Native Google Auth or a WebView for OAuth. Refer to our [demo](https://github.com/supabase-community/supabase-kt/tree/master/demos/android-login) to learn more.\n**On JS**, it uses the website origin as the callback url. Session importing gets handled automatically.\n**Windows, tvOS, watchOS & Linux** currently have no default implementation. Feel free to create a PR.\n\nYou always make your own implementation and use `gotrue.parseSessionFromFragment(fragment)` or `gotrue.parseSessionFromUrl(url)` to let [supabase-kt](https://github.com/supabase-community/supabase-kt) handle the parsing after receiving a callback.\nThen you can simply use `gotrue.importSession(session)`.\n\n### Configure deeplink callbacks for Authentication\n\nDeeplinks are supported on Android, IOS and macOS.\n1. **Setup a deeplink for you app** \\\nOn Android you may setup a [deeplink](https://developer.android.com/training/app-links/deep-linking) in your Android manifest. \\\nOn IOS & macOS you may setup a [url scheme](https://developer.apple.com/documentation/xcode/defining-a-custom-url-scheme-for-your-app).\n2. **Add your deeplink to the [redirect URLs](https://supabase.com/dashboard/project/_/auth/url-configuration)** \\\n**Pattern**: scheme://host\n3. **Configure the GoTrue plugin**\nYou have to set the `host` and the `scheme` in the GoTrue config:\n    ```kotlin\n    install(GoTrue) {\n       host = \"deeplink host\" // this can be anything, eg. your package name or app/company url (not your supabase url)\n       scheme = \"deeplink scheme\"\n\n       //Android only, you can also change that OAuth/SSO logins open in a custom tab, rather than an external browser:\n       defaultExternalAuthAction = ExternalAuthAction.CUSTOM_TABS //defaults to EXTERNAL_BROWSER\n    }\n    ```\n4. **Call platform specific function on startup** \\\nOn Android: `supabase.handleDeeplinks(intent)` \\\nOn IOS/macOS: `supabase.handleDeeplinks(url)`\n\nThen you can just login using OAuth:\n```kotlin\nsupabase.gotrue.loginWith(Google)\n```\nOr open OTP links directly in your app.\n\n### PKCE Authentication flow\nsupabase-kt supports the [PKCE authentication flow](https://supabase.com/blog/supabase-auth-sso-pkce).\nTo use it, you just have to change the `flowType` in the GoTrue configuration:\n```kotlin\ninstall(GoTrue) {\n  flowType = FlowType.PKCE\n}\n```\nThat's it! If you already implemented deeplinks to handle OTPs and OAuth you don't have to change anything!\n","examples":[{"id":"initialize-client","name":"Initialize Client","code":"```kotlin\nval supabase = createSupabaseClient(\n    supabaseUrl = \"https://xyzcompany.supabase.co\",\n    supabaseKey = \"publishable-or-anon-key\"\n) {\n    install(GoTrue)\n    install(Postgrest)\n    //install other modules\n}\n```\n"},{"id":"configure-gotrue","name":"Configure GoTrue module","code":"```kotlin\nval supabase = createSupabaseClient(\n    supabaseUrl = \"https://xyzcompany.supabase.co\",\n    supabaseKey = \"publishable-or-anon-key\"\n) {\n    install(GoTrue) {\n        alwaysAutoRefresh = false // default: true\n        autoLoadFromStorage = false // default: true\n        //and more...\n    }\n}\n```\n","description":"**Common:**\n\n`alwaysAutoRefresh` - whether the GoTrue plugin should always auto refresh expired sessions automatically. Default: `true`\n\n`autoLoadFromStorage` - whether the GoTrue plugin should automatically load the session from the session manager. Default: `true`\n\n`autoSaveToStorage` - whether the GoTrue plugin should automatically save the session to the session manager. Default: `true`\n\n`flowType` - Which authentication flow to use. Currently available: FlowType.PKCE and FlowType.IMPLICIT. Default: `FlowType.IMPLICIT`\n\n`codeVerifierCache` - Interface for saving and loading codes for the PKCE authentication flow. Default: `SettingsCodeVerifierCache`\n\n`customUrl` - Custom url for the GoTrue API. Can be safely ignored when using Supabase. Default: `null`\n\n`jwtToken` - Plugin specific JWT Token. Can be ignored when using the GoTrue plugin. Default: `null`\n\n`retryDelay` - Duration after which the GoTrue plugin should retry a failed session refresh. Default: `10.seconds`\n\n`sessionManager` - Interface for saving and loading the user session. Default: `SettingsSessionManager`\n\n**Android & IOS:**\n\n`scheme` - The scheme for the redirect url, when using deep linking. Default: `supabase`\n\n`host` - The host for the redirect url, when using deep linking. Default: `login`\n\n**Android:**\n\n`enableLifecycleCallbacks` - Whether to stop auto-refresh on focus loss, and resume it on focus again. Default: `true`\n\n**Desktop:**\n\n`httpPort`: The port the web server is running on, when logging in with OAuth. Default: `0` (random port).\n\n`timeout`: The timeout for the web server, when logging in with OAuth. Default: `1.minutes`.\n\n`htmlTitle`: The title of the redirect page, when logging in with OAuth. Default: `\"Supabase Auth\"`.\n\n`htmlText`: The text of the redirect page, when logging in with OAuth. Default: `\"Logged in. You may continue in your app.\"`.\n\n`htmlIconUrl`: The icon of the redirect page, when logging in with OAuth. Default: `\"https://supabase.com/brand-assets/supabase-logo-icon.png\"`.\n"},{"id":"configure-postgrest","name":"Configure PostgREST module","code":"```kotlin\nval supabase = createSupabaseClient(\n    supabaseUrl = \"https://xyzcompany.supabase.co\",\n    supabaseKey = \"publishable-or-anon-key\"\n) {\n    install(Postgrest) {\n        defaultSchema = \"schema\" // default: \"public\"\n        propertyConversionMethod = PropertyConversionMethod.SERIAL_NAME // default: PropertyConversionMethod.CAMEL_CASE_TO_SNAKE_CASE\n    }\n}\n```\n","description":"`propertyConversionMethod` - The method to use to convert the property names to the column names when applying filters & using the update method. Default: `PropertyConversionMethod.CAMEL_CASE_TO_SNAKE_CASE`\n\n`defaultSchema` - The default schema to use for database requests. Default: `public`\n\n`customUrl` - Custom url for the PostgREST API. Can be safely ignored when using Supabase. Default: `null`\n\n`jwtToken` - Plugin specific JWT Token. Can be ignored when using the GoTrue plugin. Default: `null`\n"},{"id":"configure-storage","name":"Configure Storage module","code":"```kotlin\nval supabase = createSupabaseClient(\n    supabaseUrl = \"https://xyzcompany.supabase.co\",\n    supabaseKey = \"publishable-or-anon-key\"\n) {\n    install(Storage) {\n        transferTimeout = 90.seconds // Default: 120 seconds\n    }\n}\n```\n","description":"`transferTimeout` - the timeout for uploading and downloading files. Default: `120.seconds`\n\n`resumable.cache` - Interface for storing resumable upload urls. Default: `SettingsResumableCache`\n\n`resumable.defaultChunkSize` - The default chunk size for resumable uploads. Supabase currently only supports a chunk size of 6MB, so be careful when changing this value. Default: `6MB`\n\n`resumable.retryTimeout` - the timeout for retrying resumable uploads when uploading a chunk fails. Default: `5.seconds`\n\n`resumable.onlyUpdateStateAfterChunk` - whether the upload state should only be updated after a chunk was uploaded successfully or also when the chunk is currently being uploaded. Default: `false`\n\n`customUrl` - Custom url for the Storage API. Can be safely ignored when using Supabase. Default: `null`\n\n`jwtToken` - Plugin specific JWT Token. Can be ignored when using the GoTrue plugin. Default: `null`\n"},{"id":"configure-realtime","name":"Configure Realtime module","code":"```kotlin\nval supabase = createSupabaseClient(\n    supabaseUrl = \"https://xyzcompany.supabase.co\",\n    supabaseKey = \"publishable-or-anon-key\"\n) {\n    install(Realtime) {\n        reconnectDelay = 5.seconds // Default: 7 seconds\n    }\n}\n```\n","description":"`reconnectDelay` - The delay between reconnect attempts. Default: `7.seconds`\n\n`heartbeatInterval` - The interval between heartbeat messages. Default: `15.seconds`\n\n`disconnectOnSessionLoss` - Whether to disconnect from the websocket when the session is lost. Default: `true`\n\n`secure` - Whether to use wss or ws. Defaults to [SupabaseClient.useHTTPS] when null\n\n`websocketConfig` - Custom Ktor websocket config\n\n`customUrl` - Custom url for the Realtime websocket. Can be safely ignored when using Supabase. Default: `null`\n\n`jwtToken` - Plugin specific JWT Token. Can be ignored when using the GoTrue plugin. Default: `null`\n"},{"id":"configure-functions","name":"Configure Functions plugin","code":"```kotlin\nval supabase = createSupabaseClient(\n    supabaseUrl = \"https://xyzcompany.supabase.co\",\n    supabaseKey = \"publishable-or-anon-key\"\n) {\n    install(Functions) {\n        //no custom settings\n    }\n}\n```\n","description":"`customUrl` - Custom url for the Functions API. Can be safely ignored when using Supabase. Default: `null`\n\n`jwtToken` - Plugin specific JWT Token. Can be ignored when using the GoTrue plugin. Default: `null`\n"},{"id":"configure-graphql","name":"Configure GraphQL plugin","code":"```kotlin\nval supabase = createSupabaseClient(\n    supabaseUrl = \"https://xyzcompany.supabase.co\",\n    supabaseKey = \"publishable-or-anon-key\"\n) {\n    install(GraphQL) {\n        apolloConfiguration {\n          //custom configuration\n        }\n    }\n}\n```\n","description":"`apolloConfiguration` - Custom configuration for the ApolloClient\n\n`customUrl` - Custom url for the GraphQL API. Can be safely ignored when using Supabase. Default: `null`\n\n`jwtToken` - Plugin specific JWT Token. Can be ignored when using the GoTrue plugin. Default: `null`\n\n**You can access the created ApolloClient via `supabase.graphql.apolloClient`, which automatically adds the required headers depending on your session.**\n"}]},{"id":"select","title":"Fetch data: select()","notes":"Perform a SELECT query on the table or view.\n- When calling a `decode` method, you have to provide a [serializable class](/docs/reference/kotlin/installing#serialization) as the type parameter.\n- You can provide a `Columns` object to select specific columns.\n- You can provide a [filter](/docs/reference/kotlin/using-filters) block to filter the results\n","examples":[{"id":"getting-your-data","name":"Getting your data","isSpotlight":true,"code":"```kotlin\nval city = supabase.postgrest[\"cities\"].select().decodeSingle<City>()\n```\n"},{"id":"selecting-specific-columns","name":"Selecting specific columns","description":"You can select specific fields from your tables.","code":"```kotlin\nval city = supabase.postgrest[\"cities\"].select(columns = Columns.list(\"id, name\")).decodeSingle<City>()\n```\n"},{"id":"query-foreign-tables","name":"Query foreign tables","description":"If your database has foreign key relationships, you can query related tables too.","code":"```kotlin\nval country = supabase.postgrest[\"countries\"]\n            .select(\n                columns = Columns.raw(\n                                \"\"\"\n                                id,\n                                name,\n                                cities (\n                                    id,\n                                    name\n                                )\n                                \"\"\")\n            )\n            .decodeSingle<Country>()\n```\n","note":"What about join tables\nIf you're in a situation where your tables are **NOT** directly related, but instead are joined by a _join table_,\nyou can still use the `select()` method to query the related data. The PostgREST engine detects the relationship automatically.\nFor more details, [follow the link](https://postgrest.org/en/latest/api.html#embedding-through-join-tables).\n"},{"id":"query-the-same-foreign-table-multiple-times","name":"Query the same foreign table multiple times","description":"Sometimes you will need to query the same foreign table twice.\nIn this case, you can use the name of the joined column to identify\nwhich join you intend to use. For convenience, you can also give an\nalias for each column.\n","code":"```kotlin\nval message = supabase.postgrest[\"messages\"]\n            .select(columns = Columns.raw(\n                              \"\"\"\n                              content,\n                              from: sender_id(name),\n                              to: receiver_id(name)\n                              \"\"\"))\n            .decodeSingle<Message>()\n```\n"},{"id":"querying-with-count-option","name":"Querying with count option","description":"You can get the number of rows by using the count option.\nAllowed values for count option are [Count.EXACT](https://postgrest.org/en/stable/api.html#exact-count), [Count.PLANNED](https://postgrest.org/en/stable/api.html#planned-count) and [Count.ESTIMATED](https://postgrest.org/en/stable/api.html#estimated-count).\n","code":"```kotlin\nval count = supabase.postgrest[\"countries\"]\n            .select(head = true, count = Count.EXACT)\n            .count()!!\n```\n"},{"id":"querying-json-data","name":"Querying JSON data","description":"If you have data inside of a JSONB column, you can apply select\nand query filters to the data values. Postgres offers a\n[number of operators](https://www.postgresql.org/docs/current/functions-json.html)\nfor querying JSON data. Also see\n[PostgREST docs](http://postgrest.org/en/v7.0.0/api.html#json-columns) for more details.\n","code":"```kotlin\nval user = supabase.postgrest[\"users\"]\n            .select(columns = Columns.raw(\n                            \"\"\"\n                            id, name\n                            address->city\n                            \"\"\")\n            .decodeSingle<User>()\n```\n"}]},{"id":"insert","title":"Create data: insert()","$ref":"@supabase/postgrest-js.\"lib/PostgrestQueryBuilder\".PostgrestQueryBuilder.insert","notes":"- When calling an `insert` method, you have to provide a [serializable value](/docs/reference/kotlin/installing#serialization).\n- By default, every time you run `insert()`, the client library will make a `select` to return the full record.\nThis is convenient, but it can also cause problems if your policies are not configured to allow the `select` operation.\nIf you are using Row Level Security and you are encountering problems, try setting the `returning` param to `Returning.MINIMAL`.\n","examples":[{"id":"create-a-record","name":"Create a record","isSpotlight":true,"code":"```kotlin\nval city = City(name = \"The Shire\", countryId = 554)\nsupabase.postgrest[\"cities\"].insert(city, returning = Returning.MINIMAL) //returning defaults to Returning.REPRESENTATION\n```\n"},{"id":"bulk-create","name":"Bulk create","description":"When running a bulk create, the operation is handled in a single transaction. If any of the inserts fail, all other operations are\nrolled back.\n","code":"```kotlin\nval theShire = City(name = \"The Shire\", countryId = 554)\nval rohan = City(name = \"Rohan\", countryId = 554)\nsupabase.postgrest[\"cities\"].insert(listOf(theShire, rohan), returning = Returning.MINIMAL) //returning defaults to Returning.REPRESENTATION\n```\n"},{"id":"fetch-inserted-data","name":"Fetch inserted record","code":"```kotlin\nval theShire = City(name = \"The Shire\", countryId = 554)\nval rohan = City(name = \"Rohan\", countryId = 554)\nval result = supabase.postgrest[\"cities\"].insert(listOf(theShire, rohan)).decodeList<City>()\n```\n"}]},{"id":"update","title":"Modify data: update()","notes":"- `update()` should always be combined with a [filter](/docs/reference/kotlin/using-filters) block to avoid updating all records.\n- When calling `insert` or `update`, you have to provide a [serializable value](/docs/reference/kotlin/installing#serialization) in the function parameter.\n","examples":[{"id":"updating-your-data","name":"Updating your data","isSpotlight":true,"code":"```kotlin\nsupabase.postgrest[\"characters\"].update(\n    {\n       Character::name setTo \"Han Solo\"\n       //or\n       set(\"name\", \"Han Solo\")\n    }\n) {\n   Character::id eq 1\n   //or\n   eq(\"id\", 1)\n}\n```\n"},{"id":"update-a-record-and-return-it","name":"Update a record and return it","code":"```kotlin\nval newCharacter = supabase.postgrest[\"characters\"].update(\n    {\n       Character::name setTo \"Han Solo\"\n       //or\n       set(\"name\", \"Han Solo\")\n    }\n) {\n   Character::id eq 1\n   //or\n   eq(\"id\", 1)\n}.decodeSingle<Character>()\n```\n","data":{"sql":"```sql\ncreate table\n  characters (id int8 primary key, name text);\n\ninsert into\n  characters (id, name)\nvalues\n  (1, 'Han');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Han Solo\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true},{"id":"updating-json-data","name":"Updating JSON data","description":"Postgres offers a\n[number of operators](https://www.postgresql.org/docs/current/functions-json.html)\nfor working with JSON data. Right now it is only possible to update an entire JSON document,\nbut we are [working on ideas](https://github.com/PostgREST/postgrest/issues/465) for updating individual keys.\n","code":"```kotlin\nval address = Address(street = \"Melrose Place\", postcode = 90210)\nsupabase.postgrest[\"users\"].update(\n    {\n       User::address setTo address\n    }\n) {\n   User::id eq 1\n   //or\n   eq(\"address->postcode\", 90210)\n}.decodeSingle<Country>()\n```\n"}]},{"id":"upsert","title":"Upsert data: upsert()","$ref":"@supabase/postgrest-js.\"lib/PostgrestQueryBuilder\".PostgrestQueryBuilder.upsert","notes":"- Primary keys should be included in the data payload in order for an update to work correctly.\n- Primary keys  must be natural, not surrogate. There are however, [workarounds](https://github.com/PostgREST/postgrest/issues/1118) for surrogate primary keys.\n- If you need to insert new data and update existing data at the same time, use [Postgres triggers](https://github.com/supabase/postgrest-js/issues/173#issuecomment-825124550).\n- When calling `insert` or `update`, you have to provide a [serializable value](/docs/reference/kotlin/installing#serialization) in the function parameter.\n","examples":[{"id":"upsert-your-data","name":"Upsert your data","isSpotlight":true,"code":"```kotlin\nval toUpsert = Message(id = 3, message = \"foo\", username = \"supabot\")\nsupabase.postgrest[\"messages\"].insert(toUpsert, upsert = true)\n```\n"},{"id":"upserting-into-tables-with-constraints","name":"Upserting into tables with constraints","description":"Running the following will cause Supabase to upsert data into the `users` table.\nIf the username 'supabot' already exists, the `onConflict` argument tells Supabase to overwrite that row\nbased on the column passed into `onConflict`.\n","isSpotlight":true,"code":"```kotlin\nlet toUpsert = User(username = \"supabot\")\nsupabase.postgrest[\"users\"].insert(toUpsert, upsert = true, onConflict = \"username\")\n```\n"},{"id":"upsert-return-row-count","name":"Return the exact number of rows","isSpotlight":true,"code":"```kotlin\nlet toUpsert = User(username = \"supabot\")\nval count = supabase.postgrest[\"users\"].insert(toUpsert, upsert = true, onConflict = \"username\", count = Count.EXACT).count()\n```\n"}]},{"id":"delete","title":"Delete data: delete()","$ref":"@supabase/postgrest-js.\"lib/PostgrestQueryBuilder\".PostgrestQueryBuilder.delete","notes":"- `delete()` should always be combined with a [filter](/docs/reference/kotlin/using-filters) block to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have\n  [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only\n  rows visible through `SELECT` policies are deleted. Note that by default\n  no rows are visible, so you need at least one `SELECT`/`ALL` policy that\n  makes the rows visible.\n","examples":[{"id":"delete-records","name":"Delete records","isSpotlight":true,"code":"```kotlin\nsupabase.postgrest[\"cities\"].delete {\n   City::id eq 666\n   //or\n   eq(\"id\", 666)\n}\n```\n"},{"id":"fetch-delete-records","name":"Fetch deleted records","code":"```kotlin\nval deletedCity = supabase.postgrest[\"cities\"].delete {\n   City::id eq 666\n   //or\n   eq(\"id\", 666)\n}.decodeSingle<City>()\n```\n"}]},{"id":"rpc","title":"Stored Procedures: rpc()","description":"You can call stored procedures as a \"Remote Procedure Call\".\n\nThat's a fancy way of saying that you can put some logic into your database then call it from anywhere.\nIt's especially useful when the logic rarely changes - like password resets and updates.\n\n- When calling `rpc` with parameters, you have to provide a [serializable value](/docs/reference/kotlin/installing#serialization) in the function parameter.\n","examples":[{"id":"call-a-stored-procedure","name":"Call a stored procedure","isSpotlight":true,"description":"This is an example invoking a stored procedure.","code":"```kotlin\nsupabase.postgrest.rpc(\"hello_world\")\n```\n"},{"id":"with-parameters","name":"With Parameters","code":"```kotlin\nval rpcParams = City(name = \"The Shire\")\nsupabase.postgrest.rpc(\"echo_city\", rpcParams)\n```\n"}]},{"id":"using-filters","title":"Using Filters","description":"Filters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, and `delete()` queries.\n\nYou can use two different types for applying filters:\n```kotlin\neq(\"country_id\", 1)\n```\nAnd using a class property:\n```kotlin\nCity::countryId eq 1\n```\n\nAs you can see on the property syntax:\nthe name of the `countryId` gets converted to `country_id`.\n\nBy default, this is done by converting camel case to snake case, but you can customize this by changing the `PropertyConversionMethod` in the Postgrest Config\n\nIf a database function returns a table response, you can also apply filters.\n","examples":[{"id":"applying-filters","name":"Applying a filter block","description":"Filters can be applied on any of these functions: `select()`, `update()`, `upsert()`,\n`delete()`, and `rpc()`\n","code":"```kotlin\nsupabase.postgrest[\"cities\"].select(columns = Columns.list(\"name\", \"country_id\")) {\n    City::name eq \"The Shire\"\n    //or\n    eq(\"name\", \"The Shire\")\n}\n```\n"},{"id":"multiple-filters","name":"Multiple filters on one column","description":"Filters can be applied on any of these functions: `select()`, `update()`, `upsert()`,\n`delete()`, and `rpc()`\n","code":"```kotlin\nsupabase.postgrest[\"characters\"].select(columns = Columns.list(\"name, book_id\")) {\n    and { //when both are true\n       Character::age gt 10\n       Character::age lt 150\n    }\n    or { //when either one of the filters are true\n       Character::name eq \"Harry\"\n       Character::name eq \"Dumbledore\"\n    }\n}\n```\n"},{"id":"filter-by-value-within-json-column","name":"Filter by values within a JSON column","description":"Filters can be built up one step at a time and then executed. For example:\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\ninsert into\n  users (id, name, address)\nvalues\n  (1, 'Michael', '{ \"postcode\": 90210 }'),\n  (2, 'Jane', null);\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Michael\",\n      \"address\": {\n        \"postcode\": 90210\n      }\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","code":"```kotlin\nsupabase.postgrest[\"users\"].select {\n   eq(\"address->postcode\", 90210)\n}\n```\n"},{"id":"filter-foreign-tables","name":"Filter Foreign Tables","code":"```kotlin\nsupabase.postgrest[\"orchestral_sections\"].select(\n      columns = Columns.raw(\"\"\"\n                            name,\n                            instruments!inner (\n                              name\n                            )\n                            \"\"\")\n) {\n    eq(\"instruments.name\", \"flute\")\n}\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n","response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"woodwinds\",\n      \"characters\": [\n        {\n          \"name\": \"flute\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n"}}]},{"id":"or","title":"or()","description":"Finds all rows satisfying at least one of the filters.\n","notes":"","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```kotlin\nsupabase.postgrest[\"countries\"].select(columns = Columns.list(\"name\")) {\n    or {\n        Country::id eq 2\n        Country::name eq \"Mordor\"\n        //or\n        eq(\"id\", 2)\n        eq(\"name\", \"Mordor\")\n    }\n}\n```\n"},{"id":"use-or-with-and","name":"Use `or` with `and`","code":"```kotlin\nsupabase.postgrest[\"countries\"].select(columns = Columns.list(\"name\")) {\n    or {\n        Country::id gt 3\n        and {\n           Country::id eq 1\n           Country::name eq \"Mordor\"\n        }\n    }\n}\n```\n"}]},{"id":"not","title":"filterNot()","description":"Finds all rows that don't satisfy the filter.\n","notes":"- `.filterNot()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for the filter names and values.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```kotlin\nsupabase.postgrest[\"countries\"].select {\n    filterNot(\"name\", FilterOperation.IS, \"\")\n}\n```\n"}]},{"id":"eq","title":"eq()","description":"Finds all rows whose value on the stated `column` exactly matches the specified `value`.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```kotlin\nsupabase.postgrest[\"cities\"].select(columns = Columns.list(\"name\", \"country_id\")) {\n    City::name eq \"The Shire\"\n    //or\n    eq(\"name\", \"The Shire\")\n}\n```\n"},{"id":"with-update","name":"With `update()`","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.postgrest[\"cities\"].update(toUpdate) {\n    City::name eq \"The Shire\"\n    //or\n    eq(\"name\", \"The Shire\")\n}\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```kotlin\nsupabase.postgrest[\"cities\"].delete {\n    City::name eq \"Mordor\"\n    //or\n    eq(\"name\", \"Mordor\")\n}\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```kotlin\nsupabase.postgrest.rpc(\"function\") {\n    City::name eq \"Mordor\"\n    //or\n    eq(\"name\", \"Mordor\")\n}\n```\n"}]},{"id":"neq","title":"neq()","description":"Finds all rows whose value on the stated `column` doesn't match the specified `value`.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```kotlin\nsupabase.postgrest[\"cities\"].select(columns = Columns.list(\"name\", \"country_id\")) {\n    City::name neq \"The Shire\"\n    //or\n    neq(\"name\", \"The Shire\")\n}\n```\n"},{"id":"with-update","name":"With `update()`","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.postgrest[\"cities\"].update(toUpdate) {\n    City::name neq \"The Shire\"\n    //or\n    neq(\"name\", \"The Shire\")\n}\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```kotlin\nsupabase.postgrest[\"cities\"].delete {\n    City::name neq \"The Shire\"\n    //or\n    neq(\"name\", \"The Shire\")\n}\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```kotlin\nsupabase.rpc(\"echo_all_cities\") {\n    neq(\"address->postcode\", 90210)\n}\n```\n"}]},{"id":"gt","title":"gt()","description":"Finds all rows whose value on the stated `column` is greater than the specified `value`.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```kotlin\nsupabase.postgrest[\"cities\"].select(columns = Columns.list(\"name\")) {\n   City::countryId gt 300\n   //or\n   gt(\"country_id\", 300)\n}\n```\n"},{"id":"with-update","name":"With `update()`","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.postgrest[\"cities\"].update(toUpdate) {\n   City::countryId gt 300\n   //or\n   gt(\"country_id\", 300)\n}\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```kotlin\nsupabase.postgrest[\"cities\"].delete {\n   City::countryId gt 300\n   //or\n   gt(\"country_id\", 300)\n}\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```kotlin\nsupabase.postgrest.rpc(\"echo_all_cities\") {\n   City::countryId gt 250\n   //or\n   gt(\"country_id\", 300)\n}\n```\n"}]},{"id":"gte","title":"gte()","description":"Finds all rows whose value on the stated `column` is greater than or equal to the specified `value`.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```kotlin\nsupabase.postgrest[\"cities\"].select(columns = Columns.list(\"name\")) {\n   City::countryId gte 300\n   //or\n   gte(\"country_id\", 300)\n}\n```\n"},{"id":"with-update","name":"With `update()`","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.postgrest[\"cities\"].update(toUpdate) {\n   City::countryId gte 300\n   //or\n   gte(\"country_id\", 300)\n}\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```kotlin\nsupabase.postgrest[\"cities\"].delete {\n   City::countryId gte 300\n   //or\n   gte(\"country_id\", 300)\n}\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```kotlin\nsupabase.postgrest.rpc(\"echo_all_cities\") {\n   City::countryId gte 250\n   //or\n   gte(\"country_id\", 300)\n}\n```\n"}]},{"id":"lt","title":"lt()","description":"Finds all rows whose value on the stated `column` is less than the specified `value`.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```kotlin\nsupabase.postgrest[\"cities\"].select(columns = Columns.list(\"name\")) {\n   City::countryId lt 300\n   //or\n   lt(\"country_id\", 300)\n}\n```\n"},{"id":"with-update","name":"With `update()`","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.postgrest[\"cities\"].update(toUpdate) {\n   City::countryId lt 300\n   //or\n   lt(\"country_id\", 300)\n}\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```kotlin\nsupabase.postgrest[\"cities\"].delete {\n   City::countryId lt 300\n   //or\n   lt(\"country_id\", 300)\n}\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```kotlin\nsupabase.postgrest.rpc(\"echo_all_cities\") {\n   City::countryId lt 250\n   //or\n   lt(\"country_id\", 300)\n}\n```\n"}]},{"id":"lte","title":"lte()","description":"Finds all rows whose value on the stated `column` is less than or equal to the specified `value`.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```kotlin\nsupabase.postgrest[\"cities\"].select(columns = Columns.list(\"name\")) {\n   City::countryId lte 300\n   //or\n   lte(\"country_id\", 300)\n}\n```\n"},{"id":"with-update","name":"With `update()`","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.postgrest[\"cities\"].update(toUpdate) {\n   City::countryId lte 300\n   //or\n   lte(\"country_id\", 300)\n}\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```kotlin\nsupabase.postgrest[\"cities\"].delete {\n   City::countryId lte 300\n   //or\n   lte(\"country_id\", 300)\n}\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```kotlin\nsupabase.postgrest.rpc(\"echo_all_cities\") {\n   City::countryId lte 250\n   //or\n   lte(\"country_id\", 300)\n}\n```\n"}]},{"id":"like","title":"like()","description":"Finds all rows whose value in the stated `column` matches the supplied `pattern` (case sensitive).\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```kotlin\nsupabase.postgrest[\"cities\"].select(columns = Columns.list(\"name\")) {\n   City::name like \"%la%\"\n   //or\n   like(\"name\", \"%la%\")\n}\n```\n"},{"id":"with-update","name":"With `update()`","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.postgrest[\"cities\"].update(toUpdate) {\n   City::name like \"%la%\"\n   //or\n   like(\"name\", \"%la%\")\n}\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```kotlin\nsupabase.postgrest[\"cities\"].delete {\n   City::name like \"%la%\"\n   //or\n   like(\"name\", \"%la%\")\n}\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```kotlin\nsupabase.postgrest.rpc(\"echo_all_cities\") {\n   City::name like \"%la%\"\n   //or\n   like(\"name\", \"%la%\")\n}\n```\n"}]},{"id":"ilike","title":"ilike()","description":"Finds all rows whose value in the stated `column` matches the supplied `pattern` (case insensitive).\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```kotlin\nsupabase.postgrest[\"cities\"].select(columns = Columns.list(\"name\")) {\n   City::name ilike \"%la%\"\n   //or\n   ilike(\"name\", \"%la%\")\n}\n```\n"},{"id":"with-update","name":"With `update()`","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.postgrest[\"cities\"].update(toUpdate) {\n   City::name ilike \"%la%\"\n   //or\n   ilike(\"name\", \"%la%\")\n}\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```kotlin\nsupabase.postgrest[\"cities\"].delete {\n   City::name ilike \"%la%\"\n   //or\n   ilike(\"name\", \"%la%\")\n}\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```kotlin\nsupabase.postgrest.rpc(\"echo_all_cities\") {\n   City::name ilike \"%la%\"\n   //or\n   ilike(\"name\", \"%la%\")\n}\n```\n"}]},{"id":"is","title":"is_()","description":"A check for exact equality (null, true, false), finds all rows whose value on the stated `column` exactly match the specified `value`.\n\n`is_` and `in_` filter methods are suffixed with `_` to avoid collisions with reserved keywords.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```kotlin\nsupabase.postgrest[\"cities\"].select(columns = Columns.list(\"name\")) {\n   City::name isExact null\n   //or\n   exact(\"name\", null)\n}\n```\n"},{"id":"with-update","name":"With `update()`","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.postgrest[\"cities\"].update(toUpdate) {\n   City::name isExact null\n   //or\n   exact(\"name\", null)\n}\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```kotlin\nsupabase.postgrest[\"cities\"].delete {\n    City::name isExact null\n   //or\n   exact(\"name\", null)\n}\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```kotlin\nsupabase.postgrest.rpc(\"echo_all_cities\") {\n   City::name isExact null\n   //or\n   exact(\"name\", null)\n}\n```\n"}]},{"id":"in","title":"in_()","description":"Finds all rows whose value on the stated `column` is found on the specified `values`.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```kotlin\nsupabase.postgrest[\"cities\"].select(columns = Columns.list(\"name\")) {\n   City::name isIn listOf(\"The Shire\", \"Mordor\")\n   //or\n   isIn(\"name\", listOf(\"The Shire\", \"Mordor\"))\n}\n```\n"},{"id":"with-update","name":"With `update()`","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.postgrest[\"cities\"].update(toUpdate) {\n   City::name isIn listOf(\"Hobbiton\", \"Edoras\")\n   //or\n   isIn(\"name\", listOf(\"Hobbiton\", \"Edoras\"))\n}\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```kotlin\nsupabase.postgrest[\"cities\"].delete {\n   City::name isIn listOf(\"Hobbiton\", \"Edoras\")\n   //or\n   isIn(\"name\", listOf(\"Hobbiton\", \"Edoras\"))\n}\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```kotlin\nsupabase.postgrest.rpc(\"echo_all_cities\") {\n   City::name isIn listOf(\"Hobbiton\", \"Edoras\")\n   //or\n   isIn(\"name\", listOf(\"Hobbiton\", \"Edoras\"))\n}\n```\n"}]},{"id":"contains","title":"contains()","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```kotlin\nsupabase.postgrest[\"cities\"].select(columns = Columns.list(\"name\")) {\n   City::mainExports contains listOf(\"oil\")\n   //or\n   contains(\"main_exports\", listOf(\"oil\"))\n}\n```\n"},{"id":"with-update","name":"With `update()`","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.postgrest[\"cities\"].update(toUpdate) {\n   City::mainExports contains listOf(\"oil\")\n   //or\n   contains(\"main_exports\", listOf(\"oil\"))\n}\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```kotlin\nsupabase.postgrest[\"cities\"].delete {\n   City::mainExports contains listOf(\"oil\")\n   //or\n   contains(\"main_exports\", listOf(\"oil\"))\n}\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```kotlin\nsupabase.postgrest.rpc(\"echo_all_cities\") {\n   City::mainExports contains listOf(\"oil\")\n   //or\n   contains(\"main_exports\", listOf(\"oil\"))\n}\n```\n"}]},{"id":"range-lt","title":"rangeLt()","description":"Only relevant for range columns. Match only rows where every element in column is less than any element in range.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```kotlin\n  supabase.postgrest[\"reservations\"].select {\n     Reservation::during rangeLt (\"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n     //or\n     rangeLt(\"during\", \"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n  }\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"room_name\": \"Emerald\",\n      \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n","hideCodeBlock":true}]},{"id":"range-gt","title":"rangeGt()","description":"Only relevant for range columns. Match only rows where every element in column is greater than any element in range.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```kotlin\n  supabase.postgrest[\"reservations\"].select {\n     Reservation::during rangeGt (\"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n     //or\n     rangeGt(\"during\", \"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n  }\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n  {\n    \"data\": [\n      {\n        \"id\": 2,\n        \"room_name\": \"Topaz\",\n        \"during\": \"[\\\"2000-01-02 09:00:00\\\",\\\"2000-01-02 10:00:00\\\")\"\n      }\n    ],\n    \"status\": 200,\n    \"statusText\": \"OK\"\n  }\n  ```\n","description":"Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n","hideCodeBlock":true}]},{"id":"range-gte","title":"rangeGte()","description":"Only relevant for range columns. Match only rows where every element in column is either contained in range or greater than any element in range.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```kotlin\n  supabase.postgrest[\"reservations\"].select {\n     Reservation::during rangeGte (\"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n     //or\n     rangeGte(\"during\", \"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n  }\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n  {\n    \"data\": [\n      {\n        \"id\": 2,\n        \"room_name\": \"Topaz\",\n        \"during\": \"[\\\"2000-01-02 09:00:00\\\",\\\"2000-01-02 10:00:00\\\")\"\n      }\n    ],\n    \"status\": 200,\n    \"statusText\": \"OK\"\n  }\n  ```\n","description":"Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n","hideCodeBlock":true}]},{"id":"range-lte","title":"rangeLte()","description":"Only relevant for range columns. Match only rows where every element in column is either contained in range or less than any element in range.\n","$ref":"@supabase/postgrest-js.PostgrestFilterBuilder.rangeLte","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```kotlin\n  supabase.postgrest[\"reservations\"].select {\n     Reservation::during rangeLte (\"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n     //or\n     rangeLte(\"during\", \"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n  }\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n  {\n    \"data\": [\n      {\n        \"id\": 1,\n        \"room_name\": \"Emerald\",\n        \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n      }\n    ],\n    \"status\": 200,\n    \"statusText\": \"OK\"\n  }\n  ```\n","description":"Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n","hideCodeBlock":true}]},{"id":"range-adjacent","title":"rangeAdjacent()","description":"Only relevant for range columns. Match only rows where column is mutually exclusive to range and there can be no element between the two ranges.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```kotlin\n  supabase.postgrest[\"reservations\"].select {\n     Reservation::during adjacent (\"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n     //or\n     adjacent(\"during\", \"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n  }\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"room_name\": \"Emerald\",\n      \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true}]},{"id":"overlaps","title":"overlaps()","$ref":"@supabase/postgrest-js.PostgrestFilterBuilder.overlaps","description":"Only relevant for array and range columns. Match only rows where column and value have an element in common.\n","examples":[{"id":"on-array-columns","name":"On array columns","code":"```kotlin\nsupabase.postgrest[\"issues\"].select(columns = Columns.list(\"title\")) {\n   Issue::tags overlaps listOf(\"is:closed\", \"severity:high\")\n   //or\n   overlaps(\"tags\", listOf(\"is:closed\", \"severity:high\"))\n}\n```\n","data":{"sql":"```sql\ncreate table\n  issues (\n    id int8 primary key,\n    title text,\n    tags text[]\n  );\n\ninsert into\n  issues (id, title, tags)\nvalues\n  (1, 'Cache invalidation is not working', array['is:open', 'severity:high', 'priority:low']),\n  (2, 'Use better names', array['is:open', 'severity:low', 'priority:medium']);\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"title\": \"Cache invalidation is not working\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-range-columns","name":"On range columns","code":"```kotlin\nsupabase.postgrest[\"issues\"].select(columns = Columns.list(\"title\")) {\n   Issue::tags overlaps listOf(\"is:closed\", \"severity:high\")\n   //or\n   overlaps(\"tags\", listOf(\"is:closed\", \"severity:high\"))\n}\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"room_name\": \"Emerald\",\n      \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n","hideCodeBlock":true}]},{"id":"text-search","title":"textSearch()","description":"Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\nFor more information, see [Postgres full text search](https://supabase.com/docs/guides/database/full-text-search).\n","examples":[{"id":"text-search","name":"Text search","code":"```kotlin\nsupabase.postgrest[\"quotes\"].select(columns = Columns.list(\"catchphrase\")) {\n   textSearch(column = \"catchphrase\", query = \"'fat' & 'cat'\", config = \"english\", type = TextSearchType.YOUR_TYPE)\n}\n```\n"},{"id":"basic-normalization","name":"Basic normalization","description":"Uses PostgreSQL's `plainto_tsquery` function.","code":"```kotlin\nsupabase.postgrest[\"quotes\"].select(columns = Columns.list(\"catchphrase\")) {\n   textSearch(column = \"catchphrase\", query = \"'fat' & 'cat'\", config = \"english\", type = TextSearchType.PLAINTO)\n}\n```\n"},{"id":"full-normalization","name":"Full normalization","description":"Uses PostgreSQL's `phraseto_tsquery` function.","code":"```kotlin\nsupabase.postgrest[\"quotes\"].select(columns = Columns.list(\"catchphrase\")) {\n   textSearch(column = \"catchphrase\", query = \"'fat' & 'cat'\", config = \"english\", type = TextSearchType.PHRASETO)\n}\n```\n"},{"id":"web-search","name":"Websearch","description":"Uses PostgreSQL's `websearch_to_tsquery` function.\nThis function will never raise syntax errors, which makes it possible to use raw user-supplied input for search, and can be used\nwith advanced operators.\n\n- `unquoted text`: text not inside quote marks will be converted to terms separated by & operators, as if processed by plainto_tsquery.\n- `\"quoted text\"`: text inside quote marks will be converted to terms separated by `<->` operators, as if processed by phraseto_tsquery.\n- `OR`: the word “or” will be converted to the | operator.\n- `-`: a dash will be converted to the ! operator.\n","code":"```kotlin\nsupabase.postgrest[\"quotes\"].select(columns = Columns.list(\"catchphrase\")) {\n   textSearch(column = \"catchphrase\", query = \"'fat' & 'cat'\", config = \"english\", type = TextSearchType.WEBSEARCH)\n}\n```\n"}]},{"id":"filter","title":"filter()","$ref":"@supabase/postgrest-js.PostgrestFilterBuilder.filter","notes":"filter() expects you to use the raw PostgREST syntax for the filter values.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```kotlin\nsupabase.postgrest[\"characters\"].select {\n   filter(column = \"name\", operator = FilterOperator.IN, value = \"('Han', 'Katniss')\")\n}\n```\n","data":{"sql":"```sql\ncreate table\n  characters (id int8 primary key, name text);\n\ninsert into\n  characters (id, name)\nvalues\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 3,\n      \"name\": \"Han\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-a-foreign-table","name":"On a foreign table","code":"```kotlin\nsupabase.postgrest[\"orchestral_sections\"].select(\n   columns = Columns.raw(\"\"\"\n                         name,\n                         instruments!inner (\n                           name\n                         )\n                         \"\"\")\n) {\n   filter(column = \"instruments.name\", operator = FilterOperator.EQ, value = \"flute\")\n}\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"woodwinds\",\n      \"instruments\": [\n        {\n          \"name\": \"flute\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true}]},{"id":"order","title":"order()","description":"Order the query result by column.\n","$ref":"@supabase/postgrest-js.PostgrestTransformBuilder.order","examples":[{"id":"with-select","name":"With `select()`","code":"```kotlin\nsupabase.postgrest[\"characters\"].select(columns = Columns.list(\"id\", \"name\")) {\n   order(column = \"id\", order = Order.DESCENDING)\n}\n```\n","data":{"sql":"```sql\ncreate table\n  characters (id int8 primary key, name text);\n\ninsert into\n  characters (id, name)\nvalues\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 3,\n      \"name\": \"Han\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Leia\"\n    },\n    {\n      \"id\": 1,\n      \"name\": \"Luke\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-a-foreign-table","name":"On a foreign table","code":"```kotlin\nsupabase.postgrest[\"orchestral_sections\"].select(\n    columns = Columns.raw(\n        \"\"\"\n                    name,\n                    instruments (\n                      name\n                    )\n              \"\"\"\n    )\n) {\n    order(column = \"name\", order = Order.DESCENDING, foreignTable = \"instruments\")\n}\n  ```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 1, 'harp'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"instruments\": [\n        {\n          \"name\": \"violin\"\n        },\n        {\n          \"name\": \"harp\"\n        }\n      ]\n    },\n    {\n      \"name\": \"woodwinds\",\n      \"instruments\": []\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"Ordering on foreign tables doesn't affect the ordering of\nthe parent table.\n","hideCodeBlock":true}]},{"id":"limit","title":"limit()","description":"Limit the query result by count.\n","$ref":"@supabase/postgrest-js.PostgrestTransformBuilder.limit","examples":[{"id":"with-select","name":"With `select()`","code":"```kotlin\nsupabase.postgrest[\"characters\"].select {\n    limit(count = 1)\n}\n```\n","data":{"sql":"```sql\ncreate table\n  characters (id int8 primary key, name text);\n\ninsert into\n  characters (id, name)\nvalues\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"Luke\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-a-foreign-table","name":"On a foreign table","code":"```kotlin\nsupabase.postgrest[\"orchestral_sections\"].select(\n    columns = Columns.raw(\n        \"\"\"\n                    name,\n                    instruments (\n                      name\n                    )\n              \"\"\"\n    )\n) {\n    limit(count = 1, foreignTable = \"instruments\")\n}\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 1, 'harp'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"cities\": [\n        {\n          \"name\": \"harp\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true}]},{"id":"range","title":"range()","description":"Limit the query result by from and to inclusively.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```kotlin\nsupabase.postgrest[\"characters\"].select {\n    range(1L..5L)\n}\n```\n","data":{"sql":"```sql\ncreate table\n  characters (id int8 primary key, name text);\n\ninsert into\n  characters (id, name)\nvalues\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"Luke\"\n    },\n    {\n      \"name\": \"Leia\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"auth-api","title":"Overview","notes":"- The auth methods can be accessed via the Supabase GoTrue Auth client.\n","examples":[{"id":"create-auth-client","name":"Create gotrue client","isSpotlight":true,"code":"```kotlin\nval supabase = createSupabaseClient(supabaseURL = \"https://xyzcompany.supabase.co'\", supabaseKey = \"publishable-or-anon-key\") { ... }\nval gotrue = supabase.gotrue\n```\n"}]},{"id":"sign-up","title":"signUp()","$ref":"@supabase/gotrue-js.GoTrueClient.signUp","notes":"Creates a new user.\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, the return value is the user and you won't be logged in automatically.\n  - If **Confirm email** is disabled, the return value is null and you will be logged in instead.\n- When the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls) by default. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- To learn how to handle OTP links & OAuth refer to [initializing](/docs/reference/kotlin/initializing)\n- If signUpWith() is called for an existing confirmed user:\n  - If **Confirm email** is enabled in [your project](https://supabase.com/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - If **Confirm email** is disabled, the error message, `User already registered` is returned.\n","examples":[{"id":"sign-up-email","name":"Sign up with email","isSpotlight":true,"code":"```kotlin\nval user = supabase.gotrue.signUpWith(Email) {\n    email = \"example@email.com\"\n    password = \"example-password\"\n}\n```\n"},{"id":"sign-up-phone","name":"Sign up with a phone number","isSpotlight":true,"code":"```kotlin\nval user = supabase.gotrue.signUpWith(Phone) {\n    phoneNumber = \"+4912345679\"\n    password = \"example-password\"\n}\n```\n"},{"id":"sign-up-with-additional-user-metadata","name":"Sign up with additional user metadata","isSpotlight":false,"code":"```kotlin\nval user = supabase.gotrue.signUpWith(Email) {\n    email = \"example@email.com\"\n    password = \"example-password\"\n    data = buildJsonObject {\n       put(\"first_name\", \"John\")\n       put(\"age\", 24)\n    }\n}\n```\n"},{"id":"sign-up-with-redirect","name":"Sign up with a redirect URL","description":"- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n","code":"```kotlin\nval user = supabase.gotrue.signUpWith(Email, redirectUrl = \"https://example.com\") {\n    email = \"example@email.com\"\n    password = \"example-password\"\n}\n```\n"}]},{"id":"sign-in-with-password","title":"loginWith()","$ref":"@supabase/gotrue-js.GoTrueClient.signInWithPassword","notes":"Logs in an existing user.\n- Requires either an email and password or a phone number and password.\n","examples":[{"id":"sign-in-with-email-and-password","name":"Sign in with email and password","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.loginWith(Email) {\n    email = \"example@email.com\"\n    password = \"example-password\"\n}\n```\n"},{"id":"sign-in-with-phone-and-password","name":"Sign in with phone and password","isSpotlight":false,"code":"```kotlin\nsupabase.gotrue.loginWith(Phone) {\n    phoneNumber = \"+4912345679\"\n    password = \"example-password\"\n}\n```\n"},{"id":"sign-in-with-id-token","name":"Sign in with id token","isSpotlight":false,"code":"```kotlin\nsupabase.gotrue.loginWith(IDToken) {\n    idToken = \"token\"\n    provider = Google //Also supported: Apple, Azure and Facebook\n    //optional:\n    nonce = \"nonce\"\n    data = buildJsonObject {\n        //...\n    }\n}\n```\n"}]},{"id":"sign-in-with-otp","title":"sendOtpTo()","$ref":"@supabase/gotrue-js.GoTrueClient.signInWithOtp","notes":"Sends a OTP to the user's email or phone number.\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sendOtpTo()` will signup the user instead. To restrict this behavior, you can set `createUser` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- To learn how to handle OTP links & OAuth refer to [initializing](/docs/reference/kotlin/initializing)\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `{{ .Token }}` instead of `{{ .ConfirmationURL }}`.\n","examples":[{"id":"sign-in-with-email","name":"Sign in with email","isSpotlight":true,"description":"The user will be sent an email which contains either a magiclink or a OTP or both. By default, a given user can only request a OTP once every 60 seconds.","code":"```kotlin\nsupabase.gotrue.sendOtpTo(Email) {\n    email = \"example@email.com\"\n}\n```\n"},{"id":"sign-in-with-sms-otp","name":"Sign in with SMS OTP","isSpotlight":false,"description":"The user will be sent a SMS which contains a OTP. By default, a given user can only request a OTP once every 60 seconds.","code":"```kotlin\nsupabase.gotrue.sendOtpTo(Phone) {\n    phoneNumber = \"+4912345679\"\n}\n```\n"}]},{"id":"sign-in-with-oauth","title":"loginWith(OAuthProvider)","$ref":"@supabase/gotrue-js.GoTrueClient.signInWithOAuth","notes":"- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](https://supabase.com/docs/guides/auth#providers).\n- To learn how to handle OTP links & OAuth refer to [initializing](/docs/reference/kotlin/initializing)\n","examples":[{"id":"sign-in-using-a-third-party-provider","name":"Sign in using a third-party provider","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.loginWith(Github)\n```\n"},{"id":"sign-in-using-a-third-party-provider with scopes","name":"Sign in using a third-party provider with scopes","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.loginWith(Github) {\n    scopes.add(\"email\")\n}\n```\n"},{"id":"sign-in-using-a-third-party-provider-with-redirect","name":"Create a custom url","isSpotlight":false,"description":"- When the third-party provider successfully authenticates the user, the provider redirects the user to the URL specified in the `redirectUrl` parameter. This parameter defaults to the [`SITE_URL`](/docs/guides/auth/redirect-urls). It does not redirect the user immediately after invoking this method.\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- oAuthUrl() provides the URL which needs to be opened in a browser.\n- The redirectTo URL needs to be setup correctly in your project under Authentication -> URL Configuration -> Redirect URLs.\n- To see how you can use a custom in-app browser on Android, check our [demo](https://github.com/supabase-community/supabase-kt/tree/development/demos/android-login) on GitHub.\n","code":"```kotlin\nval url = supabase.gotrue.oAuthUrl(Github, redirectUrl = \"https://example.com\")\n```\n"},{"id":"sign-in-with-scopes","name":"Create a custom url with scopes","isSpotlight":false,"description":"If you need additional data from an OAuth provider, you can include a space-separated list of scopes in your request to get back an OAuth provider token.\nYou may also need to specify the scopes in the provider's OAuth app settings, depending on the provider. The list of scopes will be documented by the third-party provider you are using and specifying scopes will enable you to use the OAuth provider token to call additional APIs supported by the third-party provider to get more information.\n","code":"```kotlin\nval url = supabase.gotrue.oAuthUrl(Github, redirectUrl = \"https://example.com\") {\n    scopes.add(\"email\")\n}\n```\n"}]},{"id":"sign-in-with-sso","title":"signInWithSSO()","$ref":"@supabase/gotrue-js.GoTrueClient.signInWithSSO","notes":"- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `SSO.withDomain()` function in the `loginWith` method to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `SSO.withProviderId` function. For example:\n    - Mapping specific user email addresses with an identity provider.\n    - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n- To learn how to handle OTP links & OAuth refer to [initializing](/docs/reference/kotlin/initializing)\n","examples":[{"id":"sign-in-with-domain","name":"Sign in with email domain","isSpotlight":true,"code":"```kotlin\n  // You can extract the user's email domain and use it to trigger the\n  // authentication flow with the correct identity provider.\n\n  supabase.gotrue.loginWith(SSO.withDomain(\"company.com\"))\n\n  //the url was opened automatically, if you don't want that, provide a custom redirect url\n```\n"},{"id":"sign-in-with-provider-uuid","name":"Sign in with provider UUID","isSpotlight":true,"code":"```kotlin\n  // Useful when you need to map a user's sign in request according\n  // to different rules that can't use email domains.\n\n  supabase.gotrue.loginWith(SSO.withProvider(\"21648a9d-8d5a-4555-a9d1-d6375dc14e92\"))\n\n  //the url was opened automatically, if you don't want that, provide a custom redirect url\n```\n"}]},{"id":"sign-out","title":"logout()","$ref":"@supabase/gotrue-js.GoTrueClient.signOut","notes":"Logs out the current user.\n- In order to use the `logout()` method, the user needs to be signed in first.\n","examples":[{"id":"sign-out","name":"Sign out","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.logout()\n```\n"},{"id":"sign-out-all-sessions","name":"Sign out all sessions","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.logout(LogoutScope.GLOBAL)\n```\n"},{"id":"sign-out-others","name":"Sign out all sessions except the current","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.logout(LogoutScope.OTHERS)\n```\n"}]},{"id":"verify-otp","title":"Verify OTPs","$ref":"@supabase/gotrue-js.GoTrueClient.verifyOtp","notes":"Log in a user given a User supplied OTP received via mobile.\n","examples":[{"id":"verify-email-otp(otp)","name":"Verify an Email OTP","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.verifyEmailOtp(type = OtpType.Email.INVITE, email = \"example@email.com\", token = \"token\")\n```\n","description":"Available types are:\n  - `OtpType.Email.MAGIC_LINK`\n  - `OtpType.Email.SIGNUP`\n  - `OtpType.Email.INVITE`\n  - `OtpType.Email.RECOVERY`\n  - `OtpType.Email.EMAIL_CHANGE`\n"},{"id":"verify-phone-otp(otp)","name":"Verify an Phone OTP","isSpotlight":false,"code":"```kotlin\nsupabase.gotrue.verifyPhoneOtp(type = OtpType.Phone.SMS, phoneNumber = \"+491234567\", token = \"token\")\n```\n","description":"Available types are:\n  - `OtpType.Phone.SMS`\n  - `OtpType.Phone.PHONE_CHANGE`\n"}]},{"id":"send-password-reauthentication","title":"reauthenticate()","$ref":"@supabase/gotrue-js.GoTrueClient.reauthenticate","notes":"- This method is used together with `modifyUser()` when a user's password needs to be updated.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n","examples":[{"id":"send-reauthentication-nonce","name":"Send reauthentication nonce","description":"Sends a reauthentication nonce to the user's email or phone number.","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.reauthenticate()\n```\n"}]},{"id":"resend-email-or-phone-otps","title":"resend()","$ref":"@supabase/gotrue-js.GoTrueClient.resend","notes":"- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sendOtpTo()` method again.\n- Password recovery emails can be resent by calling the `sendRecoveryEmail()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n","examples":[{"id":"resend-email-signup-confirmation","name":"Resend an email signup confirmation","description":"Resends the email signup confirmation to the user","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.resendEmail(OtpType.Email.SIGNUP, \"example@email.com\")\n```\n"},{"id":"resend-phone-signup-confirmation","name":"Resend a phone signup confirmation","description":"Resends the phone signup confirmation email to the user","code":"```kotlin\nsupabase.gotrue.resendPhone(OtpType.Phone.SMS, \"1234567890\")\n```\n"},{"id":"resend-email-change-email","name":"Resend email change email","description":"Resends the email change email to the user","code":"```kotlin\nsupabase.gotrue.resendEmail(OtpType.Email.EMAIL_CHANGE, \"example@email.com\")\n```\n"},{"id":"resend-phone-change","name":"Resend phone change OTP","description":"Resends the phone change OTP to the user","code":"```kotlin\nsupabase.gotrue.resendPhone(OtpType.Phone.PHONE_CHANGE, \"1234567890\")\n```\n"}]},{"id":"get-session","title":"Get current session","$ref":"@supabase/gotrue-js.GoTrueClient.getSession","notes":"Returns the current session, or `null` if there is none.\n","examples":[{"id":"get-the-session-data","name":"Get the session data","isSpotlight":true,"code":"```kotlin\nval session = supabase.gotrue.currentSessionOrNull()\n```\n"}]},{"id":"get-user","title":"getUser()","$ref":"@supabase/gotrue-js.GoTrueClient.getUser","description":"- This method gets the user object from the current session.\n- Fetches the user object from the database instead of local session.\n- Should be used only when you require the most current user data. For faster results, `getCurrentSessionOrNull()?.user` is recommended.\n","examples":[{"id":"get-the-logged-in-user-with-the-current-existing-session","name":"Get the logged in user with the current session","isSpotlight":true,"code":"```kotlin\nval user = supabase.gotrue.retrieveUserForCurrentSession(updateSession = true)\n```\n","description":"`updateSession` updates the local session with the new user\n"},{"id":"get-different-user","name":"Get a user based on their access token","isSpotlight":true,"code":"```kotlin\nval user = supabase.gotrue.retrieveUser(\"JWT\")\n```\n"}]},{"id":"update-user","title":"modifyUser()","$ref":"@supabase/gotrue-js.GoTrueClient.updateUser","notes":"Modifies the user data.\n- In order to use the `modifyUser()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email.\nTo only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](https://supabase.com/dashboard/project/_/auth/providers).\n","examples":[{"id":"update-the-email-for-an-authenticated-user","name":"Update the email for an authenticated user","description":"Sends a \"Confirm Email Change\" email to the new email address.","isSpotlight":false,"code":"```kotlin\nval user = supabase.gotrue.modifyUser {\n   email = \"newEmail@email.com\"\n}\n```\n"},{"id":"update-the-password-for-an-authenticated-user","name":"Update the password for an authenticated user","isSpotlight":false,"code":"```kotlin\nval user = supabase.gotrue.modifyUser {\n   password = \"secretPassword\"\n}\n```\n"},{"id":"update-the-users-metadata","name":"Update the user's metadata","isSpotlight":true,"code":"```kotlin\nval user = supabase.gotrue.modifyUser {\n   data {\n      put(\"name\", \"John\")\n   }\n}\n```\n"}]},{"id":"set-session","title":"importSession()","$ref":"@supabase/gotrue-js.GoTrueClient.setSession","notes":"Changes the local session.\n- `importSession()` takes in a UserSession.\n- [Refresh token rotation](/docs/reference/auth/config#refresh_token_rotation_enabled) is enabled by default on all projects to guard against replay attacks.\n- You can configure the [`REFRESH_TOKEN_REUSE_INTERVAL`](https://supabase.com/docs/reference/auth/config#refresh_token_reuse_interval) which provides a short window in which the same refresh token can be used multiple times in the event of concurrency or offline issues.\n","examples":[{"id":"refresh-the-session","name":"Set local session","description":"Sets the local session from refresh_token and returns current session or an error if the refresh_token is invalid.","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.importSession(UserSession(accessToken = \"token\", refreshToken = \"refresh\", expiresIn = 2000, tokenType = \"Bearer\", user = null))\n```\n"}]},{"id":"refresh-session","title":"refreshSession()","$ref":"@supabase/gotrue-js.GoTrueClient.refreshSession","notes":"This method will refresh the session whether the current one is expired or not.\n\n- This is done automatically, but can be disabled in the GoTrue config.\n","examples":[{"id":"refresh-current-session","name":"Refresh current session","isSpotlight":true,"code":"```kotlin\nval session = supabase.gotrue.refreshCurrentSession()\n```\n"},{"id":"refresh-session-using-the-current-session","name":"Refresh session using the refresh token","isSpotlight":true,"code":"```kotlin\nval session = supabase.gotrue.refreshSession(refreshToken = \"refreshToken\")\n```\n"}]},{"id":"on-auth-state-change","title":"sessionStatus","$ref":"@supabase/gotrue-js.GoTrueClient.onAuthStateChange","notes":"Listen to session changes.\n","examples":[{"id":"listen-to-auth-changes","name":"Listen to auth changes","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.sessionStatus.collect {\n    when(it) {\n        is SessionStatus.Authenticated -> println(it.session.user)\n        SessionStatus.LoadingFromStorage -> println(\"Loading from storage\")\n        SessionStatus.NetworkError -> println(\"Network error\")\n        SessionStatus.NotAuthenticated -> println(\"Not authenticated\")\n    }\n}\n```\n","description":"Types of statuses:\n- `NotAuthenticated`,\n- `LoadingFromStorage`,\n- `NetworkError`,\n- `Authenticated(session)`\n"}]},{"id":"reset-password-for-email","title":"Send a password reset request","notes":"Sends a password reset request to the given email address.\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `sendRecoveryEmail()` only sends a password reset link to the user's email.\nTo update the user's password, see [`modifyUser()`](/docs/reference/kotlin/auth-updateuser).\n- The user gets redirected back to your app, assuming you setup [OTP handling](/docs/reference/kotlin/initializing)\n- After the user has been redirected successfully, prompt them for a new password and call `modifyUser()`:\n  ```kotlin\n  supabase.gotrue.modifyUser {\n      password = \"1234567\"\n  }\n  ```\n","examples":[{"id":"send-password-reset-email","name":"Send password reset email","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.sendRecoveryEmail(email = \"example@email.com\")\n```\n"}]},{"id":"exchange-code-for-session","title":"exchangeCodeForSession()","$ref":"@supabase/gotrue-js.GoTrueClient.exchangeCodeForSession","notes":"- Used when `flowType` is set to `FlowType.PKCE` in the GoTrue configuration.\n","examples":[{"id":"exchange-auth-code","name":"Exchange Auth Code","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.exchangeCodeForSession(\"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n```\n"}]},{"id":"auth-mfa-api","title":"Overview","notes":"This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.gotrue.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n"},{"id":"mfa-enroll","title":"Enroll a factor","$ref":"@supabase/gotrue-js.GoTrueMFAApi.enroll","notes":"Enrolls a new factor.\n- Currently, `totp` is the only supported `factorType`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.createChallenge()`](/docs/reference/kotlin/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verifyChallenge()`](/docs/reference/kotlin/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.createChallengeAndVerify()`](/docs/reference/kotlin/auth-mfa-challengeandverify).\n","examples":[{"id":"enroll-totp-factor","name":"Enroll a time-based, one-time password (TOTP) factor","isSpotlight":true,"code":"```kotlin\nval factor = supabase.gotrue.mfa.enroll(factorType = FactorType.TOTP)\n\n// Use the id to create a challenge.\n// The challenge can be verified by entering the code generated from the authenticator app.\n// The code will be generated upon scanning the qr_code or entering the secret into the authenticator app.\nval (id, type, qrCode) = factor.data //qrCode is a svg as a string\nval (factorId, factorType, _) = factor\n```\n"},{"id":"get-local-verified-factors","name":"Check the local user for verified factors","isSpotlight":true,"code":"```kotlin\nval verifiedFactors = supabase.gotrue.mfa.verifiedFactors\n```\n"},{"id":"retrieve-verified-factors","name":"Retrieve verified factors","isSpotlight":true,"code":"```kotlin\nval verifiedFactors = supabase.gotrue.mfa.retrieveFactorsForCurrentUser()\n```\n"}]},{"id":"mfa-challenge","title":"mfa.challenge()","$ref":"@supabase/gotrue-js.GoTrueMFAApi.challenge","notes":"Creates a challenge for a factor.\n- An [enrolled factor](/docs/reference/kotlin/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verifyChallenge()`](/docs/reference/kotlin/auth-mfa-verify).\n","examples":[{"id":"create-mfa-challenge","name":"Create a challenge for a factor","isSpotlight":true,"code":"```kotlin\nval challenge = supabase.gotrue.mfa.createChallenge(factorId = \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n```\n"}]},{"id":"mfa-verify","title":"mfa.verify()","$ref":"@supabase/gotrue-js.GoTrueMFAApi.verify","notes":"Verifies a challenge for a factor.\n- To verify a challenge, please [create a challenge](/docs/reference/kotlin/auth-mfa-challenge) first.\n","examples":[{"id":"verify-challenge","name":"Verify a challenge for a factor","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.mfa.verifyChallenge(\n    factorId = \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n    challengeId = \"4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15\",\n    code = \"123456\",\n    saveSession = true // this is set to true by default, but you can set it to false if you want to handle the session yourself\n)\n```\n"}]},{"id":"mfa-challenge-and-verify","title":"mfa.challengeAndVerify()","$ref":"@supabase/gotrue-js.GoTrueMFAApi.challengeAndVerify","notes":"Creates and verifies a challenge for a factor.\n- An [enrolled factor](/docs/reference/kotlin/auth-mfa-enroll) is required before invoking `createChallengeAndVerify()`.\n- Executes [`mfa.createChallenge()`](/docs/reference/kotlin/auth-mfa-challenge) and [`mfa.verifyChallenge()`](/docs/reference/kotlin/auth-mfa-verify) in a single step.\n","examples":[{"id":"challenge-and-verify","name":"Create and verify a challenge for a factor","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.mfa.createChallengeAndVerify(\n    factorId = \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n    code = \"123456\",\n    saveSession = true // this is set to true by default, but you can set it to false if you want to handle the session yourself\n)\n```\n"}]},{"id":"mfa-unenroll","title":"mfa.unenroll()","$ref":"@supabase/gotrue-js.GoTrueMFAApi.unenroll","notes":"Unenroll removes a MFA factor. A user has to have an `AAL2` authentication level in order to unenroll a verified factor.\n","examples":[{"id":"unenroll-a-factor","name":"Unenroll a factor","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.mfa.unenroll(factorId = \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n```\n"}]},{"id":"mfa-get-authenticator-assurance-level","title":"mfa.getAuthenticatorAssuranceLevel()","$ref":"@supabase/gotrue-js.GoTrueMFAApi.getAuthenticatorAssuranceLevel","notes":"- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next` field will return `AuthenticatorAssuranceLevel.AAL2`, else, it will return `AuthenticatorAssuranceLevel.AAL1`.\n","examples":[{"id":"get-aal","name":"Get the AAL details of the current session","isSpotlight":true,"code":"```kotlin\nval (current, next) = supabase.gotrue.mfa.getAuthenticatorAssuranceLevel()\n```\n"},{"id":"aal-enabled","name":"Check whether the user has at least one verified factor","isSpotlight":true,"code":"```kotlin\nval enabled = supabase.gotrue.mfa.isMfaEnabled\n//flow variant, automatically emitting new values on session changes\nval enabledFlow = supabase.gotrue.mfa.isMfaEnabledFlow\n```\n"},{"id":"aal-enabled-for-current-session","name":"Check whether the user is logged in using AAL2","isSpotlight":true,"code":"```kotlin\nval loggedInUsingMfa = supabase.gotrue.mfa.loggedInUsingMfa\n//flow variant, automatically emitting new values on session changes\nval loggedInUsingMfaFlow = supabase.gotrue.mfa.loggedInUsingMfaFlow\n```\n"}]},{"id":"admin-api","title":"Overview","notes":"- Any method under the `supabase.gotrue.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n","examples":[{"id":"create-auth-admin-client","name":"Create server-side auth client","isSpotlight":true,"code":"```kotlin\nval supabase = createSupabaseClient(\n    supabaseUrl = \"https://id.supabase.co\",\n    supabaseKey = \"supabaseKey\"\n) {\n    install(GoTrue) {\n        autoLoadFromStorage = false\n        alwaysAutoRefresh = false\n    }\n    // install other plugins (these will use the service role key)\n}\nsupabase.gotrue.importAuthToken(\"service_role\")\n\n// Access auth admin api\nval adminGoTrueClient = supabase.gotrue.admin\n```\n"}]},{"id":"get-user-by-id","title":"getUserById()","$ref":"@supabase/gotrue-js.GoTrueAdminApi.getUserById","notes":"Fetches the user object from the database based on the user's id.\n- The `retrieveUserById()` method requires the user's id which maps to the `auth.users.id` column.\n","examples":[{"id":"fetch-the-user-object-using-the-access-token-jwt","name":"Fetch the user object using the access_token jwt","isSpotlight":true,"code":"```kotlin\nval user = supabase.gotrue.admin.retrieveUserById(uid = \"f2a0b0a0-6b1a-4b7a-8f1a-4b7a6b1a8f1a\")\n```\n"}]},{"id":"list-users","title":"listUsers()","$ref":"@supabase/gotrue-js.GoTrueAdminApi.listUsers","notes":"Retrieves a list of users.\n- Defaults to return 50 users per page.\n","examples":[{"id":"get-a-full-list-of-users","name":"Get a page of users","isSpotlight":true,"code":"```kotlin\nval users = supabase.gotrue.admin.retrieveUsers()\n```\n"},{"id":"get-paginated-list-of-users","name":"Paginated list of users","isSpotlight":false,"code":"```kotlin\nval users = supabase.gotrue.admin.retrieveUsers(\n    page = 1,\n    perPage = 100\n)\n```\n"}]},{"id":"create-user","title":"createUser()","$ref":"@supabase/gotrue-js.GoTrueAdminApi.createUser","notes":"Creates a new user.\n- To confirm the user's email address or phone number, set `autoConfirm` to true. Both arguments default to false.\n","examples":[{"id":"create-a-new-user-with-email-custom-user-metadata","name":"Create user with email","isSpotlight":true,"code":"```kotlin\nval userWithEmail = supabase.gotrue.admin.createUserWithEmail {\n    email = \"example@email.com\"\n    password = \"secretpassword\"\n    userMetadata {\n        put(\"name\", \"John\")\n    }\n}\n```\n"},{"id":"create-a-new-user-with-phone-custom-user-metadata","name":"Create user with phone","isSpotlight":true,"code":"```kotlin\nval userWithPhone = supabase.gotrue.admin.createUserWithPhone {\n    phoneNumber = \"+49123456789\"\n    password = \"secretpassword\"\n    userMetadata {\n        put(\"name\", \"John\")\n    }\n}\n```\n"},{"id":"auto-confirm-the-users-email","name":"Auto-confirm the user's email","code":"```kotlin\nval userWithEmail = supabase.gotrue.admin.createUserWithEmail {\n    email = \"example@email.com\"\n    password = \"secretpassword\"\n    autoConfirm = true\n}\n```\n"},{"id":"auto-confirm-the-users-phone-number","name":"Auto-confirm the user's phone number","code":"```kotlin\nval userWithPhone = supabase.gotrue.admin.createUserWithPhone {\n    phoneNumber = \"+49123456789\"\n    password = \"secretpassword\"\n    autoConfirm = true\n}\n```\n"}]},{"id":"delete-user","title":"deleteUser()","$ref":"@supabase/gotrue-js.GoTrueAdminApi.deleteUser","notes":"Deletes a user from the database.\n- The `deleteUser()` method requires the user's ID, which maps to the `auth.users.id` column.\n","examples":[{"id":"removes-a-user","name":"Removes a user","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.admin.deleteUser(uid = \"uid\")\n```\n"}]},{"id":"invite-user-by-email","title":"inviteUserByEmail()","$ref":"@supabase/gotrue-js.GoTrueAdminApi.inviteUserByEmail","notes":"Sends an invite link to the user's email address.\n","examples":[{"id":"invite-a-user","name":"Invite a user","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.admin.inviteUserByEmail(\n    email = \"example@email.com\",\n    //optional:\n    redirectTo = \"https://example.com/redirect\",\n    data = buildJsonObject {\n        put(\"custom\", \"value\")\n    }\n)\n```\n"}]},{"id":"generate-link","title":"generateLink()","$ref":"@supabase/gotrue-js.GoTrueAdminApi.generateLink","notes":"Generates email links and OTPs to be sent via a custom email provider.\n","examples":[{"id":"generate-a-signup-link","name":"Generate a signup link","isSpotlight":true,"code":"```kotlin\nval (url, user) = supabase.gotrue.admin.generateLinkFor(LinkType.Signup) {\n    email = \"example@email.com\"\n    password = \"secretpassword\"\n}\n```\n"},{"id":"generate-an-invite-link","name":"Generate an invite link","isSpotlight":false,"code":"```kotlin\nval (url, user) = supabase.gotrue.admin.generateLinkFor(LinkType.Invite) {\n    email = \"example@email.com\"\n}\n```\n"},{"id":"generate-a-magic-link","name":"Generate a magic link","isSpotlight":false,"code":"```kotlin\nval (url, user) = supabase.gotrue.admin.generateLinkFor(LinkType.MagicLink) {\n    email = \"example@email.com\"\n}\n```\n"},{"id":"generate-a-recovery-link","name":"Generate a recovery link","isSpotlight":false,"code":"```kotlin\nval (url, user) = supabase.gotrue.admin.generateLinkFor(LinkType.Recovery) {\n    email = \"example@email.com\"\n}\n```\n"},{"id":"generate-links-to-change-current-email-address","name":"Generate links to change current email address","isSpotlight":false,"code":"```kotlin\n// generate an email change link to be sent to the current email address\nval (url, user) = supabase.gotrue.admin.generateLinkFor(LinkType.EmailChangeCurrent) {\n    email = \"example@email.com\"\n    newEmail = \"newEmail@email.com\"\n}\n\n// generate an email change link to be sent to the new email address\nval (url, user) = supabase.gotrue.admin.generateLinkFor(LinkType.EmailChangeNew) {\n    email = \"example@email.com\"\n    newEmail = \"newEmail@email.com\"\n}\n```\n"}]},{"id":"update-user-by-id","title":"updateUserById()","$ref":"@supabase/gotrue-js.GoTrueAdminApi.updateUserById","notes":"Updates the user data.\n","examples":[{"id":"updates-a-users-email","name":"Updates a user's email","isSpotlight":false,"code":"```kotlin\nsupabase.gotrue.admin.updateUserById(uid = \"id\") {\n    email = \"example@email.com\"\n}\n```\n"},{"id":"updates-a-users-password","name":"Updates a user's password","isSpotlight":false,"code":"```js\nsupabase.gotrue.admin.updateUserById(uid = \"id\") {\n    password = \"password\"\n}\n```\n"},{"id":"updates-a-users-metadata","name":"Updates a user's metadata","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.admin.updateUserById(uid = \"id\") {\n    userMetadata = buildJsonObject {\n        put(\"key\", \"value\")\n    }\n}\n```\n"},{"id":"updates-a-users-app-metadata","name":"Updates a user's app_metadata","isSpotlight":false,"code":"```kotlin\nsupabase.gotrue.admin.updateUserById(uid = \"id\") {\n    appMetadata = buildJsonObject {\n        put(\"key\", \"value\")\n    }\n}\n```\n"},{"id":"confirms-a-users-email-address","name":"Confirms a user's email address","isSpotlight":false,"code":"```kotlin\nsupabase.gotrue.admin.updateUserById(uid = \"id\") {\n    emailConfirm = true\n}\n```\n"},{"id":"confirms-a-users-phone-number","name":"Confirms a user's phone number","isSpotlight":false,"code":"```kotlin\nsupabase.gotrue.admin.updateUserById(uid = \"id\") {\n    phoneConfirm = true\n}\n```\n"}]},{"id":"mfa-list-factors","title":"mfa.listFactors()","notes":"Lists all factors associated to a user.\n","$ref":"@supabase/gotrue-js.GoTrueAdminMFAApi.listFactors","examples":[{"id":"list-factors","name":"List all factors for a user","isSpotlight":true,"code":"```kotlin\nconst factors = supabase.gotrue.admin.retrieveFactors(uid = \"id\")\n```\n"}]},{"id":"mfa-delete-factor","title":"mfa.deleteFactor()","$ref":"@supabase/gotrue-js.GoTrueAdminMFAApi.deleteFactor","notes":"Deletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n","examples":[{"id":"delete-factor","name":"Delete a factor for a user","isSpotlight":true,"code":"```kotlin\nsupabase.gotrue.admin.deleteFactor(uid = \"id\", factorId = \"factor_id\")\n```\n"}]},{"id":"invoke","title":"invoke()","description":"Invokes a Supabase Function. See the [guide](/docs/guides/functions) for details on writing Functions.\n- When invoking a function with parameters, you have to provide a [serializable value](/docs/reference/kotlin/installing#serialization) in the function parameter.\n","notes":"- Requires an Authorization header.\n","examples":[{"id":"basic-invocation","name":"Basic invocation","isSpotlight":true,"code":"```kotlin\nsupabase.functions.invoke(\"function_name\")\n```\n"},{"id":"basic-invocation-with-body","name":"Basic invocation with body","isSpotlight":true,"code":"```kotlin\nsupabase.functions.invoke(\n  function = \"function_name\",\n  body = buildJsonObject {\n      put(\"foo\", \"bar\")\n  },\n  headers = Headers.build {\n      append(HttpHeaders.ContentType, \"application/json\")\n  }\n)\n```\n"},{"id":"reuse-function","name":"Reuse function by saving it to a variable","isSpotlight":true,"code":"```kotlin\nval function = supabase.functions.buildEdgeFunction(\n  function = \"function\",\n  headers = Headers.build {\n      /*Default headers*/\n      //when you are sending a body you may want to add this header:\n      append(HttpHeaders.ContentType, \"application/json\")\n    }\n  )\n//invoke it:\nfunction()\n//invoke it with a body:\nfunction(body)\n//invoke it with custom request options:\nfunction(body) {\n    header(\"Header\", \"Value\")\n    parameter(\"Key\", \"Value\") //url parameter\n}\n```\n"}]},{"id":"subscribe","description":"Subscribe to realtime changes in your database.\n","title":"on().subscribe()","notes":"- Realtime is disabled by default for new Projects for better database performance and security. You can turn it on by [managing replication](/docs/guides/database/api#managing-realtime).\n- If you want to receive the \"previous\" data for updates and deletes, you will need to set `REPLICA IDENTITY` to `FULL`, like this: `ALTER TABLE your_table REPLICA IDENTITY FULL;`\n- When using a method with a generic type like `track`, `broadcast` or `broadcastFlow`, you have to provide a [serializable class](/docs/reference/kotlin/installing#serialization) as the type parameter.\n","examples":[{"id":"connect-to-realtime-client","name":"Connect to Realtime","isSpotlight":true,"code":"```kotlin\nsupabase.realtime.connect()\n```\n"},{"id":"liste-to-broadcasts","name":"Listen to broadcasts","code":"```kotlin\n@Serializable\ndata class Message(val content: String, val sender: String)\n\nval channel = supabase.realtime.createChannel(\"channelId\") {\n    //optional config\n}\n\nval broadcastFlow = channel.broadcastFlow<Message>(event = \"message\")\n\n//in a new coroutine (or use Flow.onEach().launchIn(scope)):\nbroadcastFlow.collect { //it: Message\n    println(it)\n}\n\nsupabase.realtime.connect()\nchannel.join(blockUntilJoined = true)\n\nchannel.broadcast(event = \"message\", Message(\"I joined!\", \"John\"))\n```\n"},{"id":"listen-to-presence-updates","name":"Listen to presence updates","code":"```kotlin\n@Serializable\ndata class PresenceState(val username: String)\n\nval connectedUsers = mutableSetOf<PresenceState>()\nval channel = supabase.realtime.createChannel(\"channelId\") {\n    //optional config\n}\n\nval presenceChangeFlow = channel.presenceChangeFlow()\n\n//in a new coroutine (or use Flow.onEach().launchIn(scope)):\npresenceChangeFlow.collect {\n    connectedUsers += it.decodeJoinsAs<PresenceState>()\n    connectedUsers -= it.decodeLeavesAs<PresenceState>()\n}\n\nsupabase.realtime.connect()\nchannel.join(blockUntilJoined = true)\n//send own state\nchannel.track(PresenceState(username = \"John\"))\n"},{"id":"listen-to-all-database-changes","name":"Listen to all database changes","code":"```kotlin\nval channel = supabase.realtime.createChannel(\"channelId\") {\n    //optional config\n}\nval changeFlow = channel.postgresChangeFlow<PostgresAction>(schema = \"public\")\n\n//in a new coroutine (or use Flow.onEach().launchIn(scope)):\nchangeFlow.collect {\n    when(it) {\n        is PostgresAction.Delete -> println(\"Deleted: ${it.oldRecord}\")\n        is PostgresAction.Insert -> println(\"Inserted: ${it.record}\")\n        is PostgresAction.Select -> println(\"Selected: ${it.record}\")\n        is PostgresAction.Update -> println(\"Updated: ${it.oldRecord} with ${it.record}\")\n    }\n}\n\nsupabase.realtime.connect()\nchannel.join()\n```\n"},{"id":"listen-to-a-specific-table","name":"Listen to a specific table","code":"```kotlin\nval channel = supabase.realtime.createChannel(\"channelId\") {\n    //optional config\n}\nval changeFlow = channel.postgresChangeFlow<PostgresAction>(schema = \"public\") {\n    table = \"users\"\n}\n\n//in a new coroutine (or use Flow.onEach().launchIn(scope)):\nchangeFlow.collect {\n    when(it) {\n        is PostgresAction.Delete -> println(\"Deleted: ${it.oldRecord}\")\n        is PostgresAction.Insert -> println(\"Inserted: ${it.record}\")\n        is PostgresAction.Select -> println(\"Selected: ${it.record}\")\n        is PostgresAction.Update -> println(\"Updated: ${it.oldRecord} with ${it.record}\")\n    }\n}\n\nsupabase.realtime.connect()\nchannel.join()\n```\n"},{"id":"listen-to-inserts","name":"Listen to inserts","code":"```kotlin\nval channel = supabase.realtime.createChannel(\"channelId\") {\n    //optional config\n}\nval changeFlow = channel.postgresChangeFlow<PostgresAction.Insert>(schema = \"public\") {\n    table = \"users\"\n}\n\n//in a new coroutine (or use Flow.onEach().launchIn(scope)):\nchangeFlow.collect {\n    println(it.record)\n}\n\nsupabase.realtime.connect()\nchannel.join()\n```\n"},{"id":"listen-to-updates","name":"Listen to updates","description":"By default, Supabase will send only the updated record. If you want to receive the previous values as well you can\nenable full replication for the table you are listening too:\n\n```sql\nalter table \"your_table\" replica identity full;\n```\n","code":"```kotlin\nval channel = supabase.realtime.createChannel(\"channelId\") {\n    //optional config\n}\nval changeFlow = channel.postgresChangeFlow<PostgresAction.Update>(schema = \"public\") {\n    table = \"users\"\n}\n\n//in a new coroutine (or use Flow.onEach().launchIn(scope)):\nchangeFlow.collect {\n    println(it.record)\n    println(it.oldRecord)\n}\n\nsupabase.realtime.connect()\nchannel.join()\n```\n"},{"id":"listen-to-deletes","name":"Listen to deletes","description":"By default, Supabase does not send deleted records. If you want to receive the deleted record you can\nenable full replication for the table you are listening too:\n\n```sql\nalter table \"your_table\" replica identity full;\n```\n","code":"```kotlin\nval channel = supabase.realtime.createChannel(\"channelId\") {\n    //optional config\n}\nval changeFlow = channel.postgresChangeFlow<PostgresAction.Delete>(schema = \"public\") {\n    table = \"users\"\n}\n\n//in a new coroutine (or use Flow.onEach().launchIn(scope)):\nchangeFlow.collect {\n    println(it.oldRecord)\n}\n\nsupabase.realtime.connect()\nchannel.join()\n```\n"},{"id":"listening-to-row-level-changes","name":"Listen to row level changes","description":"You can listen to individual rows using the format `{table}:{col}=eq.{val}` - where `{col}` is the column name, and `{val}` is the value which you want to match.","code":"```kotlin\nval channel = supabase.realtime.createChannel(\"channelId\") {\n   //optional config\n}\nval changeFlow = channel.postgresChangeFlow<PostgresAction.Delete>(schema = \"public\") {\n    table = \"users\"\n    filter = \"id=eq.1\"\n}\n\n//in a new coroutine:\nchangeFlow.collect {\n    println(it.oldRecord)\n}\n\nsupabase.realtime.connect()\nchannel.join()\n```\n"}]},{"id":"remove-channel","description":"Unsubscribes and removes Realtime channel from Realtime client.\n","title":"removeChannel()","notes":"- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes.\n- Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n","examples":[{"id":"removes-a-channel","name":"Remove a channel","isSpotlight":true,"code":"```kotlin\nval channel = supabase.realtime.createChannel(\"channelId\") {\n    //optional config\n}\n//...\nsupabase.realtime.removeChannel(channel)\n```\n"},{"id":"unsubscribe-channel","name":"Unsubscribe from a channel","isSpotlight":true,"code":"```kotlin\nval channel = supabase.realtime.createChannel(\"channelId\") {\n    //optional config\n}\n//...\nchannel.leave()\n```\n"}]},{"id":"remove-all-channels","title":"removeAllChannels()","$ref":"@supabase/supabase-js.index.SupabaseClient.removeAllChannels","notes":"Unsubscribes and removes all Realtime channels from Realtime client.\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n","examples":[{"id":"remove-all-channels","name":"Remove all channels","isSpotlight":true,"code":"```kotlin\nsupabase.realtime.removeAllChannels()\n```\n"}]},{"id":"get-channels","title":"getChannels()","$ref":"@supabase/supabase-js.index.SupabaseClient.getChannels","notes":"Returns all Realtime channels.\n","examples":[{"id":"get-all-channels","name":"Get all channels","isSpotlight":true,"code":"```kotlin\nval channels = supabase.realtime.subscriptions.entries\n```\n"}]},{"id":"list-buckets","title":"listBuckets()","$ref":"@supabase/storage-js.packages/StorageBucketApi.default.listBuckets","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"list-buckets","name":"List buckets","isSpotlight":true,"code":"```kotlin\nval buckets = supabase.storage.retrieveBuckets()\n```\n"}]},{"id":"get-bucket","title":"getBucket()","$ref":"@supabase/storage-js.packages/StorageBucketApi.default.getBucket","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"get-bucket","name":"Get bucket","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage.retrieveBucketById(bucketId = \"avatars\")\n```\n"}]},{"id":"create-bucket","title":"createBucket()","$ref":"@supabase/storage-js.packages/StorageBucketApi.default.createBucket","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"create-bucket","name":"Create bucket","isSpotlight":true,"code":"```kotlin\nsupabase.storage.createBucket(name = \"icons\", id = \"icons\") {\n    public = true\n    fileSizeLimit = 5.megabytes\n}\n```\n"}]},{"id":"update-bucket","title":"updateBucket()","$ref":"@supabase/storage-js.packages/StorageBucketApi.default.updateBucket","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `update`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"update-bucket","name":"Update bucket","isSpotlight":true,"code":"```kotlin\nsupabase.storage.updateBucket(\"cards\") {\n    public = false\n    fileSizeLimit = 20.megabytes\n    allowedMimeTypes(ContentType.Image.PNG, ContentType.Image.JPEG)\n}\n```\n"}]},{"id":"empty-bucket","title":"emptyBucket()","$ref":"@supabase/storage-js.packages/StorageBucketApi.default.emptyBucket","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"empty-bucket","name":"Empty bucket","isSpotlight":true,"code":"```kotlin\nsupabase.storage.emptyBucket(bucketId = \"icons\")\n```\n"}]},{"id":"delete-bucket","title":"deleteBucket()","$ref":"@supabase/storage-js.packages/StorageBucketApi.default.deleteBucket","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"delete-bucket","name":"Delete bucket","isSpotlight":true,"code":"```kotlin\nsupabase.storage.deleteBucket(bucketId = \"icons\")\n```\n"}]},{"id":"from-upload","title":"from.upload()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.upload","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Resumable uploads use a `Disk` cache by default to store the upload urls. You can customize that in the GoTrue config by changing the `resumable.cache` property.\n","examples":[{"id":"upload-file","name":"Upload file","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage[\"avatars\"]\nbucket.upload(\"myIcon.png\", byteArray, upsert = false)\n//on JVM you can use java.io.File\nbucket.upload(\"myIcon.png\", file, upsert = false)\n```\n"},{"id":"upload-file-with-progress","name":"Upload file with progress","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage[\"avatars\"]\nbucket.uploadAsFlow(\"test.png\", byteArrayOf()).collect {\n    when(it) {\n        is UploadStatus.Progress -> println(\"Progress: ${it.totalBytesSend.toFloat() / it.contentLength * 100}%\")\n        is UploadStatus.Success -> println(\"Success\")\n    }\n}\n```\n"},{"id":"create-resumable-upload","name":"Create resumable upload","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage[\"avatars\"]\n//JVM/Android:\nval upload = bucket.resumable.createOrContinueUpload(\"icon.png\", File(\"icon.png\"))\n//Other platforms:\nval upload = bucket.resumable.createOrContinueUpload(data = byteArray, source = \"this is for continuing previous uploads later\", path = \"icon.png\")\nval upload = bucket.resumable.createOrContinueUpload( //Probably better to write an extension function\n    channel = { offset -> /* create ByteReadChannel and seek to offset */ },\n    source = \"this is for continuing previous uploads later\",\n    size = dataSize,\n    path = \"icon.png\"\n)\n```\n"},{"id":"start-resumable-upload","name":"Start and resumable upload","isSpotlight":true,"code":"```kotlin\nupload.startOrResumeUploading()\n```\n"},{"id":"pause-resumable-upload","name":"Pause resumable upload","code":"```kotlin\nupload.pause()\n```\n"},{"id":"cancel-resumable-upload","name":"Cancel resumable upload","code":"```kotlin\nupload.cancel()\n```\n","description":"This will also remove the upload url from the cache\n"},{"id":"listen-to-upload-state","name":"Listen to the resumable upload state","code":"```kotlin\nupload.stateFlow.collect {\n    println(\"Progress: ${it.progress * 100}%\")\n    println(\"Paused: ${it.paused}\")\n    println(\"Is done: ${it.isDone}\")\n}\n```\n"},{"id":"continue-previous-upload","name":"Continue previous uploads","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage[\"avatars\"]\n\n//only on JVM/Android:\nbucket.resumable.continuePreviousFileUploads()\n    .map { it.await() } //await all uploads. This just makes sure the uploads have an update-to-date url. You can also do this in parallel\n    .forEach { upload ->\n        upload.startOrResumeUploading()\n    }\n\n//on other platforms you may have to continue uploads from the source (Probably better to write an extension function):\nbucket.resumable.continuePreviousUploads { source, offset ->\n    //create ByteReadChannel from source and seek to offset\n}\n    .map { it.await() } //await all uploads. This just makes sure the uploads have an update-to-date url. You can also do this in parallel\n    .forEach { upload ->\n        upload.startOrResumeUploading()\n    }\n```\n"}]},{"id":"from-update","title":"from.update()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.update","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"update-file","name":"Update file","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage[\"avatars\"]\nbucket.update(\"myIcon.png\", byteArray, upsert = false)\n//on JVM you can use java.io.File\nbucket.update(\"myIcon.png\", file, upsert = false)\n```\n"}]},{"id":"from-move","title":"from.move()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.move","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"move-file","name":"Move file","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage[\"avatars\"]\nbucket.move(\"icon1.png\", \"icon2.png\")\n```\n"}]},{"id":"from-copy","title":"from.copy()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.copy","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"copy-file","name":"Copy file","isSpotlight":true,"code":"```kotlin\nsupabase.storage[\"test\"].copy(from = \"avatar.png\", to = \"avatar2.png\")\n```\n"}]},{"id":"from-create-signed-url","title":"from.createSignedUrl()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.createSignedUrl","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"create-signed-url","name":"Create Signed URL","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage[\"avatars\"]\nval url = bucket.createSignedUrl(path = \"icon.png\", expiresIn = 3.minutes)\n```\n"},{"id":"create-signed-url-with-transformation","name":"Create Signed URL with transformation","code":"```kotlin\nval bucket = supabase.storage[\"avatars\"]\nval url = bucket.createSignedUrl(path = \"icon.png\", expiresIn = 3.minutes) {\n    size(100, 100)\n    fill()\n    quality = 80\n}\n```\n"}]},{"id":"from-create-signed-urls","title":"from.createSignedUrls()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"create-signed-urls","name":"Create Signed URLs","isSpotlight":true,"code":"```kotlin\nval urls = supabase.storage[\"avatars\"].createSignedUrls(20.minutes, \"avata1.jpg\", \"avatar2.jpg\")\n```\n"}]},{"id":"from-create-signed-upload-url","title":"from.createSignedUploadUrl()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.createSignedUploadUrl","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"create-signed-upload-url","name":"Create Signed Upload URL","isSpotlight":true,"code":"```kotlin\nval url = supabase.storage[\"avatars\"].createSignedUploadUrl(\"avatar.png\")\n```\n"}]},{"id":"from-upload-to-signed-url","title":"from.uploadToSignedUrl()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.uploadToSignedUrl","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"upload-to-signed-url","name":"Upload to a signed URL","isSpotlight":true,"code":"```kotlin\nsupabase.storage[\"avatars\"].uploadToSignedUrl(path = \"avatar.jpg\", token = \"token-from-createSignedUploadUrl\", data = bytes)\n//or on JVM:\nsupabase.storage[\"avatars\"].uploadToSignedUrl(path = \"avatar.jpg\", token = \"token-from-createSignedUploadUrl\", file = File(\"avatar.jpg\"))\n```\n"}]},{"id":"from-get-public-url","title":"from.getPublicUrl()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.getPublicUrl","notes":"- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/kotlin/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"returns-the-url-for-an-asset-in-a-public-bucket","name":"Returns the URL for an asset in a public bucket","isSpotlight":true,"code":"```kotlin\nval url = supabase.storage[\"public-bucket\"].publicUrl(\"folder/avatar1.png\")\n```\n"},{"id":"transform-asset-in-public-bucket","name":"Returns the URL for an asset in a public bucket with transformations","isSpotlight":true,"code":"```kotlin\nval url = supabase.storage[\"public-bucket\"].publicRenderUrl(\"folder/avatar1.png\") {\n    size(100, 100)\n}\n```\n"}]},{"id":"from-download","title":"from.download()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.download","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"download-file-authenticated","name":"Download file from non-public bucket","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage[\"avatars\"]\nval bytes = bucket.downloadAuthenticated(\"test.png\")\n//or on JVM:\nbucket.downloadAuthenticatedTo(\"test.png\", File(\"test.png\"))\n```\n"},{"id":"download-file-public","name":"Download file from public bucket","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage[\"avatars\"]\nval bytes = bucket.downloadPublic(\"test.png\")\n//or on JVM:\nbucket.downloadPublicTo(\"test.png\", File(\"test.png\"))\n```\n"},{"id":"download-with-transformation","name":"Download file with transformation","code":"```kotlin\nval bucket = supabase.storage[\"avatars\"]\nval bytes = bucket.downloadPublic(\"test.png\") {\n    size(100, 100)\n    fill()\n    quality = 100\n}\n//or on JVM:\nbucket.downloadPublicTo(\"test.png\", File(\"test.png\")) {\n    size(100, 100)\n    fill()\n    quality = 100\n}\n```\n"},{"id":"download-with-progress","name":"Download file with progress","code":"```kotlin\nval bucket = supabase.storage[\"avatars\"]\nbucket.downloadAuthenticatedAsFlow(\"icon.png\").collect {\n    when(it) {\n        is DownloadStatus.ByteData -> println(\"Downloaded ${it.data.size} bytes\")\n        is DownloadStatus.Progress -> println(\"Downloaded ${it.totalBytesReceived.toFloat() / it.contentLength * 100}%\")\n        DownloadStatus.Success -> println(\"Downloaded successfully\")\n    }\n}\n//or on JVM:\nbucket.downloadAuthenticatedToAsFlow(\"icon.png\", File(\"icon.png\")).collect {\n    when(it) {\n        is DownloadStatus.Progress -> println(\"Downloaded ${it.totalBytesReceived.toFloat() / it.contentLength * 100}%\")\n        DownloadStatus.Success -> println(\"Downloaded successfully\")\n        else -> {} //The ByteData status will never occur as we are writing directly to a file\n    }\n}\n```\n"}]},{"id":"from-remove","title":"from.remove()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.remove","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"delete-file","name":"Delete file","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage[\"avatars\"]\nbucket.delete(\"test.png\", \"test2.png\")\n```\n"}]},{"id":"from-list","title":"from.list()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.list","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"list-files-in-a-bucket","name":"List files in a bucket","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage[\"avatars\"]\nval files = bucket.list()\n```\n"}]}]