[{"id":"initializing","description":"You can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality\nand is the easiest way to interact with everything we offer within the Supabase ecosystem.\n","params":[{"name":"supabase_url","isOptional":false,"type":"string","description":"The unique Supabase URL which is supplied when you create a new project in your project dashboard."},{"name":"supabase_key","isOptional":false,"type":"string","description":"The unique Supabase Key which is supplied when you create a new project in your project dashboard."},{"name":"options","isOptional":true,"type":"ClientOptions","description":"Options to change the Auth behaviors.","subContent":[{"name":"schema","isOptional":true,"type":"string","description":"The Postgres schema which your tables belong to. Must be on the list of exposed schemas in Supabase. Defaults to 'public'."},{"name":"headers","isOptional":true,"type":"dictionary","description":"Optional headers for initializing the client."},{"name":"auto_refresh_token","isOptional":true,"type":"bool","description":"Whether to automatically refresh the token when it expires. Defaults to `true`."},{"name":"persist_session","isOptional":true,"type":"bool","description":"Whether to persist a logged in session to storage."},{"name":"storage","isOptional":true,"type":"SyncSupportedStorage","description":"A storage provider. Used to store the logged in session."},{"name":"realtime","isOptional":true,"type":"string","description":"Options passed to the realtime-py instance."},{"name":"postgrest_client_timeout","isOptional":true,"type":"number, float, Timeout","description":"Timeout passed to the SyncPostgrestClient instance."},{"name":"storage_client_timeout","isOptional":true,"type":"number, float, Timeout","description":"Timeout passed to the SyncStorageClient instance."},{"name":"flow_type","isOptional":true,"type":"AuthFlowType","description":"flow type to use for authentication."}]}],"examples":[{"id":"create-client","name":"create_client()","code":"```python\nimport os\nfrom supabase import create_client, Client\n\nurl: str = os.environ.get(\"SUPABASE_URL\")\nkey: str = os.environ.get(\"SUPABASE_KEY\")\nsupabase: Client = create_client(url, key)\n```\n"},{"id":"with-timeout-option","name":"With timeout option","code":"```python\nimport os\nfrom supabase import create_client, Client\nfrom supabase.client import ClientOptions\n\nurl: str = os.environ.get(\"SUPABASE_URL\")\nkey: str = os.environ.get(\"SUPABASE_KEY\")\nsupabase: Client = create_client(\n    url,\n    key,\n    options=ClientOptions(\n        postgrest_client_timeout=10,\n        storage_client_timeout=10,\n        schema=\"public\",\n    )\n)\n```\n"}]},{"id":"auth-api","title":"Overview","notes":"- The auth methods can be accessed via the `supabase.auth` namespace.\n- By default, the supabase client sets `persist_session` to true and attempts to store the session in memory.\n- Any email links and one-time passwords (OTPs) sent have a default expiry of 24 hours. We have the following [rate limits](/docs/guides/platform/going-into-prod#auth-rate-limits) in place to guard against brute force attacks.\n- The expiry of an access token can be set in the \"JWT expiry limit\" field in [your project's auth settings](/dashboard/project/_/settings/auth). A refresh token never expires and can only be used once.\n"},{"id":"sign-up","title":"sign_up()","params":[{"name":"credentials","isOptional":false,"type":"SignUpWithPasswordCredentials","subContent":[{"name":"email","isOptional":true,"type":"string","description":"One of `email` or `phone` must be provided."},{"name":"phone","isOptional":true,"type":"string","description":"One of `email` or `phone` must be provided."},{"name":"password","type":"string"},{"name":"options","isOptional":true,"type":"object","subContent":[{"name":"email_redirect_to","isOptional":true,"type":"string","description":"Only for email signups. The redirect URL embedded in the email link. Must be a configured redirect URL for your Supabase instance.\n"},{"name":"data","isOptional":true,"type":"object","description":"A custom data object to store additional user metadata.\n"},{"name":"captcha_token","isOptional":true,"type":"string"},{"name":"channel","isOptional":true,"type":"sms | whatsapp","description":"The channel to use for sending messages. Only for phone signups.\n"}]}]}],"notes":"- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If sign_up() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser).\n","examples":[{"id":"signup","name":"Sign up with an email and password","code":"```python\nresponse = supabase.auth.sign_up(\n    {\n        \"email\": \"email@example.com\",\n        \"password\": \"password\",\n    }\n)\n```\n","response":"```json\n{\n  \"user\": {\n    \"id\": \"11111111-1111-1111-1111-111111111111\",\n    \"app_metadata\": {\n      \"provider\": \"email\",\n      \"providers\": [\n        \"email\"\n      ]\n    },\n    \"user_metadata\": {},\n    \"aud\": \"authenticated\",\n    \"confirmation_sent_at\": null,\n    \"recovery_sent_at\": null,\n    \"email_change_sent_at\": null,\n    \"new_email\": null,\n    \"invited_at\": null,\n    \"action_link\": null,\n    \"email\": \"email@example.com\",\n    \"phone\": \"\",\n    \"created_at\": \"2024-06-17T00:19:25.760110Z\",\n    \"confirmed_at\": null,\n    \"email_confirmed_at\": \"2024-06-17T00:19:25.779181Z\",\n    \"phone_confirmed_at\": null,\n    \"last_sign_in_at\": \"2024-06-17T00:19:25.785489Z\",\n    \"role\": \"authenticated\",\n    \"updated_at\": \"2024-06-17T00:19:25.794650Z\",\n    \"identities\": [\n      {\n        \"id\": \"11111111-1111-1111-1111-111111111111\",\n        \"user_id\": \"11111111-1111-1111-1111-111111111111\",\n        \"identity_data\": {\n          \"email\": \"email@example.com\",\n          \"sub\": \"11111111-1111-1111-1111-111111111111\"\n        },\n        \"provider\": \"email\",\n        \"created_at\": \"2024-06-17T00:19:25.774522Z\",\n        \"last_sign_in_at\": \"2024-06-17T00:19:25.774498Z\",\n        \"updated_at\": \"2024-06-17T00:19:25.774522Z\"\n      }\n    ],\n    \"factors\": null\n  },\n  \"session\": {\n    \"provider_token\": null,\n    \"provider_refresh_token\": null,\n    \"access_token\": \"<ACCESS_TOKEN>\",\n    \"refresh_token\": \"<REFRESH_TOKEN>\",\n    \"expires_in\": 3600,\n    \"expires_at\": 1700000000,\n    \"token_type\": \"bearer\",\n    \"user\": {\n      \"id\": \"11111111-1111-1111-1111-111111111111\",\n      \"app_metadata\": {\n        \"provider\": \"email\",\n        \"providers\": [\n          \"email\"\n        ]\n      },\n      \"user_metadata\": {},\n      \"aud\": \"authenticated\",\n      \"confirmation_sent_at\": null,\n      \"recovery_sent_at\": null,\n      \"email_change_sent_at\": null,\n      \"new_email\": null,\n      \"invited_at\": null,\n      \"action_link\": null,\n      \"email\": \"email@example.com\",\n      \"phone\": \"\",\n      \"created_at\": \"2024-06-17T00:19:25.760110Z\",\n      \"confirmed_at\": null,\n      \"email_confirmed_at\": \"2024-06-17T00:19:25.779181Z\",\n      \"phone_confirmed_at\": null,\n      \"last_sign_in_at\": \"2024-06-17T00:19:25.785489Z\",\n      \"role\": \"authenticated\",\n      \"updated_at\": \"2024-06-17T00:19:25.794650Z\",\n      \"identities\": [\n        {\n          \"id\": \"11111111-1111-1111-1111-111111111111\",\n          \"user_id\": \"11111111-1111-1111-1111-111111111111\",\n          \"identity_data\": {\n            \"email\": \"email@example.com\",\n            \"sub\": \"11111111-1111-1111-1111-111111111111\"\n          },\n          \"provider\": \"email\",\n          \"created_at\": \"2024-06-17T00:19:25.774522Z\",\n          \"last_sign_in_at\": \"2024-06-17T00:19:25.774498Z\",\n          \"updated_at\": \"2024-06-17T00:19:25.774522Z\"\n        }\n      ],\n      \"factors\": null\n    }\n  }\n}\n```\n"},{"id":"sign-up-phone","name":"Sign up with a phone number and password (SMS)","isSpotlight":true,"code":"```python\nresponse = supabase.auth.sign_up(\n    {\n        \"phone\": \"123456789\",\n        \"password\": \"password\",\n    }\n)\n```\n"},{"id":"sign-up-phone-whatsapp","name":"Sign up with a phone number and password (whatsapp)","isSpotlight":true,"description":"The user will be sent a WhatsApp message which contains a OTP. By default, a given user can only request a OTP once every 60 seconds. Note that a user will need to have a valid WhatsApp account that is linked to Twilio in order to use this feature.\n","code":"```python\nresponse = supabase.auth.sign_up(\n    {\n        \"phone\": \"123456789\",\n        \"password\": \"password\",\n        \"options\": {\"channel\": \"whatsapp\"},\n    }\n)\n```\n"},{"id":"sign-up-with-additional-user-metadata","name":"Sign up with additional user metadata","code":"```python\nresponse = supabase.auth.sign_up(\n    {\n        \"email\": \"email@example.com\",\n        \"password\": \"password\",\n        \"options\": {\"data\": {\"first_name\": \"John\", \"age\": 27}},\n    }\n)\n```\n"},{"id":"sign-up-with-redirect","name":"Sign up with a redirect URL","description":"- See [redirect URLs and wildcards](/docs/guides/auth/redirect-urls) to add additional redirect URLs to your project.\n","code":"```python\nresponse = supabase.auth.sign_up(\n    {\n        \"email\": \"hello1@example.com\",\n        \"password\": \"password\",\n        \"options\": {\n            \"email_redirect_to\": \"https://example.com/welcome\",\n        },\n    }\n)\n```\n"}]},{"id":"sign-in-anonymously","title":"sign_in_anonymously()","params":[{"name":"credentials","isOptional":false,"type":"SignInAnonymouslyCredentials","subContent":[{"name":"options","isOptional":true,"type":"object","subContent":[{"name":"data","isOptional":true,"type":"object","description":"A custom data object to store the user's metadata. This maps to the `auth.users.raw_user_meta_data` column. The `data` should be a JSON object that includes user-specific info, such as their first and last name."},{"name":"captcha_token","isOptional":true,"type":"string","description":"Verification token received when the user completes the captcha on the site."}]}]}],"notes":"- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n","examples":[{"id":"sign-in-anonymously","name":"Create an anonymous user","isSpotlight":true,"code":"```python\nresponse = supabase.auth.sign_in_anonymously(\n    {\"options\": {\"captcha_token\": \"\"}}\n)\n```\n","response":"```json\n{\n  \"user\": {\n    \"id\": \"11111111-1111-1111-1111-111111111111\",\n    \"app_metadata\": {},\n    \"user_metadata\": {},\n    \"aud\": \"authenticated\",\n    \"confirmation_sent_at\": null,\n    \"recovery_sent_at\": null,\n    \"email_change_sent_at\": null,\n    \"new_email\": null,\n    \"invited_at\": null,\n    \"action_link\": null,\n    \"email\": \"\",\n    \"phone\": \"\",\n    \"created_at\": \"2024-06-25T19:57:25.870777Z\",\n    \"confirmed_at\": null,\n    \"email_confirmed_at\": null,\n    \"phone_confirmed_at\": null,\n    \"last_sign_in_at\": \"2024-06-25T19:57:25.878874Z\",\n    \"role\": \"authenticated\",\n    \"updated_at\": \"2024-06-25T19:57:25.880971Z\",\n    \"identities\": [],\n    \"factors\": null,\n    \"is_anonymous\": true\n  },\n  \"session\": {\n    \"provider_token\": null,\n    \"provider_refresh_token\": null,\n    \"access_token\": \"<ACCESS_TOKEN>\",\n    \"refresh_token\": \"<REFRESH_TOKEN>\",\n    \"expires_in\": 3600,\n    \"expires_at\": 1719349045,\n    \"token_type\": \"bearer\",\n    \"user\": {\n      \"id\": \"11111111-1111-1111-1111-111111111111\",\n      \"app_metadata\": {},\n      \"user_metadata\": {},\n      \"aud\": \"authenticated\",\n      \"confirmation_sent_at\": null,\n      \"recovery_sent_at\": null,\n      \"email_change_sent_at\": null,\n      \"new_email\": null,\n      \"invited_at\": null,\n      \"action_link\": null,\n      \"email\": \"\",\n      \"phone\": \"\",\n      \"created_at\": \"2024-06-25T19:57:25.870777Z\",\n      \"confirmed_at\": null,\n      \"email_confirmed_at\": null,\n      \"phone_confirmed_at\": null,\n      \"last_sign_in_at\": \"2024-06-25T19:57:25.878874Z\",\n      \"role\": \"authenticated\",\n      \"updated_at\": \"2024-06-25T19:57:25.880971Z\",\n      \"identities\": [],\n      \"factors\": null,\n      \"is_anonymous\": true\n    }\n  }\n}\n```\n"},{"id":"sign-in-anonymously-with-user-metadata","name":"Create an anonymous user with custom user metadata","isSpotlight":false,"code":"```python\nresponse = supabase.auth.sign_in_anonymously(\n    {\"options\": {\"data\": {}}}\n)\n```\n"}]},{"id":"sign-in-with-password","title":"sign_in_with_password","params":[{"name":"credentials","type":"SignInWithPasswordCredentials","subContent":[{"name":"email","isOptional":true,"type":"string","description":"One of `email` or `phone` must be provided."},{"name":"phone","isOptional":true,"type":"string","description":"One of `email` or `phone` must be provided."},{"name":"password","type":"string"},{"name":"options","isOptional":true,"type":"object","subContent":[{"name":"captcha_token","isOptional":true,"type":"string"}]}]}],"notes":"Log in an existing user with an email and password or phone and password.\n- Requires either an email and password or a phone number and password.\n","examples":[{"id":"sign-in-with-email-and-password","name":"Sign in with email and password","isSpotlight":true,"code":"```python\nresponse = supabase.auth.sign_in_with_password(\n    {\n        \"email\": \"email@example.com\",\n        \"password\": \"example-password\",\n    }\n)\n```\n","response":"```json\n{\n  \"user\": {\n    \"id\": \"11111111-1111-1111-1111-111111111111\",\n    \"app_metadata\": {\n      \"provider\": \"email\",\n      \"providers\": [\n        \"email\"\n      ]\n    },\n    \"user_metadata\": {},\n    \"aud\": \"authenticated\",\n    \"confirmation_sent_at\": \"2023-02-19T00:01:51.147035Z\",\n    \"recovery_sent_at\": null,\n    \"email_change_sent_at\": null,\n    \"new_email\": null,\n    \"invited_at\": null,\n    \"action_link\": null,\n    \"email\": \"email@example.com\",\n    \"phone\": \"\",\n    \"created_at\": \"2023-02-19T00:01:51.142802Z\",\n    \"confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n    \"email_confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n    \"phone_confirmed_at\": null,\n    \"last_sign_in_at\": \"2024-06-25T19:50:31.744823Z\",\n    \"role\": \"authenticated\",\n    \"updated_at\": \"2024-06-25T19:50:31.757491Z\",\n    \"identities\": [],\n    \"factors\": null,\n    \"is_anonymous\": false\n  },\n  \"session\": {\n    \"provider_token\": null,\n    \"provider_refresh_token\": null,\n    \"access_token\": \"<ACCESS_TOKEN>\",\n    \"refresh_token\": \"<REFRESH_TOKEN>\",\n    \"expires_in\": 3600,\n    \"expires_at\": 1719348631,\n    \"token_type\": \"bearer\",\n    \"user\": {\n      \"id\": \"11111111-1111-1111-1111-111111111111\",\n      \"app_metadata\": {\n        \"provider\": \"email\",\n        \"providers\": [\n          \"email\"\n        ]\n      },\n      \"user_metadata\": {},\n      \"aud\": \"authenticated\",\n      \"confirmation_sent_at\": \"2023-02-19T00:01:51.147035Z\",\n      \"recovery_sent_at\": null,\n      \"email_change_sent_at\": null,\n      \"new_email\": null,\n      \"invited_at\": null,\n      \"action_link\": null,\n      \"email\": \"email@example.com\",\n      \"phone\": \"\",\n      \"created_at\": \"2023-02-19T00:01:51.142802Z\",\n      \"confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n      \"email_confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n      \"phone_confirmed_at\": null,\n      \"last_sign_in_at\": \"2024-06-25T19:50:31.744823Z\",\n      \"role\": \"authenticated\",\n      \"updated_at\": \"2024-06-25T19:50:31.757491Z\",\n      \"identities\": [],\n      \"factors\": null,\n      \"is_anonymous\": false\n    }\n  }\n}\n```\n"},{"id":"sign-in-with-phone-and-password","name":"Sign in with phone and password","isSpotlight":false,"code":"```python\nresponse = supabase.auth.sign_in_with_password(\n    {\n        \"phone\": \"+13334445555\",\n        \"password\": \"some-password\",\n    }\n)\n```\n"}]},{"id":"sign-in-with-otp","title":"sign_in_with_otp","params":[{"name":"credentials","type":"SignInWithPasswordCredentials","subContent":[{"name":"email","isOptional":true,"type":"string","description":"One of `email` or `phone` must be provided."},{"name":"phone","isOptional":true,"type":"string","description":"One of `email` or `phone` must be provided."},{"name":"options","isOptional":true,"type":"object","subContent":[{"name":"email_redirect_to","isOptional":true,"type":"string","description":"Only for email signups. The redirect URL embedded in the email link. Must be a configured redirect URL for your Supabase instance.\n"},{"name":"should_create_user","isOptional":true,"type":"boolean","description":"Whether to create the user if they don't already exist. Defaults to true.\n"},{"name":"data","isOptional":true,"type":"object","description":"A custom data object to store additional user metadata.\n"},{"name":"captcha_token","isOptional":true,"type":"string"},{"name":"channel","isOptional":true,"type":"sms | whatsapp","description":"The channel to use for sending messages. Only for phone signups.\n"}]}]}],"notes":"- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/redirect-urls#use-wildcards-in-redirect-urls) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `{{ .Token }}` instead of `{{ .ConfirmationURL }}`.\n","examples":[{"id":"sign-in-with-email","name":"Sign in with email","isSpotlight":true,"description":"The user will be sent an email which contains either a magiclink or a OTP or both. By default, a given user can only request a OTP once every 60 seconds.","code":"```python\nresponse = supabase.auth.sign_in_with_otp(\n    {\n        \"email\": \"email@example.com\",\n        \"options\": {\n            \"email_redirect_to\": \"https://example.com/welcome\",\n        },\n    }\n)\n```\n","response":"```json\n{\n  \"message_id\": null,\n  \"user\": null,\n  \"session\": null\n}\n```\n"},{"id":"sign-in-with-sms-otp","name":"Sign in with SMS OTP","isSpotlight":false,"description":"The user will be sent a SMS which contains a OTP. By default, a given user can only request a OTP once every 60 seconds.","code":"```python\nresponse = supabase.auth.sign_in_with_otp(\n    {\"phone\": \"+13334445555\"}\n)\n```\n"},{"id":"sign-in-with-whatsapp-otp","name":"Sign in with WhatsApp OTP","isSpotlight":false,"description":"The user will be sent a WhatsApp message which contains a OTP. By default, a given user can only request a OTP once every 60 seconds. Note that a user will need to have a valid WhatsApp account that is linked to Twilio in order to use this feature.","code":"```python\nresponse = supabase.auth.sign_in_with_otp(\n    {\n        \"phone\": \"+13334445555\",\n        \"options\": {\n            \"channel\": \"whatsapp\",\n        },\n    }\n)\n```\n"}]},{"id":"sign-in-with-oauth","title":"sign_in_with_oauth","params":[{"name":"credentials","isOptional":false,"type":"SignInWithOAuthCredentials","subContent":[{"name":"provider","isOptional":false,"type":"boolean","description":"One of the providers supported by GoTrue."},{"name":"options","isOptional":true,"type":"object","subContent":[{"name":"scopes","isOptional":true,"type":"string","description":"A space-separated list of scopes granted to the OAuth application."},{"name":"redirect_to","isOptional":true,"type":"string","description":"A URL to send the user to after they are confirmed."},{"name":"query_params","isOptional":true,"type":"string","description":"An object of query params"}]}]}],"notes":"- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers).\n","examples":[{"id":"sign-in-using-a-third-party-provider","name":"Sign in using a third-party provider","isSpotlight":true,"code":"```python\nresponse = supabase.auth.sign_in_with_oauth(\n    {\"provider\": \"github\"}\n)\n```\n"},{"id":"sign-in-using-a-third-party-provider-with-redirect","name":"Sign in using a third-party provider with redirect","isSpotlight":false,"description":"- When the third-party provider successfully authenticates the user, the provider redirects the user to the URL specified in the `redirectTo` parameter. This parameter defaults to the [`SITE_URL`](/docs/guides/auth/redirect-urls). It does not redirect the user immediately after invoking this method.\n- See [redirect URLs and wildcards](docs/guides/auth/redirect-urls#use-wildcards-in-redirect-urls) to add additional redirect URLs to your project.\n","code":"```python\nresponse = supabase.auth.sign_in_with_oauth(\n    {\n        \"provider\": \"github\",\n        \"options\": {\n            \"redirect_to\": \"https://example.com/welcome\",\n        }\n    }\n)\n```\n"},{"id":"sign-in-with-scopes","name":"Sign in with scopes","isSpotlight":false,"description":"If you need additional data from an OAuth provider, you can include a space-separated list of scopes in your request to get back an OAuth provider token.\nYou may also need to specify the scopes in the provider's OAuth app settings, depending on the provider. The list of scopes will be documented by the third-party provider you are using and specifying scopes will enable you to use the OAuth provider token to call additional APIs supported by the third-party provider to get more information.\n","code":"```python\nresponse = supabase.auth.sign_in_with_oauth(\n    {\n        \"provider\": \"github\",\n        \"options\": {\n            \"scopes\": \"repo gist notifications\",\n        }\n    }\n)\n```\n"}]},{"id":"sign-in-with-id-token","title":"sign_in_with_id_token","params":[{"name":"credentials","type":"SignInWithIdTokenCredentials","subContent":[{"name":"provider","isOptional":false,"type":"\"google\" | \"apple\" | \"azure\" | \"facebook\" | \"kakao\" | string","description":"Provider name or OIDC `iss` value identifying which provider should be used to verify the provided token. Supported names: `google`, `apple`, `azure`, `facebook`, `kakao`, `keycloak` (deprecated).\n"},{"name":"token","isOptional":false,"type":"string","description":"OIDC ID token issued by the specified provider. The `iss` claim in the ID token must match the supplied provider. Some ID tokens contain an `at_hash` which require that you provide an `access_token` value to be accepted properly. If the token contains a `nonce` claim you must supply the nonce used to obtain the ID token.\n"},{"name":"options","isOptional":true,"type":"object","subContent":[{"name":"captcha_token","isOptional":true,"type":"string"}]},{"name":"nonce","isOptional":true,"type":"string","description":"If the ID token contains a `nonce` claim, then the hash of this value is compared to the value in the ID token.\n"},{"name":"access_token","isOptional":true,"type":"string","description":"If the ID token contains an `at_hash` claim, then the hash of this value is compared to the value in the ID token.\n"}]}],"notes":"Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.\n","examples":[{"id":"sign-in-with-id-token","name":"Sign In using ID Token","code":"```python\nresponse = supabase.auth.sign_in_with_id_token(\n    {\n        \"provider\": \"google\",\n        \"token\": \"your-id-token\",\n    }\n)\n```\n","response":"```json\n{\n  \"session\": {\n    \"access_token\": \"<ACCESS_TOKEN>\",\n    \"expires_at\": 1721236789,\n    \"expires_in\": 60,\n    \"provider_refresh_token\": null,\n    \"provider_token\": null,\n    \"refresh_token\": \"<REFRESH_TOKEN>\",\n    \"token_type\": \"bearer\",\n    \"user\": {\n      \"action_link\": null,\n      \"app_metadata\": {\n        ...\n      },\n      \"aud\": \"authenticated\",\n      \"confirmation_sent_at\": null,\n      \"confirmed_at\": \"Wed, 17 Jul 2024 16:34:24 GMT\",\n      \"created_at\": \"Wed, 17 Jul 2024 16:34:24 GMT\",\n      \"email\": \"email@example.com\",\n      \"email_change_sent_at\": null,\n      \"email_confirmed_at\": \"Wed, 17 Jul 2024 16:34:24 GMT\",\n      \"factors\": null,\n      \"id\": \"11111111-1111-1111-1111-111111111111\",\n      \"identities\": [\n        {\n          \"identity_id\": \"22222222-2222-2222-2222-222222222222\",\n          \"provider\": \"google\",\n          \"user_id\": \"11111111-1111-1111-1111-111111111111\"\n        }\n      ],\n      \"invited_at\": null,\n      \"last_sign_in_at\": \"Wed, 17 Jul 2024 17:18:49 GMT\",\n      \"new_email\": null,\n      \"phone\": \"\",\n      \"phone_confirmed_at\": null,\n      \"recovery_sent_at\": null,\n      \"role\": \"authenticated\",\n      \"updated_at\": \"Wed, 17 Jul 2024 17:18:49 GMT\",\n      \"user_metadata\": {\n        ...\n      }\n    }\n  },\n  \"user\": {\n    \"action_link\": null,\n    \"app_metadata\": {\n      ...\n    },\n    \"aud\": \"authenticated\",\n    \"confirmation_sent_at\": null,\n    \"confirmed_at\": \"Wed, 17 Jul 2024 16:34:24 GMT\",\n    \"created_at\": \"Wed, 17 Jul 2024 16:34:24 GMT\",\n    \"email\": \"email@example.com\",\n    \"email_change_sent_at\": null,\n    \"email_confirmed_at\": \"Wed, 17 Jul 2024 16:34:24 GMT\",\n    \"factors\": null,\n    \"id\": \"11111111-1111-1111-1111-111111111111\",\n    \"identities\": [\n      {\n        \"identity_id\": \"22222222-2222-2222-2222-222222222222\",\n        \"provider\": \"google\",\n        \"user_id\": \"11111111-1111-1111-1111-111111111111\"\n      }\n    ],\n    \"invited_at\": null,\n    \"last_sign_in_at\": \"Wed, 17 Jul 2024 17:18:49 GMT\",\n    \"new_email\": null,\n    \"phone\": \"\",\n    \"phone_confirmed_at\": null,\n    \"recovery_sent_at\": null,\n    \"role\": \"authenticated\",\n    \"updated_at\": \"Wed, 17 Jul 2024 17:18:49 GMT\",\n    \"user_metadata\": {\n      ...\n    }\n  }\n}\n```\n"}]},{"id":"sign-in-with-sso","title":"sign_in_with_sso()","overwriteParams":[{"name":"params","type":"SignInWithSSOCredentials","subContent":[{"name":"provider_id","isOptional":true,"type":"string","description":"UUID of the SSO provider. One of `provider_id` or `domain` is required.\n"},{"name":"domain","isOptional":true,"type":"string","description":"Domain name of the organization to use SSO with. One of `provider_id` or `domain` is required.\n"},{"name":"options","isOptional":true,"type":"object","subContent":[{"name":"redirect_to","type":"string","description":"The URL to redirect the user to after they have signed in. Must be a configured redirect URL for your Supabase instance.\n"},{"name":"captcha_token","type":"string"}]}]}],"notes":"- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n    - Mapping specific user email addresses with an identity provider.\n    - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n","examples":[{"id":"sign-in-with-domain","name":"Sign in with email domain","isSpotlight":true,"description":"You can extract the user's email domain and use it to trigger the authentication flow with the correct identity provider.\n","code":"```python\nresponse = supabase.auth.sign_in_with_sso(\n    {\"domain\": \"company.com\"}\n)\n```\n","response":"```json\n{\n  \"url\": \"\"\n}\n```\n"},{"id":"sign-in-with-provider-uuid","name":"Sign in with provider UUID","isSpotlight":true,"description":"Useful when you need to map a user's sign in request according to different rules that can't use email domains.\n","code":"```python\nresponse = supabase.auth.sign_in_with_sso(\n    {\"provider_id\": \"21648a9d-8d5a-4555-a9d1-d6375dc14e92\"}\n)\n```\n"}]},{"id":"get-claims","title":"get_claims","params":[{"name":"jwt","isOptional":true,"type":"string","description":"An optional specific JWT you wish to verify, not the one you can obtain from [`get_session`](/docs/reference/python/auth-getsession)."},{"name":"jwks","isOptional":true,"type":"JWKSet","description":"If set, this JSON Web Key Set is going to have precedence over the cached value available on the server.","subContent":[{"name":"keys","isOptional":false,"type":"list<JWK>","subContent":[{"name":"key_opt","isOptional":false,"type":"list[string]"},{"name":"kty","isOptional":false,"type":"RSA | EC | oct"},{"name":"alg","isOptional":false,"type":"string"},{"name":"kid","isOptional":false,"type":"string"}]}]}],"notes":"Extracts the JWT claims present in the access token by first verifying the JWT against the server's JSON Web Key Set endpoint /.well-known/jwks.json which is often cached, resulting in significantly faster responses. Prefer this method over [`get_user`](/docs/reference/python/auth-getuser) which always sends a request to the Auth server for each JWT.\n","examples":[{"id":"get-user-object","name":"Get user object","isSpotlight":true,"code":"```\nresponse = supabase.auth.get_claims()\n```\n","response":"```json\n{\n  \"claims\": {\n    \"aal\": \"aal1\",\n    \"amr\": [{\n      \"method\": \"email\",\n      \"timestamp\": 1715766000\n    }],\n    \"app_metadata\": {},\n    \"aud\": \"authenticated\",\n    \"email\": \"example@email.com\",\n    \"exp\": 1715769600,\n    \"iat\": 1715766000,\n    \"is_anonymous\": false,\n    \"iss\": \"https://api.supabase.com/auth/v1\",\n    \"phone\": \"+13334445555\",\n    \"role\": \"authenticated\",\n    \"session_id\": \"11111111-1111-1111-1111-111111111111\",\n    \"sub\": \"11111111-1111-1111-1111-111111111111\",\n    \"user_metadata\": {}\n  },\n  \"header\": {\n    \"alg\": \"RS256\",\n    \"typ\": \"JWT\",\n    \"kid\": \"abcdefgh\"\n  },\n  \"signature\": [/** Uint8Array */],\n}\n```\n"}]},{"id":"sign-out","title":"sign_out()","params":[{"name":"options","isOptional":true,"type":"SignOutOptions","subContent":[{"name":"scope","isOptional":true,"type":"\"global\" | \"local\" | \"others\"","description":"Determines which sessions should be logged out. Global means all sessions by this account. Local means only this session. Others means all other sessions except the current one. When using others, there is no sign-out event fired on the current session!\n"}]}],"notes":"- In order to use the `sign_out()` method, the user needs to be signed in first.\n- By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n- Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.\n","examples":[{"id":"sign-out","name":"Sign out","code":"```python\nresponse = supabase.auth.sign_out()\n```\n"}]},{"id":"verify-otp","title":"verify_otp","params":[{"name":"params","type":"VerifyOtpParams","subContent":[{"name":"phone","isOptional":true,"type":"string","description":"One of `phone`, `email`, or `token_hash` must be provided."},{"name":"email","isOptional":true,"type":"string","description":"One of `phone`, `email`, or `token_hash` must be provided."},{"name":"token_hash","isOptional":true,"type":"string","description":"The token hash from the user's email link. One of `phone`, `email`, or `token_hash` must be provided.\n"},{"name":"type","type":"sms | phone_change | signup | invite | magiclink | recovery | email_change | email"},{"name":"token","isOptional":true,"type":"string","description":"The OTP sent to the user. Required if using `phone` or `email`."},{"name":"options","isOptional":true,"type":"object","subContent":[{"name":"redirect_to","isOptional":true,"type":"string","description":"A URL to redirect the user to after they are confirmed. Must be in your configured redirect URLs.\n"},{"name":"captcha_token","isOptional":true,"type":"string","description":"Deprecated."}]}]}],"notes":"- The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n- The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n- The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates) and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr) for more details.\n","examples":[{"id":"verify-signup-one-time-password(otp)","name":"Verify Signup One-Time Password (OTP)","isSpotlight":false,"code":"```python\nresponse = supabase.auth.verify_otp(\n    {\n        \"email\": \"email@example.com\",\n        \"token\": \"123456\",\n        \"type\": \"email\",\n    }\n)\n```\n","response":"```json\n{\n  \"user\": {\n    \"id\": \"11111111-1111-1111-1111-111111111111\",\n    \"app_metadata\": {\n      \"provider\": \"email\",\n      \"providers\": []\n    },\n    \"user_metadata\": {},\n    \"aud\": \"authenticated\",\n    \"confirmation_sent_at\": \"2023-02-19T00:01:51.147035Z\",\n    \"recovery_sent_at\": \"2024-07-21T22:20:00.366959Z\",\n    \"email_change_sent_at\": null,\n    \"new_email\": null,\n    \"invited_at\": null,\n    \"action_link\": null,\n    \"email\": \"email@example.com\",\n    \"phone\": \"\",\n    \"created_at\": \"2023-02-19T00:01:51.142802Z\",\n    \"confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n    \"email_confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n    \"phone_confirmed_at\": null,\n    \"last_sign_in_at\": \"2024-07-21T22:21:35.199451Z\",\n    \"role\": \"authenticated\",\n    \"updated_at\": \"2024-07-21T22:21:35.206985Z\",\n    \"identities\": [],\n    \"factors\": null,\n    \"is_anonymous\": false\n  },\n  \"session\": {\n    \"provider_token\": null,\n    \"provider_refresh_token\": null,\n    \"access_token\": \"<ACCESS_TOKEN>\",\n    \"refresh_token\": \"<REFRESH_TOKEN>\",\n    \"expires_in\": 3600,\n    \"expires_at\": 1700000000,\n    \"token_type\": \"bearer\",\n    \"user\": {\n      \"id\": \"11111111-1111-1111-1111-111111111111\",\n      \"app_metadata\": {\n        \"provider\": \"email\",\n        \"providers\": []\n      },\n      \"user_metadata\": {},\n      \"aud\": \"authenticated\",\n      \"confirmation_sent_at\": \"2023-02-19T00:01:51.147035Z\",\n      \"recovery_sent_at\": \"2024-07-21T22:20:00.366959Z\",\n      \"email_change_sent_at\": null,\n      \"new_email\": null,\n      \"invited_at\": null,\n      \"action_link\": null,\n      \"email\": \"email@example.com\",\n      \"phone\": \"\",\n      \"created_at\": \"2023-02-19T00:01:51.142802Z\",\n      \"confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n      \"email_confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n      \"phone_confirmed_at\": null,\n      \"last_sign_in_at\": \"2024-07-21T22:21:35.199451Z\",\n      \"role\": \"authenticated\",\n      \"updated_at\": \"2024-07-21T22:21:35.206985Z\",\n      \"identities\": [],\n      \"factors\": null,\n      \"is_anonymous\": false\n    }\n  }\n}\n```\n"},{"id":"verify-sms-one-time-password","name":"Verify SMS One-Time Password (OTP)","isSpotlight":true,"code":"```python\nresponse = supabase.auth.verify_otp(\n    {\n        \"phone\": \"+13334445555\",\n        \"token\": \"123456\",\n        \"type\": \"sms\",\n    }\n)\n```\n"},{"id":"verify-email-auth(tokenhash)","name":"Verify Email Auth (Token Hash)","isSpotlight":false,"code":"```python\nresponse = supabase.auth.verify_otp(\n    {\n        \"email\": \"email@example.com\",\n        \"token_hash\": \"<token-hash>\",\n        \"type\": \"email\",\n    }\n)\n```\n"}]},{"id":"get-session","title":"get_session","notes":"- This method retrieves the current local session (i.e in memory).\n- The session contains a signed JWT and unencoded session data.\n- Since the unencoded session data is retrieved from the local storage medium, **do not** rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call [`get_user`](/docs/reference/python/auth-getuser) instead.\n- If the session has an expired access token, this method will use the refresh token to get a new session.\n","examples":[{"id":"get-the-session-data","name":"Get the session data","isSpotlight":true,"code":"```python\nresponse = supabase.auth.get_session()\n```\n","response":"```json\n{\n  \"provider_token\": null,\n  \"provider_refresh_token\": null,\n  \"access_token\": \"<ACCESS_TOKEN>\",\n  \"refresh_token\": \"<REFRESH_TOKEN>\",\n  \"expires_in\": 3600,\n  \"expires_at\": 1700000000,\n  \"token_type\": \"bearer\",\n  \"user\": {\n    \"id\": \"11111111-1111-1111-1111-111111111111\",\n    \"app_metadata\": {\n      \"provider\": \"email\",\n      \"providers\": []\n    },\n    \"user_metadata\": {},\n    \"aud\": \"authenticated\",\n    \"confirmation_sent_at\": \"2023-02-19T00:01:51.147035Z\",\n    \"recovery_sent_at\": \"2024-07-21T22:20:00.366959Z\",\n    \"email_change_sent_at\": null,\n    \"new_email\": null,\n    \"invited_at\": null,\n    \"action_link\": null,\n    \"email\": \"email@example.com\",\n    \"phone\": \"\",\n    \"created_at\": \"2023-02-19T00:01:51.142802Z\",\n    \"confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n    \"email_confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n    \"phone_confirmed_at\": null,\n    \"last_sign_in_at\": \"2024-07-21T22:36:45.194120Z\",\n    \"role\": \"authenticated\",\n    \"updated_at\": \"2024-07-21T22:36:45.196044Z\",\n    \"identities\": [],\n    \"factors\": null,\n    \"is_anonymous\": false\n  }\n}\n```\n"}]},{"id":"get-user","title":"get_user","params":[{"name":"jwt","isOptional":true,"type":"string","description":"Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used."}],"notes":"- This method fetches the user object from the database instead of local session.\n- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n","examples":[{"id":"get-the-logged-in-user-with-the-current-existing-session","name":"Get the logged in user with the current existing session","isSpotlight":true,"code":"```\nresponse = supabase.auth.get_user()\n```\n","response":"```json\n{\n  \"user\": {\n    \"id\": \"11111111-1111-1111-1111-111111111111\",\n    \"app_metadata\": {\n      \"provider\": \"email\",\n      \"providers\": []\n    },\n    \"user_metadata\": {},\n    \"aud\": \"authenticated\",\n    \"confirmation_sent_at\": \"2023-02-19T00:01:51.147035Z\",\n    \"recovery_sent_at\": \"2024-07-21T22:20:00.366959Z\",\n    \"email_change_sent_at\": null,\n    \"new_email\": null,\n    \"new_phone\": null,\n    \"invited_at\": null,\n    \"action_link\": null,\n    \"email\": \"email@example.com\",\n    \"phone\": \"\",\n    \"created_at\": \"2023-02-19T00:01:51.142802Z\",\n    \"confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n    \"email_confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n    \"phone_confirmed_at\": null,\n    \"last_sign_in_at\": \"2024-07-24T22:24:57.642878Z\",\n    \"role\": \"authenticated\",\n    \"updated_at\": \"2024-07-24T22:24:57.650021Z\",\n    \"identities\": [],\n    \"is_anonymous\": false,\n    \"factors\": null\n  }\n}\n```\n"},{"id":"get-the-logged-in-user-with-a-custom-access-token-jwt","name":"Get the logged in user with a custom access token jwt","isSpotlight":false,"code":"```\nresponse = supabase.auth.get_user(jwt)\n```\n"}]},{"id":"update-user","title":"update_user()","notes":"- In order to use the `update_user()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email.\nTo only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n","params":[{"name":"attributes","isOptional":false,"type":"UserAttributes","subContent":[{"name":"data","isOptional":true,"type":"object","description":"A custom data object to store the user's metadata. This maps to the `auth.users.raw_user_meta_data` column."},{"name":"email","isOptional":true,"type":"string","description":"The user's email."},{"name":"nonce","isOptional":true,"type":"string","description":"The nonce sent for reauthentication if the user's password is to be updated."},{"name":"password","isOptional":true,"type":"string","description":"The user's password."},{"name":"phone","isOptional":true,"type":"string","description":"The user's phone."}]},{"name":"options","isOptional":true,"type":"object","subContent":[{"name":"email_redirect_to","isOptional":true,"type":"string"}]}],"examples":[{"id":"update-the-email-for-an-authenticated-user","name":"Update the email for an authenticated user","description":"Sends a \"Confirm Email Change\" email to the new email address.","isSpotlight":false,"code":"```python\nresponse = supabase.auth.update_user(\n    {\"email\": \"new@email.com\"}\n)\n```\n","response":"```json\n{\n  \"user\": {\n    \"id\": \"11111111-1111-1111-1111-111111111111\",\n    \"aud\": \"authenticated\",\n    \"role\": \"authenticated\",\n    \"email\": \"example@email.com\",\n    \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",\n    \"phone\": \"\",\n    \"confirmed_at\": \"2024-01-01T00:00:00Z\",\n    \"new_email\": \"new@email.com\",\n    \"email_change_sent_at\": \"2024-01-01T00:00:00Z\",\n    \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",\n    \"app_metadata\": {\n      \"provider\": \"email\",\n      \"providers\": [\n        \"email\"\n      ]\n    },\n    \"user_metadata\": {\n      \"email\": \"example@email.com\",\n      \"email_verified\": false,\n      \"phone_verified\": false,\n      \"sub\": \"11111111-1111-1111-1111-111111111111\"\n    },\n    \"identities\": [\n      {\n        \"identity_id\": \"22222222-2222-2222-2222-222222222222\",\n        \"id\": \"11111111-1111-1111-1111-111111111111\",\n        \"user_id\": \"11111111-1111-1111-1111-111111111111\",\n        \"identity_data\": {\n          \"email\": \"example@email.com\",\n          \"email_verified\": false,\n          \"phone_verified\": false,\n          \"sub\": \"11111111-1111-1111-1111-111111111111\"\n        },\n        \"provider\": \"email\",\n        \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",\n        \"created_at\": \"2024-01-01T00:00:00Z\",\n        \"updated_at\": \"2024-01-01T00:00:00Z\",\n        \"email\": \"example@email.com\"\n      }\n    ],\n    \"created_at\": \"2024-01-01T00:00:00Z\",\n    \"updated_at\": \"2024-01-01T00:00:00Z\",\n    \"is_anonymous\": false\n  }\n}\n```\n"},{"id":"update-the-phone-for-an-authenticated-user","name":"Update the phone number for an authenticated user","description":"Sends a one-time password (OTP) to the new phone number.","isSpotlight":false,"code":"```python\nresponse = supabase.auth.update_user(\n    {\"phone\": \"123456789\"}\n)\n```\n"},{"id":"update-the-password-for-an-authenticated-user","name":"Update the password for an authenticated user","isSpotlight":false,"code":"```python\nresponse = supabase.auth.update_user(\n    {\"password\": \"new password\"}\n)\n```\n"},{"id":"update-the-users-metadata","name":"Update the user's metadata","isSpotlight":true,"code":"```python\nresponse = supabase.auth.update_user(\n    {\n        \"data\": {\"hello\": \"world\"},\n    }\n)\n```\n"},{"id":"update-password-with-reauthentication","name":"Update the user's password with a nonce","description":"If **Secure password change** is enabled in your [project's email provider settings](/dashboard/project/_/auth/providers), updating the user's password would require a nonce if the user **hasn't recently signed in**. The nonce is sent to the user's email or phone number. A user is deemed recently signed in if the session was created in the last 24 hours.\n","isSpotlight":true,"code":"```python\nresponse = supabase.auth.update_user(\n    {\n        \"password\": \"new password\",\n        \"nonce\": \"123456\",\n    }\n)\n```\n"}]},{"id":"get-user-identities","title":"get_user_identities()","notes":"Gets all the identities linked to a user.\n- The user needs to be signed in to call `get_user_identities()`.\n","examples":[{"id":"get-user-identities","name":"Returns a list of identities linked to the user","isSpotlight":true,"code":"```python\nresponse = supabase.auth.get_user_identities()\n```\n","response":"```json\n{\n  \"identities\": [\n    {\n      \"identity_id\": \"22222222-2222-2222-2222-222222222222\",\n      \"id\": \"2024-01-01T00:00:00Z\",\n      \"user_id\": \"2024-01-01T00:00:00Z\",\n      \"identity_data\": {\n        \"email\": \"example@email.com\",\n        \"email_verified\": false,\n        \"phone_verified\": false,\n        \"sub\": \"11111111-1111-1111-1111-111111111111\"\n      },\n      \"provider\": \"email\",\n      \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",\n      \"created_at\": \"2024-01-01T00:00:00Z\",\n      \"updated_at\": \"2024-01-01T00:00:00Z\",\n      \"email\": \"example@email.com\"\n    }\n  ]\n}\n```\n"}]},{"id":"link-identity","title":"link_identity()","params":[{"name":"credentials","isOptional":false,"type":"SignInWithOAuthCredentials","subContent":[{"name":"provider","isOptional":false,"type":"boolean","description":"One of the providers supported by GoTrue."},{"name":"options","isOptional":true,"type":"object","subContent":[{"name":"scopes","isOptional":true,"type":"string","description":"A space-separated list of scopes granted to the OAuth application."},{"name":"redirect_to","isOptional":true,"type":"string","description":"A URL to send the user to after they are confirmed."},{"name":"query_params","isOptional":true,"type":"string","description":"An object of query params"}]}]}],"notes":"- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `link_identity()`.\n- If the candidate identity is already linked to the existing user or another user, `link_identity()` will fail.\n- If `link_identity` is run on the server, you should handle the redirect.\n","examples":[{"id":"link-identity","name":"Link an identity to a user","isSpotlight":true,"code":"```python\nresponse = supabase.auth.link_identity(\n    {provider: \"github\"}\n)\n```\n","response":"```json\n{\n  \"provider\": \"github\",\n  \"url\": \"<PROVIDER_URL_TO_REDIRECT_TO>\"\n}\n```\n"}]},{"id":"unlink-identity","title":"unlink_identity()","params":[{"name":"identity","isOptional":false,"type":"UserIdentity","subContent":[{"name":"id","isOptional":false,"type":"string"},{"name":"identity_id","isOptional":false,"type":"string"},{"name":"provider","isOptional":false,"type":"string"},{"name":"user_id","isOptional":false,"type":"string"},{"name":"created_at","isOptional":true,"type":"string"},{"name":"identity_data","isOptional":true,"type":"Dict[string, Any]"},{"name":"last_sign_in_at","isOptional":true,"type":"string"},{"name":"updated_at","isOptional":true,"type":"string"}]}],"notes":"- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlink_identity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n","examples":[{"id":"unlink-identity","name":"Unlink an identity","isSpotlight":true,"code":"```python\n# retrieve all identities linked to a user\nresponse = supabase.auth.get_user_identities()\n\n# find the google identity\ngoogle_identity = list(\n    filter(lambda identity: identity.provider == \"google\", res.identities)\n).pop()\n\n# unlink the google identity\nresponse = supabase.auth.unlink_identity(google_identity)\n```\n"}]},{"id":"send-password-reauthentication","title":"reauthenticate()","notes":"- This method is used together with `updateUser()` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n","examples":[{"id":"send-reauthentication-nonce","name":"Send reauthentication nonce","description":"Sends a reauthentication nonce to the user's email or phone number.","isSpotlight":true,"code":"```python\nresponse = supabase.auth.reauthenticate()\n```\n"}]},{"id":"resend-email-or-phone-otps","title":"resend()","params":[{"name":"credentials","isOptional":false,"type":"ResendCredentials","subContent":[{"name":"email","isOptional":true,"type":"string","description":"One of email or phone must be provided."},{"name":"phone","isOptional":true,"type":"string","description":"One of email or phone must be provided."},{"name":"type","isOptional":false,"type":"signup | email_change | sms | phone_change"},{"name":"options","isOptional":true,"type":"object","subContent":[{"name":"captcha_token","isOptional":true,"type":"string","description":"Verification token received when the user completes the captcha on the site."},{"name":"email_redirect_to","isOptional":true,"type":"string","description":"A URL to send the user to after they have signed-in."}]}]}],"notes":"- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `sign_in_with_otp()` method again.\n- Password recovery emails can be resent by calling the `reset_password_for_email()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n- You can specify a redirect url when you resend an email link using the `email_redirect_to` option.\n","examples":[{"id":"resend-email-signup-confirmation","name":"Resend an email signup confirmation","description":"Resends the email signup confirmation to the user","isSpotlight":true,"code":"```python\nresponse = supabase.auth.resend(\n    {\n        \"type\": \"signup\",\n        \"email\": \"email@example.com\",\n        \"options\": {\n            \"email_redirect_to\": \"https://example.com/welcome\",\n        },\n    }\n)\n```\n"},{"id":"resend-phone-signup-confirmation","name":"Resend a phone signup confirmation","description":"Resends the phone signup confirmation email to the user","code":"```python\nresponse = supabase.auth.resend(\n    {\n        \"type\": \"sms\",\n        \"phone\": \"1234567890\",\n    }\n)\n```\n"},{"id":"resend-email-change-email","name":"Resend email change email","description":"Resends the email change email to the user","code":"```python\nresponse = supabase.auth.resend(\n    {\n        \"type\": \"email_change\",\n        \"email\": \"email@example.com\",\n    }\n)\n```\n"},{"id":"resend-phone-change","name":"Resend phone change OTP","description":"Resends the phone change OTP to the user","code":"```python\nresponse = supabase.auth.resend(\n    {\n        \"type\": \"phone_change\",\n        \"phone\": \"1234567890\",\n    }\n)\n```\n"}]},{"id":"set-session","title":"set_session()","params":[{"name":"access_token","isOptional":false,"type":"string"},{"name":"refresh_token","isOptional":false,"type":"string"}],"description":"Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.\nIf the refresh token or access token in the current session is invalid, an error will be thrown.\n","notes":"- This method sets the session using an `access_token` and `refresh_token`.\n- If successful, a `SIGNED_IN` event is emitted.\n","examples":[{"id":"set-session","name":"Refresh the session","description":"Sets the session data from refresh_token and returns current session or raise an error if the refresh_token is invalid.","code":"```python\nresponse = supabase.auth.set_session(access_token, refresh_token)\n```\n","response":"```json\n{\n  \"user\": {\n    \"id\": \"11111111-1111-1111-1111-111111111111\",\n    \"app_metadata\": {\n      \"provider\": \"email\",\n      \"providers\": []\n    },\n    \"user_metadata\": {},\n    \"aud\": \"authenticated\",\n    \"confirmation_sent_at\": \"2023-02-19T00:01:51.147035Z\",\n    \"recovery_sent_at\": \"2024-07-21T22:20:00.366959Z\",\n    \"email_change_sent_at\": null,\n    \"new_email\": null,\n    \"new_phone\": null,\n    \"invited_at\": null,\n    \"action_link\": null,\n    \"email\": \"email@example.com\",\n    \"phone\": \"\",\n    \"created_at\": \"2023-02-19T00:01:51.142802Z\",\n    \"confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n    \"email_confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n    \"phone_confirmed_at\": null,\n    \"last_sign_in_at\": \"2024-07-24T22:24:57.642878Z\",\n    \"role\": \"authenticated\",\n    \"updated_at\": \"2024-07-24T22:24:57.650021Z\",\n    \"identities\": [],\n    \"is_anonymous\": false,\n    \"factors\": null\n  },\n  \"session\": {\n    \"provider_token\": null,\n    \"provider_refresh_token\": null,\n    \"access_token\": \"<ACCESS_TOKEN>\",\n    \"refresh_token\": \"<REFRESH_TOKEN>\",\n    \"expires_in\": 89,\n    \"expires_at\": 1721863497,\n    \"token_type\": \"bearer\",\n    \"user\": {\n      \"id\": \"11111111-1111-1111-1111-111111111111\",\n      \"app_metadata\": {\n        \"provider\": \"email\",\n        \"providers\": []\n      },\n      \"user_metadata\": {},\n      \"aud\": \"authenticated\",\n      \"confirmation_sent_at\": \"2023-02-19T00:01:51.147035Z\",\n      \"recovery_sent_at\": \"2024-07-21T22:20:00.366959Z\",\n      \"email_change_sent_at\": null,\n      \"new_email\": null,\n      \"new_phone\": null,\n      \"invited_at\": null,\n      \"action_link\": null,\n      \"email\": \"email@example.com\",\n      \"phone\": \"\",\n      \"created_at\": \"2023-02-19T00:01:51.142802Z\",\n      \"confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n      \"email_confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n      \"phone_confirmed_at\": null,\n      \"last_sign_in_at\": \"2024-07-24T22:24:57.642878Z\",\n      \"role\": \"authenticated\",\n      \"updated_at\": \"2024-07-24T22:24:57.650021Z\",\n      \"identities\": [],\n      \"is_anonymous\": false,\n      \"factors\": null\n    }\n  }\n}\n```\n"}]},{"id":"refresh-session","title":"refresh_session()","params":[{"name":"refresh_token","isOptional":true,"type":"string"}],"description":"Returns a new session, regardless of expiry status.\nTakes in an optional refresh token. If not passed in, then refresh_session() will attempt to retrieve it from get_session().\nIf the current session's refresh token is invalid, an error will be thrown.\n","notes":"- This method will refresh the session whether the current one is expired or not.\n","examples":[{"id":"refresh-session","name":"Refresh session using the current session","code":"```\nresponse = supabase.auth.refresh_session()\n```\n","response":"```json\n{\n  \"user\": {\n    \"id\": \"11111111-1111-1111-1111-111111111111\",\n    \"app_metadata\": {\n      \"provider\": \"email\",\n      \"providers\": []\n    },\n    \"user_metadata\": {},\n    \"aud\": \"authenticated\",\n    \"confirmation_sent_at\": \"2023-02-19T00:01:51.147035Z\",\n    \"recovery_sent_at\": \"2024-07-21T22:20:00.366959Z\",\n    \"email_change_sent_at\": null,\n    \"new_email\": null,\n    \"new_phone\": null,\n    \"invited_at\": null,\n    \"action_link\": null,\n    \"email\": \"email@example.com\",\n    \"phone\": \"\",\n    \"created_at\": \"2023-02-19T00:01:51.142802Z\",\n    \"confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n    \"email_confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n    \"phone_confirmed_at\": null,\n    \"last_sign_in_at\": \"2024-07-24T22:24:57.642878Z\",\n    \"role\": \"authenticated\",\n    \"updated_at\": \"2024-07-24T22:24:57.650021Z\",\n    \"identities\": [],\n    \"is_anonymous\": false,\n    \"factors\": null\n  },\n  \"session\": {\n    \"provider_token\": null,\n    \"provider_refresh_token\": null,\n    \"access_token\": \"<ACCESS_TOKEN>\",\n    \"refresh_token\": \"<REFRESH_TOKEN>\",\n    \"expires_in\": 89,\n    \"expires_at\": 1721863497,\n    \"token_type\": \"bearer\",\n    \"user\": {\n      \"id\": \"11111111-1111-1111-1111-111111111111\",\n      \"app_metadata\": {\n        \"provider\": \"email\",\n        \"providers\": []\n      },\n      \"user_metadata\": {},\n      \"aud\": \"authenticated\",\n      \"confirmation_sent_at\": \"2023-02-19T00:01:51.147035Z\",\n      \"recovery_sent_at\": \"2024-07-21T22:20:00.366959Z\",\n      \"email_change_sent_at\": null,\n      \"new_email\": null,\n      \"new_phone\": null,\n      \"invited_at\": null,\n      \"action_link\": null,\n      \"email\": \"email@example.com\",\n      \"phone\": \"\",\n      \"created_at\": \"2023-02-19T00:01:51.142802Z\",\n      \"confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n      \"email_confirmed_at\": \"2023-02-19T00:01:51.351735Z\",\n      \"phone_confirmed_at\": null,\n      \"last_sign_in_at\": \"2024-07-24T22:24:57.642878Z\",\n      \"role\": \"authenticated\",\n      \"updated_at\": \"2024-07-24T22:24:57.650021Z\",\n      \"identities\": [],\n      \"is_anonymous\": false,\n      \"factors\": null\n    }\n  }\n}\n```\n"}]},{"id":"exchange-code-for-session","title":"exchange_code_for_session()","params":[{"name":"auth_code","isOptional":false,"type":"string"}],"notes":"Log in an existing user by exchanging an Auth Code issued during the PKCE flow.\n\n- Used when `flow_type` is set to `pkce` in client options.\n","examples":[{"id":"exchange-auth-code","name":"Exchange Auth Code","isSpotlight":true,"code":"```python\nresponse = supabase.auth.exchange_code_for_session(\n    {\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"}\n)\n```\n","response":"```json\n{\n  \"session\": {\n    \"access_token\": \"<ACCESS_TOKEN>\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 3600,\n    \"expires_at\": 1700000000,\n    \"refresh_token\": \"<REFRESH_TOKEN>\",\n    \"user\": {\n      \"id\": \"11111111-1111-1111-1111-111111111111\",\n      \"aud\": \"authenticated\",\n      \"role\": \"authenticated\",\n      \"email\": \"example@email.com\",\n      \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",\n      \"phone\": \"\",\n      \"confirmation_sent_at\": \"2024-01-01T00:00:00Z\",\n      \"confirmed_at\": \"2024-01-01T00:00:00Z\",\n      \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",\n      \"app_metadata\": {\n        \"provider\": \"email\",\n        \"providers\": [\n          \"email\",\n          \"<OTHER_PROVIDER>\"\n        ]\n      },\n      \"user_metadata\": {\n        \"email\": \"email@email.com\",\n        \"email_verified\": true,\n        \"full_name\": \"User Name\",\n        \"iss\": \"<ISS>\",\n        \"name\": \"User Name\",\n        \"phone_verified\": false,\n        \"provider_id\": \"<PROVIDER_ID>\",\n        \"sub\": \"<SUB>\"\n      },\n      \"identities\": [\n        {\n          \"identity_id\": \"22222222-2222-2222-2222-222222222222\",\n          \"id\": \"11111111-1111-1111-1111-111111111111\",\n          \"user_id\": \"11111111-1111-1111-1111-111111111111\",\n          \"identity_data\": {\n            \"email\": \"example@email.com\",\n            \"email_verified\": false,\n            \"phone_verified\": false,\n            \"sub\": \"11111111-1111-1111-1111-111111111111\"\n          },\n          \"provider\": \"email\",\n          \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",\n          \"created_at\": \"2024-01-01T00:00:00Z\",\n          \"updated_at\": \"2024-01-01T00:00:00Z\",\n          \"email\": \"email@example.com\"\n        },\n        {\n          \"identity_id\": \"33333333-3333-3333-3333-333333333333\",\n          \"id\": \"<ID>\",\n          \"user_id\": \"<USER_ID>\",\n          \"identity_data\": {\n            \"email\": \"example@email.com\",\n            \"email_verified\": true,\n            \"full_name\": \"User Name\",\n            \"iss\": \"<ISS>\",\n            \"name\": \"User Name\",\n            \"phone_verified\": false,\n            \"provider_id\": \"<PROVIDER_ID>\",\n            \"sub\": \"<SUB>\"\n          },\n          \"provider\": \"<PROVIDER>\",\n          \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",\n          \"created_at\": \"2024-01-01T00:00:00Z\",\n          \"updated_at\": \"2024-01-01T00:00:00Z\",\n          \"email\": \"example@email.com\"\n        }\n      ],\n      \"created_at\": \"2024-01-01T00:00:00Z\",\n      \"updated_at\": \"2024-01-01T00:00:00Z\",\n      \"is_anonymous\": false\n    },\n    \"provider_token\": \"<PROVIDER_TOKEN>\",\n    \"provider_refresh_token\": \"<PROVIDER_REFRESH_TOKEN>\"\n  },\n  \"user\": {\n    \"id\": \"11111111-1111-1111-1111-111111111111\",\n    \"aud\": \"authenticated\",\n    \"role\": \"authenticated\",\n    \"email\": \"example@email.com\",\n    \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",\n    \"phone\": \"\",\n    \"confirmation_sent_at\": \"2024-01-01T00:00:00Z\",\n    \"confirmed_at\": \"2024-01-01T00:00:00Z\",\n    \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",\n    \"app_metadata\": {\n      \"provider\": \"email\",\n      \"providers\": [\n        \"email\",\n        \"<OTHER_PROVIDER>\"\n      ]\n    },\n    \"user_metadata\": {\n      \"email\": \"email@email.com\",\n      \"email_verified\": true,\n      \"full_name\": \"User Name\",\n      \"iss\": \"<ISS>\",\n      \"name\": \"User Name\",\n      \"phone_verified\": false,\n      \"provider_id\": \"<PROVIDER_ID>\",\n      \"sub\": \"<SUB>\"\n    },\n    \"identities\": [\n      {\n        \"identity_id\": \"22222222-2222-2222-2222-222222222222\",\n        \"id\": \"11111111-1111-1111-1111-111111111111\",\n        \"user_id\": \"11111111-1111-1111-1111-111111111111\",\n        \"identity_data\": {\n          \"email\": \"example@email.com\",\n          \"email_verified\": false,\n          \"phone_verified\": false,\n          \"sub\": \"11111111-1111-1111-1111-111111111111\"\n        },\n        \"provider\": \"email\",\n        \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",\n        \"created_at\": \"2024-01-01T00:00:00Z\",\n        \"updated_at\": \"2024-01-01T00:00:00Z\",\n        \"email\": \"email@example.com\"\n      },\n      {\n        \"identity_id\": \"33333333-3333-3333-3333-333333333333\",\n        \"id\": \"<ID>\",\n        \"user_id\": \"<USER_ID>\",\n        \"identity_data\": {\n          \"email\": \"example@email.com\",\n          \"email_verified\": true,\n          \"full_name\": \"User Name\",\n          \"iss\": \"<ISS>\",\n          \"name\": \"User Name\",\n          \"phone_verified\": false,\n          \"provider_id\": \"<PROVIDER_ID>\",\n          \"sub\": \"<SUB>\"\n        },\n        \"provider\": \"<PROVIDER>\",\n        \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",\n        \"created_at\": \"2024-01-01T00:00:00Z\",\n        \"updated_at\": \"2024-01-01T00:00:00Z\",\n        \"email\": \"example@email.com\"\n      }\n    ],\n    \"created_at\": \"2024-01-01T00:00:00Z\",\n    \"updated_at\": \"2024-01-01T00:00:00Z\",\n    \"is_anonymous\": false\n  },\n  \"redirect_type\": null\n}\n```\n"}]},{"id":"auth-mfa-api","title":"Overview","notes":"This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n"},{"id":"mfa-enroll","title":"mfa.enroll()","notes":"- Currently, `totp` is the only supported `factor_type`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challenge_and_verify()`](/docs/reference/python/auth-mfa-challengeandverify).\n","examples":[{"id":"enroll-totp-factor","name":"Enroll a time-based, one-time password (TOTP) factor","isSpotlight":true,"code":"```python\nresponse = supabase.auth.mfa.enroll(\n    {\n        \"factor_type\": \"totp\",\n        \"friendly_name\": \"your_friendly_name\",\n    }\n)\n```\n"}]},{"id":"mfa-challenge","title":"mfa.challenge()","notes":"- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/python/auth-mfa-verify).\n","examples":[{"id":"create-mfa-challenge","name":"Create a challenge for a factor","isSpotlight":true,"code":"```python\nresponse = supabase.auth.mfa.challenge(\n    {\"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"}\n)\n```\n"}]},{"id":"mfa-verify","title":"mfa.verify()","notes":"- To verify a challenge, please [create a challenge](/docs/reference/python/auth-mfa-challenge) first.\n","examples":[{"id":"verify-challenge","name":"Verify a challenge for a factor","isSpotlight":true,"code":"```python\nresponse = supabase.auth.mfa.verify(\n    {\n        \"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n        \"challenge_id\": \"4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15\",\n        \"code\": \"123456\",\n    }\n)\n```\n"}]},{"id":"mfa-challenge-and-verify","title":"mfa.challenge_and_verify()","notes":"- An [enrolled factor](/docs/reference/python/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/python/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/python/auth-mfa-verify) in a single step.\n","examples":[{"id":"challenge-and-verify","name":"Create and verify a challenge for a factor","isSpotlight":true,"code":"```python\nresponse = supabase.auth.mfa.challenge_and_verify(\n    {\n        \"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n        \"code\": \"123456\",\n    }\n)\n```\n"}]},{"id":"mfa-unenroll","title":"mfa.unenroll()","examples":[{"id":"unenroll-a-factor","name":"Unenroll a factor","isSpotlight":true,"code":"```python\nresponse = supabase.auth.mfa.unenroll(\n    {\"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"}\n)\n```\n"}]},{"id":"mfa-get-authenticator-assurance-level","title":"mfa.get_authenticator_assurance_level()","notes":"- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next_level` field will return `aal2`, else, it will return `aal1`.\n","examples":[{"id":"get-aal","name":"Get the AAL details of a session","isSpotlight":true,"code":"```python\nresponse = supabase.auth.mfa.get_authenticator_assurance_level()\n```\n"}]},{"id":"admin-api","title":"Overview","notes":"- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n","examples":[{"id":"create-auth-admin-client","name":"Create server-side auth client","isSpotlight":true,"code":"```python\nfrom supabase import create_client\nfrom supabase.lib.client_options import ClientOptions\n\nsupabase = create_client(\n    supabase_url,\n    service_role_key,\n    options=ClientOptions(\n        auto_refresh_token=False,\n        persist_session=False,\n    )\n)\n\n# Access auth admin api\nadmin_auth_client = supabase.auth.admin\n```\n"}]},{"id":"get-user-by-id","title":"get_user_by_id()","params":[{"name":"uid","isOptional":false,"type":"string","description":"The user's unique identifier\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n"}],"notes":"- Fetches the user object from the database based on the user's id.\n- The `get_user_by_id()` method requires the user's id which maps to the `auth.users.id` column.\n","examples":[{"id":"fetch-the-user-object-using-the-access-token-jwt","name":"Fetch the user object using the access_token jwt","isSpotlight":true,"code":"```python\nresponse = supabase.auth.admin.get_user_by_id(1)\n```\n","response":"```json\n{\n  \"user\": {\n    \"id\": \"1\",\n    \"aud\": \"authenticated\",\n    \"role\": \"authenticated\",\n    \"email\": \"example@email.com\",\n    \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",\n    \"phone\": \"\",\n    \"confirmation_sent_at\": \"2024-01-01T00:00:00Z\",\n    \"confirmed_at\": \"2024-01-01T00:00:00Z\",\n    \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",\n    \"app_metadata\": {},\n    \"user_metadata\": {},\n    \"identities\": [\n      {\n        \"identity_id\": \"22222222-2222-2222-2222-222222222222\",\n        \"id\": \"1\",\n        \"user_id\": \"1\",\n        \"identity_data\": {\n          \"email\": \"example@email.com\",\n          \"email_verified\": true,\n          \"phone_verified\": false,\n          \"sub\": \"1\"\n        },\n        \"provider\": \"email\",\n        \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",\n        \"created_at\": \"2024-01-01T00:00:00Z\",\n        \"updated_at\": \"2024-01-01T00:00:00Z\",\n        \"email\": \"email@example.com\"\n      }\n    ],\n    \"created_at\": \"2024-01-01T00:00:00Z\",\n    \"updated_at\": \"2024-01-01T00:00:00Z\",\n    \"is_anonymous\": false\n  }\n}\n```\n"}]},{"id":"list-users","title":"list_users()","params":[{"name":"params","isOptional":true,"type":"PageParams","description":"An object which supports page and per_page as numbers, to alter the paginated results.\n","subContent":[{"name":"page","isOptional":true,"type":"number","description":"The page number"},{"name":"per_page","isOptional":true,"type":"number","description":"Number of items returned per page"}]}],"notes":"- Defaults to return 50 users per page.\n","examples":[{"id":"get-a-full-list-of-users","name":"Get a page of users","isSpotlight":true,"code":"```python\nresponse = supabase.auth.admin.list_users()\n```\n"},{"id":"get-paginated-list-of-users","name":"Paginated list of users","isSpotlight":false,"code":"```python\nresponse = supabase.auth.admin.list_users(\n    page=1,\n    per_page=1000,\n)\n```\n"}]},{"id":"create-user","title":"create_user()","params":[{"name":"attributes","isOptional":false,"type":"AdminUserAttributes","subContent":[{"name":"app_metadata","isOptional":true,"type":"object","description":"A custom data object to store the user's application specific metadata. This maps to the `auth.users.app_metadata` column.\n"},{"name":"ban_duration","isOptional":true,"type":"string","description":"Determines how long a user is banned for."},{"name":"email","isOptional":true,"type":"string","description":"The user's email."},{"name":"email_confirm","isOptional":true,"type":"boolean","description":"Confirms the user's email address if set to true."},{"name":"nonce","isOptional":true,"type":"string","description":"The nonce sent for reauthentication if the user's password is to be updated."},{"name":"password","isOptional":true,"type":"string","description":"The user's password."},{"name":"phone","isOptional":true,"type":"string","description":"The user's phone."},{"name":"phone_confirm","isOptional":true,"type":"boolean","description":"Confirms the user's phone number if set to true."},{"name":"role","isOptional":true,"type":"string","description":"The `role` claim set in the user's access token JWT."},{"name":"user_metadata","isOptional":true,"type":"object","description":"A custom data object to store the user's metadata. This maps to the `auth.users.raw_user_meta_data` column.\n"}]}],"notes":"- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `create_user()` will not send a confirmation email to the user. You can use [`invite_user_by_email()`](/docs/reference/python/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n","examples":[{"id":"create-a-new-user-with-custom-user-metadata","name":"With custom user metadata","isSpotlight":true,"code":"```python\nresponse = supabase.auth.admin.create_user(\n    {\n        \"email\": \"user@email.com\",\n        \"password\": \"password\",\n        \"user_metadata\": {\"name\": \"Yoda\"},\n    }\n)\n```\n","response":"```json\n{\n  \"user\": {\n    \"id\": \"1\",\n    \"aud\": \"authenticated\",\n    \"role\": \"authenticated\",\n    \"email\": \"example@email.com\",\n    \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",\n    \"phone\": \"\",\n    \"confirmation_sent_at\": \"2024-01-01T00:00:00Z\",\n    \"confirmed_at\": \"2024-01-01T00:00:00Z\",\n    \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",\n    \"app_metadata\": {},\n    \"user_metadata\": {},\n    \"identities\": [\n      {\n        \"identity_id\": \"22222222-2222-2222-2222-222222222222\",\n        \"id\": \"1\",\n        \"user_id\": \"1\",\n        \"identity_data\": {\n          \"email\": \"example@email.com\",\n          \"email_verified\": true,\n          \"phone_verified\": false,\n          \"sub\": \"1\"\n        },\n        \"provider\": \"email\",\n        \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",\n        \"created_at\": \"2024-01-01T00:00:00Z\",\n        \"updated_at\": \"2024-01-01T00:00:00Z\",\n        \"email\": \"email@example.com\"\n      }\n    ],\n    \"created_at\": \"2024-01-01T00:00:00Z\",\n    \"updated_at\": \"2024-01-01T00:00:00Z\",\n    \"is_anonymous\": false\n  }\n}\n```\n"},{"id":"auto-confirm-the-users-email","name":"Auto-confirm the user's email","code":"```python\nresponse = supabase.auth.admin.create_user(\n    {\n        \"email\": \"user@email.com\",\n        \"email_confirm\": True,\n    }\n)\n```\n"},{"id":"auto-confirm-the-users-phone-number","name":"Auto-confirm the user's phone number","code":"```python\nresponse = supabase.auth.admin.create_user(\n    {\n        \"phone\": \"1234567890\",\n        \"phone_confirm\": True,\n    }\n)\n```\n"}]},{"id":"delete-user","title":"delete_user()","params":[{"name":"id","isOptional":false,"type":"string","description":"The user id you want to remove."},{"name":"should_soft_delete","isOptional":true,"type":"boolean","description":"If true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema. Defaults to false for backward compatibility.\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n"}],"description":"Delete a user. Requires a `service_role` key.","notes":"- The `delete_user()` method requires the user's ID, which maps to the `auth.users.id` column.\n","examples":[{"id":"removes-a-user","name":"Removes a user","isSpotlight":true,"code":"```python\nsupabase.auth.admin.delete_user(\n    \"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n)\n```\n"}]},{"id":"invite-user-by-email","title":"invite_user_by_email()","params":[{"name":"email","isOptional":false,"type":"string","description":"The email address of the user."},{"name":"options","isOptional":true,"type":"InviteUserByEmailOptions","subContent":[{"name":"data","isOptional":true,"type":"object","description":"A custom data object to store additional metadata about the user. This maps to the `auth.users.user_metadata` column.\n"},{"name":"redirect_to","isOptional":true,"type":"string","description":"The URL which will be appended to the email link sent to the user's email address. Once clicked the user will end up on this URL.\n"}]}],"description":"Sends an invite link to an email address.","notes":"- Sends an invite link to the user's email address.\n- The `invite_user_by_email()` method is typically used by administrators to invite users to join the application.\n- Note that PKCE is not supported when using `invite_user_by_email`. This is because the browser initiating the invite is often different from the browser accepting the invite which makes it difficult to provide the security guarantees required of the PKCE flow.\n","examples":[{"id":"invite-a-user","name":"Invite a user","isSpotlight":true,"code":"```python\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n```\n","response":"```json\n{\n  \"user\": {\n    \"id\": \"11111111-1111-1111-1111-111111111111\",\n    \"aud\": \"authenticated\",\n    \"role\": \"authenticated\",\n    \"email\": \"example@email.com\",\n    \"invited_at\": \"2024-01-01T00:00:00Z\",\n    \"phone\": \"\",\n    \"confirmation_sent_at\": \"2024-01-01T00:00:00Z\",\n    \"app_metadata\": {\n      \"provider\": \"email\",\n      \"providers\": [\n        \"email\"\n      ]\n    },\n    \"user_metadata\": {},\n    \"identities\": [\n      {\n        \"identity_id\": \"22222222-2222-2222-2222-222222222222\",\n        \"id\": \"11111111-1111-1111-1111-111111111111\",\n        \"user_id\": \"11111111-1111-1111-1111-111111111111\",\n        \"identity_data\": {\n          \"email\": \"example@email.com\",\n          \"email_verified\": false,\n          \"phone_verified\": false,\n          \"sub\": \"11111111-1111-1111-1111-111111111111\"\n        },\n        \"provider\": \"email\",\n        \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",\n        \"created_at\": \"2024-01-01T00:00:00Z\",\n        \"updated_at\": \"2024-01-01T00:00:00Z\",\n        \"email\": \"example@email.com\"\n      }\n    ],\n    \"created_at\": \"2024-01-01T00:00:00Z\",\n    \"updated_at\": \"2024-01-01T00:00:00Z\",\n    \"is_anonymous\": false\n  }\n}\n```\n"}]},{"id":"generate-link","title":"generate_link()","params":[{"name":"params","type":"GenerateLinkParams","subContent":[{"name":"type","type":"signup | invite | magiclink | recovery | email_change_current | email_change_new"},{"name":"email","type":"string"},{"name":"password","type":"string","isOptional":true,"description":"Only required if type is `signup`."},{"name":"new_email","type":"string","isOptional":true,"description":"Only required if type is `email_change_current` or `email_change_new`."},{"name":"options","type":"object","isOptional":true,"subContent":[{"name":"data","type":"object","description":"Custom JSON object containing user metadata, to be stored in the `raw_user_meta_data` column. Only accepted if type is `signup`, `invite`, or `magiclink`.\n"},{"name":"redirect_to","type":"string","description":"A redirect URL which will be appended to the generated email link.\n"}]}]}],"notes":"- The following types can be passed into `generate_link()`: `signup`, `magiclink`, `invite`, `recovery`, `email_change_current`, `email_change_new`, `phone_change`.\n- `generate_link()` only generates the email link for `email_change_email` if the **Secure email change** is enabled in your project's [email auth provider settings](/dashboard/project/_/auth/providers).\n- `generate_link()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n","examples":[{"id":"generate-a-signup-link","name":"Generate a signup link","isSpotlight":true,"code":"```python\nresponse = supabase.auth.admin.generate_link(\n    {\n        \"type\": \"signup\",\n        \"email\": \"email@example.com\",\n        \"password\": \"secret\",\n    }\n)\n```\n","response":"```json\n{\n  \"properties\": {\n    \"action_link\": \"<LINK_TO_SEND_TO_USER>\",\n    \"email_otp\": \"999999\",\n    \"hashed_token\": \"<HASHED_TOKEN\",\n    \"redirect_to\": \"<REDIRECT_URL>\",\n    \"verification_type\": \"signup\"\n  },\n  \"user\": {\n    \"id\": \"11111111-1111-1111-1111-111111111111\",\n    \"aud\": \"authenticated\",\n    \"role\": \"authenticated\",\n    \"email\": \"email@example.com\",\n    \"phone\": \"\",\n    \"confirmation_sent_at\": \"2024-01-01T00:00:00Z\",\n    \"app_metadata\": {\n      \"provider\": \"email\",\n      \"providers\": [\n        \"email\"\n      ]\n    },\n    \"user_metadata\": {},\n    \"identities\": [\n      {\n        \"identity_id\": \"22222222-2222-2222-2222-222222222222\",\n        \"id\": \"11111111-1111-1111-1111-111111111111\",\n        \"user_id\": \"11111111-1111-1111-1111-111111111111\",\n        \"identity_data\": {\n          \"email\": \"email@example.com\",\n          \"email_verified\": false,\n          \"phone_verified\": false,\n          \"sub\": \"11111111-1111-1111-1111-111111111111\"\n        },\n        \"provider\": \"email\",\n        \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",\n        \"created_at\": \"2024-01-01T00:00:00Z\",\n        \"updated_at\": \"2024-01-01T00:00:00Z\",\n        \"email\": \"email@example.com\"\n      }\n    ],\n    \"created_at\": \"2024-01-01T00:00:00Z\",\n    \"updated_at\": \"2024-01-01T00:00:00Z\",\n    \"is_anonymous\": false\n  }\n}\n```\n"},{"id":"generate-an-invite-link","name":"Generate an invite link","isSpotlight":false,"code":"```python\nresponse = supabase.auth.admin.generate_link(\n    {\n        \"type\": \"invite\",\n        \"email\": \"email@example.com\",\n    }\n)\n```\n"},{"id":"generate-a-magic-link","name":"Generate a magic link","isSpotlight":false,"code":"```python\nresponse = supabase.auth.admin.generate_link(\n    {\n        \"type\": \"magiclink\",\n        \"email\": \"email@example.com\",\n    }\n)\n```\n"},{"id":"generate-a-recovery-link","name":"Generate a recovery link","isSpotlight":false,"code":"```python\nresponse = supabase.auth.admin.generate_link(\n    {\n        \"type\": \"recovery\",\n        \"email\": \"email@example.com\",\n    }\n)\n```\n"},{"id":"generate-links-to-change-current-email-address","name":"Generate links to change current email address","isSpotlight":false,"code":"```python\n# Generate an email change link to be sent to the current email address\nresponse = supabase.auth.admin.generate_link(\n    {\n        \"type\": \"email_change_current\",\n        \"email\": \"current.email@example.com\",\n        \"new_email\": \"new.email@example.com\",\n    }\n)\n\n# Generate an email change link to be sent to the new email address\nresponse = supabase.auth.admin.generate_link(\n    {\n        \"type\": \"email_change_new\",\n        \"email\": \"current.email@example.com\",\n        \"new_email\": \"new.email@example.com\",\n    }\n)\n```\n"}]},{"id":"update-user-by-id","title":"update_user_by_id()","params":[{"name":"uid","isOptional":false,"type":"string"},{"name":"attributes","isOptional":false,"type":"AdminUserAttributes","description":"The data you want to update.\n\nThis function should only be called on a server. Never expose your `service_role` key in the browser.\n","subContent":[{"name":"app_metadata","isOptional":true,"type":"object","description":"A custom data object to store the user's application specific metadata. This maps to the `auth.users.app_metadata` column.\n"},{"name":"ban_duration","isOptional":true,"type":"string","description":"Determines how long a user is banned for."},{"name":"email","isOptional":true,"type":"string","description":"The user's email."},{"name":"email_confirm","isOptional":true,"type":"boolean","description":"Confirms the user's email address if set to true."},{"name":"nonce","isOptional":true,"type":"string","description":"The nonce sent for reauthentication if the user's password is to be updated."},{"name":"password","isOptional":true,"type":"string","description":"The user's password."},{"name":"phone","isOptional":true,"type":"string","description":"The user's phone."},{"name":"phone_confirm","isOptional":true,"type":"boolean","description":"Confirms the user's phone number if set to true."},{"name":"role","isOptional":true,"type":"string","description":"The `role` claim set in the user's access token JWT."},{"name":"user_metadata","isOptional":true,"type":"string","description":"A custom data object to store the user's metadata. This maps to the `auth.users.raw_user_meta_data` column."}]}],"examples":[{"id":"updates-a-users-email","name":"Updates a user's email","isSpotlight":false,"code":"```python\nresponse = supabase.auth.admin.update_user_by_id(\n    \"11111111-1111-1111-1111-111111111111\",\n    {\n        \"email\": \"new@email.com\",\n    }\n)\n```\n","response":"```json\n{\n  \"user\": {\n    \"id\": \"11111111-1111-1111-1111-111111111111\",\n    \"aud\": \"authenticated\",\n    \"role\": \"authenticated\",\n    \"email\": \"new@email.com\",\n    \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",\n    \"phone\": \"\",\n    \"confirmed_at\": \"2024-01-01T00:00:00Z\",\n    \"recovery_sent_at\": \"2024-01-01T00:00:00Z\",\n    \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",\n    \"app_metadata\": {\n      \"provider\": \"email\",\n      \"providers\": [\n        \"email\"\n      ]\n    },\n    \"user_metadata\": {\n      \"email\": \"example@email.com\",\n      \"email_verified\": false,\n      \"phone_verified\": false,\n      \"sub\": \"11111111-1111-1111-1111-111111111111\"\n    },\n    \"identities\": [\n      {\n        \"identity_id\": \"22222222-2222-2222-2222-222222222222\",\n        \"id\": \"11111111-1111-1111-1111-111111111111\",\n        \"user_id\": \"11111111-1111-1111-1111-111111111111\",\n        \"identity_data\": {\n          \"email\": \"example@email.com\",\n          \"email_verified\": false,\n          \"phone_verified\": false,\n          \"sub\": \"11111111-1111-1111-1111-111111111111\"\n        },\n        \"provider\": \"email\",\n        \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",\n        \"created_at\": \"2024-01-01T00:00:00Z\",\n        \"updated_at\": \"2024-01-01T00:00:00Z\",\n        \"email\": \"example@email.com\"\n      }\n    ],\n    \"created_at\": \"2024-01-01T00:00:00Z\",\n    \"updated_at\": \"2024-01-01T00:00:00Z\",\n    \"is_anonymous\": false\n  }\n}\n```\n"},{"id":"updates-a-users-password","name":"Updates a user's password","isSpotlight":false,"code":"```python\nresponse = supabase.auth.admin.update_user_by_id(\n    \"6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4\",\n    {\n        \"password\": \"new_password\",\n    }\n)\n```\n"},{"id":"updates-a-users-metadata","name":"Updates a user's metadata","isSpotlight":true,"code":"```python\nresponse = supabase.auth.admin.update_user_by_id(\n    \"6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4\",\n    {\n        \"user_metadata\": {\"hello\": \"world\"},\n    }\n)\n```\n"},{"id":"updates-a-users-app-metadata","name":"Updates a user's app_metadata","isSpotlight":false,"code":"```python\nresponse = supabase.auth.admin.update_user_by_id(\n    \"6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4\",\n    {\n        \"app_metadata\": {\"plan\": \"trial\"},\n    }\n)\n```\n"},{"id":"confirms-a-users-email-address","name":"Confirms a user's email address","isSpotlight":false,"code":"```python\nresponse = supabase.auth.admin.update_user_by_id(\n    \"6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4\",\n    {\n        \"email_confirm\": True,\n    }\n)\n```\n"},{"id":"confirms-a-users-phone-number","name":"Confirms a user's phone number","isSpotlight":false,"code":"```python\nresponse = supabase.auth.admin.update_user_by_id(\n    \"6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4\",\n    {\n        \"phone_confirm\": True,\n    }\n)\n```\n"}]},{"id":"mfa-delete-factor","title":"mfa.delete_factor()","params":[{"name":"params","isOptional":false,"type":"AuthMFAAdminDeleteFactorParams","subContent":[{"name":"id","isOptional":false,"type":"string","description":"ID of the MFA factor to delete."},{"name":"user_id","isOptional":false,"type":"string","description":"ID of the user whose factor is being deleted."}]}],"notes":"Deletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n","examples":[{"id":"delete-factor","name":"Delete a factor for a user","isSpotlight":true,"code":"```python\nresponse = supabase.auth.admin.mfa.delete_factor(\n    {\n        \"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n        \"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\"\n    }\n)\n```\n","response":"```json\n{\n  \"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"\n}\n```\n"}]},{"id":"reset-password-for-email","title":"reset_password_for_email()","params":[{"name":"email","isOptional":false,"type":"string","description":"The email address of the user."},{"name":"options","isOptional":true,"type":"object","subContent":[{"name":"redirect_to","isOptional":true,"type":"string","description":"The URL to send the user to after they click the password reset link. Must be in your configured redirect URLs.\n"},{"name":"captcha_token","isOptional":true,"type":"string","description":"Verification token received when the user completes the captcha on the site."}]}],"notes":"- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `reset_password_for_email()` only sends a password reset link to the user's email.\nTo update the user's password, see [`update_user()`](/docs/reference/python/auth-updateuser).\n- When the user clicks the reset link in the email they are redirected back to your application.\nYou can configure the URL that the user is redirected to with the `redirectTo` parameter.\nSee [redirect URLs and wildcards](docs/guides/auth/redirect-urls#use-wildcards-in-redirect-urls) to add additional redirect URLs to your project.\n- After the user has been redirected successfully, prompt them for a new password and call `update_user()`:\n```python\nresponse = supabase.auth.update_user(\n    {\"password\": new_password}\n)\n```\n","examples":[{"id":"reset-password","name":"Reset password","isSpotlight":true,"code":"```python\nsupabase.auth.reset_password_for_email(\n    email,\n    {\n        \"redirect_to\": \"https://example.com/update-password\",\n    }\n)\n```\n"}]},{"id":"select","title":"Fetch data: select()","notes":"- By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n","params":[{"name":"columns","isOptional":true,"type":"string","description":"The columns to retrieve, defaults to `*`."},{"name":"count","isOptional":true,"type":"CountMethod","description":"The property to use to get the count of rows returned."}],"examples":[{"id":"getting-your-data","name":"Getting your data","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth'),\n  (3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Mercury\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Earth\"\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Mars\"\n    }\n  ],\n  \"count\": null\n}\n```\n"},{"id":"selecting-specific-columns","name":"Selecting specific columns","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"name\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth'),\n  (3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"Mercury\"\n    },\n    {\n      \"name\": \"Earth\"\n    },\n    {\n      \"name\": \"Mars\"\n    }\n  ],\n  \"count\": null\n}\n```\n"},{"id":"query-referenced-tables","name":"Query referenced tables","description":"If your database has foreign key relationships, you can query related tables too.\n","code":"```python\nresponse = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments(name)\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"instruments\": [\n        {\n          \"name\": \"violin\"\n        }\n      ]\n    },\n    {\n      \"name\": \"woodwinds\",\n      \"instruments\": [\n        {\n          \"name\": \"flute\"\n        }\n      ]\n    }\n  ],\n  \"count\": null\n}\n```\n"},{"id":"query-referenced-tables-through-a-join-table","name":"Query referenced tables through a join table","code":"```python\nresponse = (\n    supabase.table(\"users\")\n    .select(\"name, teams(name)\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 primary key,\n    name text\n  );\ncreate table\n  teams (\n    id int8 primary key,\n    name text\n  );\n-- join table\ncreate table\n  users_teams (\n    user_id int8 not null references users,\n    team_id int8 not null references teams,\n    -- both foreign keys must be part of a composite primary key\n    primary key (user_id, team_id)\n  );\n\ninsert into\n  users (id, name)\nvalues\n  (1, 'Kiran'),\n  (2, 'Evan');\ninsert into\n  teams (id, name)\nvalues\n  (1, 'Green'),\n  (2, 'Blue');\ninsert into\n  users_teams (user_id, team_id)\nvalues\n  (1, 1),\n  (1, 2),\n  (2, 2);\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"Kiran\",\n      \"teams\": [\n        {\n          \"name\": \"Green\"\n        },\n        {\n          \"name\": \"Blue\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Evan\",\n      \"teams\": [\n        {\n          \"name\": \"Blue\"\n        }\n      ]\n    }\n  ],\n  \"count\": null\n}\n```\n","description":"If you're in a situation where your tables are **NOT** directly\nrelated, but instead are joined by a _join table_, you can still use\nthe `select()` method to query the related data. The join table needs\nto have the foreign keys as part of its composite primary key.\n","hideCodeBlock":true},{"id":"query-the-same-referenced-table-multiple-times","name":"Query the same referenced table multiple times","code":"```python\nresponse = (\n    supabase.table(\"messages\")\n    .select(\"content,from:sender_id(name),to:receiver_id(name)\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\n create table\n users (id int8 primary key, name text);\n\n create table\n   messages (\n     sender_id int8 not null references users,\n     receiver_id int8 not null references users,\n     content text\n   );\n\n insert into\n   users (id, name)\n values\n   (1, 'Kiran'),\n   (2, 'Evan');\n\n insert into\n   messages (sender_id, receiver_id, content)\n values\n   (1, 2, '👋');\n ```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"content\": \"👋\",\n      \"from\": {\n        \"name\": \"Kiran\"\n      },\n      \"to\": {\n        \"name\": \"Evan\"\n      }\n    }\n  ],\n  \"count\": null\n}\n```\n","description":"If you need to query the same referenced table twice, use the name of the\njoined column to identify which join to use. You can also give each\ncolumn an alias.\n","hideCodeBlock":true},{"id":"filtering-through-referenced-tables","name":"Filtering through referenced tables","code":"```python\nresponse = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments(*)\")\n    .eq(\"instruments.name\", \"guqin\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"instruments\": null\n    },\n    {\n      \"name\": \"woodwinds\",\n      \"instruments\": null\n    }\n  ],\n  \"count\": null\n}\n```\n","description":"If the filter on a referenced table's column is not satisfied, the referenced\ntable returns `[]` or `null` but the parent table is not filtered out.\nIf you want to filter out the parent table rows, use the `!inner` hint\n","hideCodeBlock":true},{"id":"querying-referenced-table-with-count","name":"Querying referenced table with count","code":"```python\nresponse = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"*, instruments(count)\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table orchestral_sections (\n  \"id\" \"uuid\" primary key default \"extensions\".\"uuid_generate_v4\"() not null,\n  \"name\" text\n);\n\ncreate table instruments (\n  \"id\" \"uuid\" primary key default \"extensions\".\"uuid_generate_v4\"() not null,\n  \"name\" text,\n  \"section_id\" \"uuid\" references public.orchestral_sections on delete cascade\n);\n\nwith section as (\n  insert into orchestral_sections (name)\n  values ('strings') returning id\n)\ninsert into instruments (name, section_id) values\n('violin', (select id from section)),\n('viola', (select id from section)),\n('cello', (select id from section)),\n('double bass', (select id from section));\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": \"c31e7151-5a6f-453c-915b-caf31ec9a0a0\",\n      \"name\": \"strings\",\n      \"instruments\": [\n        {\n          \"count\": 4\n        }\n      ]\n    }\n  ],\n  \"count\": null\n}\n```\n","description":"You can get the number of rows in a related table by using the\n**count** property.\n","hideCodeBlock":true},{"id":"querying-with-count-option","name":"Querying with count option","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\", count=\"exact\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth'),\n  (3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Mercury\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Earth\"\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Mars\"\n    }\n  ],\n  \"count\": 3\n}\n```\n","description":"You can get the number of rows by using the\n*count* parameter in the select query.\n","hideCodeBlock":true},{"id":"querying-json-data","name":"Querying JSON data","code":"```python\nresponse = (\n    supabase.table(\"users\")\n    .select(\"id, name, address->city\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\ninsert into\n  users (id, name, address)\nvalues\n  (1, 'Avdotya', '{\"city\":\"Saint Petersburg\"}');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Avdotya\",\n      \"city\": \"Saint Petersburg\"\n    }\n  ],\n  \"count\": null\n}\n```\n","description":"You can select and filter data inside of\n[JSON](/docs/guides/database/json) columns. Postgres offers some\n[operators](/docs/guides/database/json#query-the-jsonb-data) for\nquerying JSON data.\n","hideCodeBlock":true},{"id":"querying-referenced-table-with-inner-join","name":"Querying referenced table with inner join","code":"```python\nresponse = (\n    supabase.table(\"instruments\")\n    .select(\"name, orchestral_sections!inner(name)\")\n    .eq(\"orchestral_sections.name\", \"woodwinds\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"flute\",\n      \"orchestral_sections\": {\n        \"name\": \"woodwinds\"\n      }\n    }\n  ],\n  \"count\": null\n}\n```\n","description":"If you don't want to return the referenced table contents, you can leave the parenthesis empty.\nLike `.select('name, orchestral_sections!inner()')`.\n","hideCodeBlock":true},{"id":"switching-schemas-per-query","name":"Switching schemas per query","code":"```python\nresponse = (\n    supabase.schema(\"myschema\")\n    .table(\"mytable\")\n    .select(\"*\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate schema myschema;\n\ncreate table myschema.mytable (\n  id uuid primary key default gen_random_uuid(),\n  data text\n);\n\ninsert into myschema.mytable (data) values ('mydata');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": \"b1a8c0b5-bdf0-46f1-95a5-f0fb9cb2f410\",\n      \"data\": \"mydata\"\n    }\n  ],\n  \"count\": null\n}\n```\n","description":"In addition to setting the schema during initialization, you can also switch schemas on a per-query basis.\nMake sure you've set up your [database privileges and API settings](/docs/guides/api/using-custom-schemas).\n","hideCodeBlock":true}]},{"id":"insert","title":"Create data: insert()","params":[{"name":"json","isOptional":false,"type":"dict, list","description":"The values to insert. Pass an dict to insert a single row or an list to insert multiple rows."},{"name":"count","isOptional":true,"type":"CountMethod","description":"The property to use to get the count of rows returned."},{"name":"returning","isOptional":true,"type":"ReturnMethod","description":"Either 'minimal' or 'representation'. Defaults to 'representation'."},{"name":"default_to_null","isOptional":true,"type":"bool","description":"Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts."}],"examples":[{"id":"create-a-record","name":"Create a record","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .insert({\"id\": 1, \"name\": \"Pluto\"})\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Pluto\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"bulk-create","name":"Bulk create","code":"```python\ntry:\n    response = (\n        supabase.table(\"characters\")\n        .insert([\n            {\"id\": 1, \"name\": \"Frodo\"},\n            {\"id\": 2, \"name\": \"Sam\"},\n        ])\n        .execute()\n    )\n    return response\nexcept Exception as exception:\n    return exception\n```\n","data":{"sql":"```sql\ncreate table\n  characters (id int8 primary key, name text);\n```\n"},"response":"```json\n{\n  \"_raw_error\": {\n    \"code\": \"23505\",\n    \"details\": \"Key (id)=(1) already exists.\",\n    \"hint\": null,\n    \"message\": \"duplicate key value violates unique constraint \\\"characters_pkey\\\"\"\n  },\n  \"message\": \"duplicate key value violates unique constraint \\\"characters_pkey\\\"\",\n  \"code\": \"23505\",\n  \"hint\": null,\n  \"details\": \"Key (id)=(1) already exists.\"\n}\n```\n","description":"A bulk create operation is handled in a single transaction.\nIf any of the inserts fail, none of the rows are inserted.\n","hideCodeBlock":true}]},{"id":"update","title":"Modify data: update()","notes":"- `update()` should always be combined with [Filters](/docs/reference/python/using-filters) to target the item(s) you wish to update.\n","params":[{"name":"json","isOptional":false,"type":"dict, list","description":"The values to insert. Pass an dict to insert a single row or an list to insert multiple rows."},{"name":"count","isOptional":true,"type":"CountMethod","description":"The property to use to get the count of rows returned."}],"examples":[{"id":"updating-your-data","name":"Updating your data","code":"```python\nresponse = (\n    supabase.table(\"instruments\")\n    .update({\"name\": \"piano\"})\n    .eq(\"id\", 1)\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'harpsichord');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"piano\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"updating-json-data","name":"Updating JSON data","code":"```python\nresponse = (\n    supabase.table(\"users\")\n    .update({\"address\": {\"street\": \"Melrose Place\", \"postcode\": 90210}})\n    .eq(\"address->postcode\", 90210)\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\ninsert into\n  users (id, name, address)\nvalues\n  (1, 'Michael', '{ \"postcode\": 90210 }');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Michael\",\n      \"address\": {\n        \"street\": \"Melrose Place\",\n        \"postcode\": 90210\n      }\n    }\n  ],\n  \"count\": null\n}\n```\n","description":"Postgres offers some [operators](/docs/guides/database/json#query-the-jsonb-data) for working with JSON data. Currently, it is only possible to update the entire JSON document.\n","hideCodeBlock":true}]},{"id":"upsert","title":"Upsert data: upsert()","notes":"- Primary keys must be included in the `values` dict to use upsert.\n","params":[{"name":"json","isOptional":false,"type":"dict, list","description":"The values to insert. Pass an dict to insert a single row or an list to insert multiple rows."},{"name":"count","isOptional":true,"type":"CountMethod","description":"The property to use to get the count of rows returned."},{"name":"returning","isOptional":true,"type":"ReturnMethod","description":"Either 'minimal' or 'representation'. Defaults to 'representation'."},{"name":"ignore_duplicates","isOptional":true,"type":"bool","description":"Whether duplicate rows should be ignored."},{"name":"on_conflict","isOptional":true,"type":"string","description":"Specified columns to be made to work with UNIQUE constraint."},{"name":"default_to_null","isOptional":true,"type":"bool","description":"Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts."}],"examples":[{"id":"upsert-your-data","name":"Upsert your data","code":"```python\nresponse = (\n    supabase.table(\"instruments\")\n    .upsert({\"id\": 1, \"name\": \"piano\"})\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'harpsichord');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"piano\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"bulk-upsert-your-data","name":"Bulk Upsert your data","code":"```python\nresponse = (\n    supabase.table(\"instruments\")\n    .upsert([{\"id\": 1, \"name\": \"piano\"}, {\"id\": 2, \"name\": \"guitar\"}])\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'harpsichord');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"piano\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"guitar\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true},{"id":"upserting-into-tables-with-constraints","name":"Upserting into tables with constraints","code":"```python\nresponse = (\n    supabase.table(\"users\")\n    .upsert(\n        {\"id\": 42, \"handle\": \"saoirse\", \"display_name\": \"Saoirse\"},\n        on_conflict=\"handle\",\n    )\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 generated by default as identity primary key,\n    handle text not null unique,\n    display_name text\n  );\n\ninsert into\n  users (id, handle, display_name)\nvalues\n  (1, 'saoirse', null);\n```\n"},"response":"```json\n{\n  \"_raw_error\": {\n    \"code\": \"23505\",\n    \"details\": \"Key (handle)=(saoirse) already exists.\",\n    \"hint\": null,\n    \"message\": \"duplicate key value violates unique constraint \\\"users_handle_key\\\"\"\n  },\n  \"message\": \"duplicate key value violates unique constraint \\\"users_handle_key\\\"\",\n  \"code\": \"23505\",\n  \"hint\": null,\n  \"details\": \"Key (handle)=(saoirse) already exists.\"\n}\n```\n","description":"In the following query, `upsert()` implicitly uses the `id`(primary key) column to determine conflicts. If there is no existing row with the same `id`, `upsert()` inserts a new row, which will fail in this case as there is already a row with `handle` `\"saoirse\"`.\nUsing the `on_conflict` option, you can instruct `upsert()` to use another column with a unique constraint to determine conflicts.\n","hideCodeBlock":true}]},{"id":"delete","title":"Delete data: delete()","notes":"- `delete()` should always be combined with [filters](/docs/reference/python/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have\n  [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only\n  rows visible through `SELECT` policies are deleted. Note that by default\n  no rows are visible, so you need at least one `SELECT`/`ALL` policy that\n  makes the rows visible.\n- When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.\n","params":[{"name":"count","isOptional":true,"type":"CountMethod","description":"The property to use to get the count of rows returned."},{"name":"returning","isOptional":true,"type":"ReturnMethod","description":"Either 'minimal' or 'representation'. Defaults to 'representation'."}],"examples":[{"id":"delete-records","name":"Delete records","code":"```python\nresponse = (\n    supabase.table(\"countries\")\n    .delete()\n    .eq(\"id\", 1)\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  countries (id int8 primary key, name text);\n\ninsert into\n  countries (id, name)\nvalues\n  (1, 'Mordor');\n```\n"},"response":"```\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Mordor\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"delete-multiple-records","name":"Delete multiple records","code":"```python\nresponse = (\n    supabase.table(\"countries\")\n    .delete()\n    .in_(\"id\", [1, 2, 3])\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  characters (id int8 primary key, name text);\n\ninsert into\n  characters (id, name)\nvalues\n  (1, 'Harry'), (2, 'Hermione'), (3, 'Ron');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Harry\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Hermione\"\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Ron\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":false,"isSpotlight":false}]},{"id":"rpc","title":"Postgres functions: rpc()","description":"You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere.\nFunctions are useful when the logic rarely changes—like for password resets and updates.\n\n```sql\ncreate or replace function hello_world() returns text as $$\n  select 'Hello world';\n$$ language sql;\n```\n","params":[{"name":"fn","isOptional":false,"type":"callable","description":"The stored procedure call to be executed."},{"name":"params","isOptional":true,"type":"dict of any","description":"Parameters passed into the stored procedure call."},{"name":"get","isOptional":true,"type":"dict of any","description":"When set to `true`, `data` will not be returned. Useful if you only need the count."},{"name":"head","isOptional":true,"type":"dict of any","description":"When set to `true`, the function will be called with read-only access mode."},{"name":"count","isOptional":true,"type":"CountMethod","description":"Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html). `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n"}],"examples":[{"id":"call-a-postgres-function-without-arguments","name":"Call a Postgres function without arguments","code":"```python\nresponse = (\n    supabase.rpc(\"hello_world\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate function hello_world() returns text as $$\n  select 'Hello world';\n$$ language sql;\n```\n"},"response":"```json\n{\n  \"data\": \"Hello world\",\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"call-a-postgres-function-with-arguments","name":"Call a Postgres function with arguments","code":"```python\nresponse = (\n    supabase.rpc(\"echo\", { \"say\": \"👋\" })\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate function echo(say text) returns text as $$\n  select say;\n$$ language sql;\n```\n"},"response":"```json\n  {\n    \"data\": \"👋\",\n    \"count\": null\n  }\n  ```\n","hideCodeBlock":true},{"id":"bulk-processing","name":"Bulk processing","code":"```python\nresponse = (\n    supabase.rpc(\"add_one_each\", {\"arr\": [1, 2, 3]})\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate function add_one_each(arr int[]) returns int[] as $$\n  select array_agg(n + 1) from unnest(arr) as n;\n$$ language sql;\n```\n"},"response":"```json\n{\n  \"data\": [\n    2,\n    3,\n    4\n  ],\n  \"count\": null\n}\n```\n","description":"You can process large payloads by passing in an array as an argument.\n","hideCodeBlock":true},{"id":"call-a-postgres-function-with-filters","name":"Call a Postgres function with filters","code":"```python\nresponse = (\n    supabase.rpc(\"list_stored_planets\")\n    .eq(\"id\", 1)\n    .single()\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Earth'),\n  (2, 'Mars');\n\ncreate function list_stored_planets() returns setof planets as $$\n  select * from planets;\n$$ language sql;\n```\n"},"response":"```json\n{\n  \"data\": {\n    \"id\": 1,\n    \"name\": \"Earth\"\n  },\n  \"count\": null\n}\n```\n","description":"Postgres functions that return tables can also be combined with [Filters](/docs/reference/javascript/using-filters) and [Modifiers](/docs/reference/javascript/using-modifiers).\n","hideCodeBlock":true},{"id":"call-a-read-only-postgres-function","name":"Call a read-only Postgres function","code":"```python\nresponse = (\n    supabase.rpc(\"hello_world\", get=True)\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate function hello_world() returns text as $$\n  select 'Hello world';\n$$ language sql;\n```\n"},"response":"```json\n{\n  \"data\": \"Hello world\",\n  \"count\": null\n}\n```\n","hideCodeBlock":true}]},{"id":"using-filters","title":"Using Filters","description":"Filters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n","examples":[{"id":"applying-filters","name":"Applying Filters","description":"Filters must be applied after any of `select()`, `update()`, `upsert()`,\n`delete()`, and `rpc()` and before\n[modifiers](/docs/reference/python/using-modifiers).\n","code":"```python\n# Correct\nresponse = (\n    supabase.table(\"instruments\")\n    .select(\"name, section_id\")\n    .eq(\"name\", \"flute\")\n    .execute()\n)\n\n# Incorrect\nresponse = (\n    supabase.table(\"instruments\")\n    .eq(\"name\", \"flute\")\n    .select(\"name, section_id\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"}},{"id":"chaining-filters","name":"Chaining","description":"Filters can be chained together to produce advanced queries. For example,\nto query instruments with octave ranges between 3 and 7 (non-inclusive).\n","code":"```python\nresponse = (\n    supabase.table(\"instruments\")\n    .select(\"name, section_id\")\n    .gte(\"octave_range\", 3)\n    .lt(\"octave_range\", 7)\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    secttion_id int8 not null references orchestral_sections,\n    name text,\n    octave_range int8\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'percussion'),\n  (2, 'strings');\ninsert into\n  instruments (id, section_id, name, octave_range)\nvalues\n  (1, 2, 'violin', 4),\n  (2, 1, 'piano', 7);\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"violin\",\n      \"section_id\": 2\n    }\n  ],\n  \"count\": null\n}\n```\n"},{"id":"conditional-chaining","name":"Conditional chaining","description":"Filters can be built up one step at a time and then executed.\n","code":"```python\nfilterByName = None\nfilterOctaveLow = 3\nfilterOctaveHigh = 7\n\nquery = supabase.table(\"instruments\").select(\"name, section_id\")\n\nif filterByName:\n    query = query.eq(\"name\", filterByName)\n\nif filterAgeLow:\n    query = query.gte(\"octave_range\", filterOctaveLow)\n\nif filterAgeHigh:\n    query = query.lt(\"octave_range\", filterOctaveHigh)\n\nresponse = query.execute()\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text,\n    octave_range int8\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'percussion'),\n  (2, 'strings');\ninsert into\n  instruments (id, section_id, name, octave_range)\nvalues\n  (1, 2, 'violin', 4),\n  (2, 1, 'piano', 7);\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"violin\",\n      \"section_id\": 2\n    }\n  ],\n  \"count\": null\n}\n```\n"},{"id":"filter-by-value-within-json-column","name":"Filter by values within JSON column","code":"```python\nresponse = (\n    supabase.table(\"users\")\n    .select(\"*\")\n    .eq(\"address->postcode\", 90210)\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\ninsert into\n  users (id, name, address)\nvalues\n  (1, 'Michael', '{ \"postcode\": 90210 }'),\n  (2, 'Jane', null);\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Michael\",\n      \"address\": {\n        \"postcode\": 90210\n      }\n    }\n  ],\n  \"count\": null\n}\n```\n"},{"id":"filter-foreign-tables","name":"Filter Foreign Tables","code":"```python\nresponse = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments!inner(name)\")\n    .eq(\"instruments.name\", \"flute\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"woodwinds\",\n      \"instruments\": [\n        {\n          \"name\": \"flute\"\n        }\n      ]\n    }\n  ],\n  \"count\": null\n}\n```\n","description":"You can filter on foreign tables in your `select()` query using dot\nnotation.\n"}]},{"id":"eq","title":"eq()","description":"Match only rows where `column` is equal to `value`.\n","params":[{"name":"column","isOptional":false,"type":"string","description":"The column to filter on"},{"name":"value","isOptional":false,"type":"any","description":"The value to filter by"}],"examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .eq(\"name\", \"Earth\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth'),\n  (3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 2,\n      \"name\": \"Earth\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"neq","title":"neq()","description":"Match only rows where `column` is not equal to `value`.\n","params":[{"name":"column","isOptional":false,"type":"string","description":"The column to filter on"},{"name":"value","isOptional":false,"type":"any","description":"The value to filter by"}],"examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .neq(\"name\", \"Earth\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth'),\n  (3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Mercury\"\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Mars\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"gt","title":"gt()","description":"Match only rows where `column` is greather than `value`.\n","params":[{"name":"column","isOptional":false,"type":"string","description":"The column to filter on"},{"name":"value","isOptional":false,"type":"any","description":"The value to filter by"}],"examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .gt(\"id\", 2)\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth'),\n  (3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 3,\n      \"name\": \"Mars\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true,"description":"When using [reserved words](https://www.postgresql.org/docs/current/sql-keywords-appendix.html) for column names you need\nto add double quotes e.g. `.gt('\"order\"', 2)`\n"}]},{"id":"gte","title":"gte()","description":"Match only rows where `column` is greater than or equal to `value`.\n","params":[{"name":"column","isOptional":false,"type":"string","description":"The column to filter on"},{"name":"value","isOptional":false,"type":"any","description":"The value to filter by"}],"examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .gte(\"id\", 2)\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth'),\n  (3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 2,\n      \"name\": \"Earth\"\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Mars\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"lt","title":"lt()","description":"Match only rows where `column` is less than `value`.\n","params":[{"name":"column","isOptional":false,"type":"string","description":"The column to filter on"},{"name":"value","isOptional":false,"type":"any","description":"The value to filter by"}],"examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .lt(\"id\", 2)\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\nplanets (id int8 primary key, name text);\n\ninsert into\nplanets (id, name)\nvalues\n(1, 'Mercury'),\n(2, 'Earth'),\n(3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Mercury\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"lte","title":"lte()","description":"Match only rows where `column` is less than or equal to `value`.\n","params":[{"name":"column","isOptional":false,"type":"string","description":"The column to filter on"},{"name":"value","isOptional":false,"type":"any","description":"The value to filter by"}],"examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .lte(\"id\", 2)\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\nplanets (id int8 primary key, name text);\n\ninsert into\nplanets (id, name)\nvalues\n(1, 'Mercury'),\n(2, 'Earth'),\n(3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Mercury\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Earth\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"like","title":"like()","description":"Match only rows where `column` matches `pattern` case-sensitively.\n","params":[{"name":"column","isOptional":false,"type":"string","description":"The name of the column to apply a filter on"},{"name":"pattern","isOptional":false,"type":"string","description":"The pattern to match by"}],"examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .like(\"name\", \"%Ea%\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\nplanets (id int8 primary key, name text);\n\ninsert into\nplanets (id, name)\nvalues\n(1, 'Mercury'),\n(2, 'Earth'),\n(3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 2,\n      \"name\": \"Earth\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"ilike","title":"ilike()","description":"Match only rows where `column` matches `pattern` case-insensitively.\n","params":[{"name":"column","isOptional":false,"type":"string","description":"The name of the column to apply a filter on"},{"name":"pattern","isOptional":false,"type":"string","description":"The pattern to match by"}],"examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .ilike(\"name\", \"%ea%\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\nplanets (id int8 primary key, name text);\n\ninsert into\nplanets (id, name)\nvalues\n(1, 'Mercury'),\n(2, 'Earth'),\n(3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 2,\n      \"name\": \"Earth\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"is","title":"is_()","description":"Match only rows where `column` IS `value`.\n","params":[{"name":"column","isOptional":false,"type":"string","description":"The name of the column to apply a filter on"},{"name":"value","isOptional":false,"type":"null | boolean","description":"The value to match by"}],"examples":[{"id":"checking-nullness","name":"Checking for nullness, True or False","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .is_(\"name\", \"null\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Earth'),\n  (2, null);\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 2,\n      \"name\": null\n    }\n  ],\n  \"count\": null\n}\n```\n","description":"Using the `eq()` filter doesn't work when filtering for `null`. Instead, you need to use `is_()`.\n\nTo query for null values in python use the string 'null' instead of the python `None` value.\n\nNote that `is` is a reserved word in Python, so the underscore is added to avoid a syntax error.\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"in","title":"in_()","description":"Match only rows where `column` is included in the `values` array.\n","params":[{"name":"column","isOptional":false,"type":"string","description":"The column to filter on"},{"name":"values","isOptional":false,"type":"array","description":"The values to filter by"}],"examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .in_(\"name\", [\"Earth\", \"Mars\"])\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\nplanets (id int8 primary key, name text);\n\ninsert into\nplanets (id, name)\nvalues\n(1, 'Mercury'),\n(2, 'Earth'),\n(3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 2,\n      \"name\": \"Earth\"\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Mars\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"contains","title":"contains()","description":"Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n","params":[{"name":"column","isOptional":false,"type":"string","description":"The column to filter on"},{"name":"values","isOptional":false,"type":"object","description":"The jsonb, array, or range value to filter with"}],"examples":[{"id":"on-array-columns","name":"On array columns","code":"```python\nresponse = (\n    supabase.table(\"issues\")\n    .select(\"*\")\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 primary key,\n    name text,\n    tags text[]\n  );\ninsert into\n  issues (id, title, tags)\nvalues\n  (1, 'Cache invalidation is not working', array['is:open', 'severity:high', 'priority:low']),\n  (2, 'Use better names', array['is:open', 'severity:low', 'priority:medium']);\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"title\": \"Cache invalidation is not working\",\n      \"tags\": [\n        \"is:open\",\n        \"severity:high\",\n        \"priority:low\"\n      ]\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-range-columns","name":"On range columns","code":"```python\nresponse = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .contains(\"during\", \"[2000-01-01 13:00, 2000-01-01 13:30)\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"room_name\": \"Emerald\",\n      \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n    }\n  ],\n  \"count\": null\n}\n```\n","description":"Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n","hideCodeBlock":true},{"id":"on-jsonb-columns","name":"On `jsonb` columns","code":"```python\nresponse = (\n    supabase.table(\"users\")\n    .select(\"*\")\n    .contains(\"address\", {\"postcode\": 90210})\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\ninsert into\n  users (id, name, address)\nvalues\n  (1, 'Michael', '{ \"postcode\": 90210, \"street\": \"Melrose Place\" }'),\n  (2, 'Jane', '{}');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Michael\",\n      \"address\": {\n        \"street\": \"Melrose Place\",\n        \"postcode\": 90210\n      }\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true}]},{"id":"contained-by","title":"contained_by()","description":"Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n","params":[{"name":"column","isOptional":false,"type":"string","description":"The jsonb, array, or range column to filter on"},{"name":"value","isOptional":false,"type":"object","description":"The jsonb, array, or range value to filter with"}],"examples":[{"id":"on-array-columns","name":"On array columns","code":"```python\nresponse = (\n    supabase.table(\"classes\")\n    .select(\"name\")\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  classes (\n      id int8 primary key,\n      name text,\n      days text[]\n  );\n\ninsert into\n  classes (id, name, days)\nvalues\n  (1, 'Chemistry', array['monday', 'friday']),\n  (2, 'History', array['monday', 'wednesday', 'thursday']);\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"Chemistry\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-range-columns","name":"On range columns","code":"```python\nresponse = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .contained_by(\"during\", \"[2000-01-01 00:00, 2000-01-01 23:59)\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"room_name\": \"Emerald\",\n      \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n    }\n  ],\n  \"count\": null\n}\n```\n","description":"Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n","hideCodeBlock":true},{"id":"on-jsonb-columns","name":"On `jsonb` columns","code":"```python\nresponse = (\n    supabase.table(\"users\")\n    .select(\"name\")\n    .contained_by(\"address\", {})\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\ninsert into\n  users (id, name, address)\nvalues\n  (1, 'Michael', '{ \"postcode\": 90210, \"street\": \"Melrose Place\" }'),\n  (2, 'Jane', '{}');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"Jane\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true}]},{"id":"range-gt","title":"range_gt()","description":"Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n","params":[{"name":"column","isOptional":false,"type":"string","description":"The range column to filter on"},{"name":"range","isOptional":false,"type":"array","description":"The range to filter with"}],"examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n  {\n    \"data\": [\n      {\n        \"id\": 2,\n        \"room_name\": \"Topaz\",\n        \"during\": \"[\\\"2000-01-02 09:00:00\\\",\\\"2000-01-02 10:00:00\\\")\"\n      }\n    ],\n    \"count\": null\n  }\n  ```\n","description":"Postgres supports a number of [range types](https://www.postgresql.org/docs/current/rangetypes.html). You can filter on range columns using the string representation of range values.\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"range-gte","title":"range_gte()","description":"Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n","params":[{"name":"column","isOptional":false,"type":"string","description":"The range column to filter on"},{"name":"range","isOptional":false,"type":"string","description":"The range to filter with"}],"examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 2,\n      \"room_name\": \"Topaz\",\n      \"during\": \"[\\\"2000-01-02 09:00:00\\\",\\\"2000-01-02 10:00:00\\\")\"\n    }\n  ],\n  \"count\": null\n}\n```\n","description":"Postgres supports a number of [range types](https://www.postgresql.org/docs/current/rangetypes.html). You can filter on range columns using the string representation of range values.\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"range-lt","title":"range_lt()","description":"Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n","params":[{"name":"column","isOptional":false,"type":"string","description":"The range column to filter on"},{"name":"range","isOptional":false,"type":"array","description":"The range to filter with"}],"examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"room_name\": \"Emerald\",\n      \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n    }\n  ],\n  \"count\": null\n}\n```\n","description":"Postgres supports a number of [range types](https://www.postgresql.org/docs/current/rangetypes.html). You can filter on range columns using the string representation of range values.\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"range-lte","title":"range_lte()","description":"Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n","params":[{"name":"column","isOptional":false,"type":"string","description":"The range column to filter on"},{"name":"range","isOptional":false,"type":"array","description":"The range to filter with"}],"examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n  {\n    \"data\": [\n      {\n        \"id\": 1,\n        \"room_name\": \"Emerald\",\n        \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n      }\n    ],\n    \"count\": null\n  }\n```\n","description":"Postgres supports a number of [range types](https://www.postgresql.org/docs/current/rangetypes.html). You can filter on range columns using the string representation of range values.\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"range-adjacent","title":"range_adjacent()","description":"Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n","params":[{"name":"column","isOptional":false,"type":"string","description":"The range column to filter on"},{"name":"range","isOptional":false,"type":"array","description":"The range to filter with"}],"examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"room_name\": \"Emerald\",\n      \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n    }\n  ],\n  \"count\": null\n}\n```\n","description":"Postgres supports a number of [range types](https://www.postgresql.org/docs/current/rangetypes.html). You can filter on range columns using the string representation of range values.\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"overlaps","title":"overlaps()","description":"Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n","params":[{"name":"column","isOptional":false,"type":"string","description":"The array or range column to filter on"},{"name":"value","isOptional":false,"type":"Iterable[Any]","description":"The array or range value to filter with"}],"examples":[{"id":"on-array-columns","name":"On array columns","code":"```python\nresponse = (\n    supabase.table(\"issues\")\n    .select(\"title\")\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  issues (\n    id int8 primary key,\n    title text,\n    tags text[]\n  );\n\ninsert into\n  issues (id, title, tags)\nvalues\n  (1, 'Cache invalidation is not working', array['is:open', 'severity:high', 'priority:low']),\n  (2, 'Use better names', array['is:open', 'severity:low', 'priority:medium']);\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"title\": \"Cache invalidation is not working\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-range-columns","name":"On range columns","code":"```python\nresponse = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .overlaps(\"during\", \"[2000-01-01 12:45, 2000-01-01 13:15)\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"room_name\": \"Emerald\",\n      \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"Postgres supports a number of [range types](https://www.postgresql.org/docs/current/rangetypes.html). You can filter on range columns using the string representation of range values.\n","hideCodeBlock":true}]},{"id":"text-search","title":"text_search()","description":"Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n","params":[{"name":"column","isOptional":false,"type":"string","description":"The text or tsvector column to filter on"},{"name":"query","isOptional":false,"type":"string","description":"The query text to match with"},{"name":"options","isOptional":true,"type":"object","description":"Named parameters","subContent":[{"name":"type","isOptional":true,"type":"\"plain\" | \"phrase\" | \"websearch\"","description":"Change how the `query` text is interpreted"},{"name":"config","isOptional":true,"type":"string","description":"The text search configuration to use"}]}],"notes":"- For more information, see [Postgres full text search](/docs/guides/database/full-text-search).\n","examples":[{"id":"text-search","name":"Text search","code":"```python\nresponse = (\n    supabase.table(\"texts\")\n    .select(\"content\")\n    .text_search(\n        \"content\",\n        \"'eggs' & 'ham'\",\n        options={\"config\": \"english\"},\n    )\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table texts (\n  id      bigint\n          primary key\n          generated always as identity,\n  content text\n);\n\ninsert into texts (content) values\n    ('Four score and seven years ago'),\n    ('The road goes ever on and on'),\n    ('Green eggs and ham')\n;\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"content\": \"Green eggs and ham\"\n    }\n  ],\n  \"count\": null\n}\n```\n"},{"id":"basic-normalization","name":"Basic normalization","description":"Uses PostgreSQL's `plainto_tsquery` function.","code":"```python\nresponse = (\n    supabase.table(\"quotes\")\n    .select(\"catchphrase\")\n    .text_search(\n        \"catchphrase\",\n        \"'fat' & 'cat'\",\n        options={\"type\": \"plain\", \"config\": \"english\"},\n    )\n    .execute()\n)\n```\n"},{"id":"full-normalization","name":"Full normalization","description":"Uses PostgreSQL's `phraseto_tsquery` function.","code":"```python\nresponse = (\n    supabase.table(\"quotes\")\n    .select(\"catchphrase\")\n    .text_search(\n        \"catchphrase\",\n        \"'fat' & 'cat'\",\n        options={\"type\": \"phrase\", \"config\": \"english\"},\n    )\n    .execute()\n)\n```\n"},{"id":"web-search","name":"Websearch","description":"Uses PostgreSQL's `websearch_to_tsquery` function.\nThis function will never raise syntax errors, which makes it possible to use raw user-supplied input for search, and can be used\nwith advanced operators.\n\n- `unquoted text`: text not inside quote marks will be converted to terms separated by & operators, as if processed by plainto_tsquery.\n- `\"quoted text\"`: text inside quote marks will be converted to terms separated by `<->` operators, as if processed by phraseto_tsquery.\n- `OR`: the word “or” will be converted to the | operator.\n- `-`: a dash will be converted to the ! operator.\n","code":"```python\nresponse = (\n    supabase.table(\"quotes\")\n    .select(\"catchphrase\")\n    .text_search(\n        \"catchphrase\",\n        \"'fat or cat'\",\n        options={\"type\": \"websearch\", \"config\": \"english\"},\n    )\n    .execute()\n)\n```\n"}]},{"id":"match","title":"match()","description":"Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n","params":[{"name":"query","isOptional":false,"type":"dict","description":"The object to filter with, with column names as keys mapped to their filter values"}],"examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .match({\"id\": 2, \"name\": \"Earth\"})\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth'),\n  (3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 2,\n      \"name\": \"Earth\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"not","title":"not_()","description":"Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n","notes":"```python\n.not_.in_('id', '(5,6,7)')  # Use `()` for `in` filter\n.not_.contains('arraycol', '{\"a\",\"b\"}')  # Use `{}` for array values\n```\n","examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .not_.is_(\"name\", \"null\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, null);\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Mercury\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"or","title":"or_()","params":[{"name":"filters","isOptional":false,"type":"string","description":"The filters to use, following PostgREST syntax"},{"name":"reference_table","isOptional":true,"type":"string","description":"Set this to filter on referenced tables instead of the parent table"}],"notes":"or_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n```python\n.or_('id.in.(5,6,7), arraycol.cs.{\"a\",\"b\"}')  # Use `()` for `in` filter, `{}` for array values and `cs` for `contains()`.\n.or_('id.in.(5,6,7), arraycol.cd.{\"a\",\"b\"}')  # Use `cd` for `containedBy()`\n```\n","examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"name\")\n    .or_(\"id.eq.2,name.eq.Mars\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth'),\n  (3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"Earth\"\n    },\n    {\n      \"name\": \"Mars\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"use-or-with-and","name":"Use `or` with `and`","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"name\")\n    .or_(\"id.gt.3,and(id.eq.1,name.eq.Mercury)\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth'),\n  (3, 'Mars');\n```\n"},"reponse":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"Mercury\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true},{"id":"use-or-on-referenced-tables","name":"Use `or` on referenced tables","code":"```python\nresponse = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments!inner(name)\")\n    .or_(\"book_id.eq.1,name.eq.guqin\", reference_table=\"instruments\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"instruments\": [\n        {\n          \"name\": \"violin\"\n        }\n      ]\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true}]},{"id":"filter","title":"filter()","params":[{"name":"column","isOptional":false,"type":"string","description":"The column to filter on"},{"name":"operator","isOptional":true,"type":"string","description":"The operator to filter with, following PostgREST syntax"},{"name":"value","isOptional":true,"type":"any","description":"The value to filter with, following PostgREST syntax"}],"notes":"filter() expects you to use the raw PostgREST syntax for the filter values.\n\n```python\n.filter('id', 'in', '(5,6,7)')  # Use `()` for `in` filter\n.filter('arraycol', 'cs', '{\"a\",\"b\"}')  # Use `cs` for `contains()`, `{}` for array values\n```\n","examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .filter(\"name\", \"in\", '(\"Mars\",\"Tatooine\")')\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth'),\n  (3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 3,\n      \"name\": \"Mars\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-a-foreign-table","name":"On a foreign table","code":"```python\nresponse = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments!inner(name)\")\n    .filter(\"instruments.name\", \"eq\", \"flute\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"woodwinds\",\n      \"instruments\": [\n        {\n          \"name\": \"flute\"\n        }\n      ]\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true}]},{"id":"max-affected","title":"max_affected()","description":"Set the maximum number of rows that can be affected by an update or delete operation.\nIf the query would affect more rows than the specified limit, the operation will fail with an error.\n\nThis uses PostgREST's `Prefer: max-affected` header with `handling=strict`.\n","notes":"- Only available in PostgREST v13+\n- Only works with PATCH (update) and DELETE methods\n- The operation will fail if it would affect more rows than specified\n","params":[{"name":"value","isOptional":false,"type":"int","description":"The maximum number of rows that can be affected"}],"examples":[{"id":"with-update","name":"Limit affected rows on update","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .update({\"name\": \"Updated\"})\n    .eq(\"id\", 1)\n    .max_affected(1)\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Updated\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"with-delete","name":"Limit affected rows on delete","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .delete()\n    .eq(\"id\", 1)\n    .max_affected(1)\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Mercury\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true}]},{"id":"using-modifiers","title":"Using Modifiers","description":"Filters work on the row level—they allow you to return rows that\nonly match certain conditions without changing the shape of the rows.\nModifiers are everything that don't fit that definition—allowing you to\nchange the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for\nqueries that return rows (e.g., `select()` or `rpc()` on a function that\nreturns a table response).\n"},{"id":"order","title":"order()","description":"Order the query result by `column`.","params":[{"name":"column","isOptional":false,"type":"string","description":"The column to order by"},{"name":"desc","isOptional":true,"type":"bool","description":"Whether the rows should be ordered in descending order or not."},{"name":"foreign_table","isOptional":true,"type":"string","description":"Foreign table name whose results are to be ordered."},{"name":"nullsfirst","isOptional":true,"type":"bool","description":"Order by showing nulls first"}],"examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .order(\"name\", desc=True)\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth'),\n  (3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Mercury\"\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Mars\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Earth\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-a-foreign-table","name":"On a foreign table","code":"```python\nresponse = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments(name)\")\n    .order(\"name\", desc=True, foreign_table=\"instruments\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 1, 'harp'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"instruments\": [\n        {\n          \"name\": \"violin\"\n        },\n        {\n          \"name\": \"harp\"\n        }\n      ]\n    },\n    {\n      \"name\": \"woodwinds\",\n      \"instruments\": []\n    }\n  ],\n  \"count\": null\n}\n```\n","description":"Ordering on foreign tables doesn't affect the ordering of\nthe parent table.\n","hideCodeBlock":true},{"id":"order-parent-table-by-a-referenced-table","name":"Order parent table by a referenced table","code":"```python\nresponse = (\n    supabase.table(\"instruments\")\n    .select(\"name, section:orchestral_sections(name)\")\n    .order(\"section(name)\", desc=False)\n)\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 1, 'violin'),\n  (2, 2, 'flute');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"violin\",\n      \"section\": { \"name\": \"strings\" }\n    },\n    {\n      \"name\": \"flute\",\n      \"section\": { \"name\": \"woodwinds\" }\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"Ordering with `referenced_table(col)` affects the ordering of the\nparent table.\n","hideCodeBlock":true}]},{"id":"limit","title":"limit()","params":[{"name":"size","isOptional":false,"type":"number","description":"The maximum number of rows to return"},{"name":"foreign_table","isOptional":true,"type":"string","description":"Set this to limit rows of foreign tables instead of the parent table."}],"examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"name\")\n    .limit(1)\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth'),\n  (3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"Mercury\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-a-foreign-table","name":"On a foreign table","code":"```python\nresponse = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments(name)\")\n    .limit(1, foreign_table=\"instruments\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 1, 'harp'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"instruments\": [\n        {\n          \"name\": \"harp\"\n        }\n      ]\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true}]},{"id":"range","title":"range()","params":[{"name":"start","isOptional":false,"type":"number","description":"The starting index from which to limit the result."},{"name":"end","isOptional":false,"type":"number","description":"The last index to which to limit the result."},{"name":"foreign_table","isOptional":true,"type":"string","description":"Set this to limit rows of foreign tables instead of the parent table."}],"notes":"Limit the query result by starting at an offset (`start`) and ending at the offset (`end`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `start` and `end` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"name\")\n    .range(0, 1)\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth'),\n  (3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"Mercury\"\n    },\n    {\n      \"name\": \"Earth\"\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-a-foreign-table","name":"On a foreign table","code":"```python\nresponse = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments(name)\")\n    .range(0, 1, foreign_table=\"instruments\")\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'brass'),\n  (2, 'strings'),\n  (3, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 1, 'horn'),\n  (2, 1, 'tuba'),\n  (3, 2, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"brass\",\n      \"instruments\": [\n        {\n          \"name\": \"horn\"\n        },\n        {\n          \"name\": \"tuba\"\n        }\n      ]\n    },\n    {\n      \"name\": \"strings\",\n      \"instruments\": [\n        {\n          \"name\": \"violin\"\n        }\n      ]\n    },\n    {\n      \"name\": \"woodwinds\",\n      \"instruments\": []\n    }\n  ],\n  \"count\": null\n}\n```\n","hideCodeBlock":true}]},{"id":"single","title":"single()","notes":"Return `data` as a single object instead of an array of objects.","examples":[{"id":"with-select()","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"name\")\n    .limit(1)\n    .single()\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth'),\n  (3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": {\n    \"name\": \"Mercury\"\n  },\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"maybe-single","title":"maybe_single()","notes":"Return `data` as a single object instead of an array of objects.","examples":[{"id":"with-select","name":"With `select()`","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .eq(\"name\", \"Earth\")\n    .maybe_single()\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth'),\n  (3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": {\n    \"id\": 2,\n    \"name\": \"Earth\"\n  },\n  \"count\": null\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"csv","title":"csv()","notes":"Return `data` as a string in CSV format.","examples":[{"id":"return-data-as-csv","name":"Return data as CSV","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .csv()\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth'),\n  (3, 'Mars');\n```\n"},"response":"```json\n{\n  \"data\": \"id,name\\n1,Mercury\\n2,Earth\\n3,Mars\",\n  \"count\": null\n}\n```\n","description":"By default, the data is returned in JSON format, but can also be returned as Comma Separated Values.\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"explain","title":"Using Explain","params":[{"name":"wal","isOptional":true,"type":"boolean","description":"If `true`, include information on WAL record generation."},{"name":"verbose","isOptional":true,"type":"boolean","description":"If `true`, the query identifier will be returned and `data` will include the output columns of the query."},{"name":"settings","isOptional":true,"type":"boolean","description":"If `true`, include information on configuration parameters that affect query planning."},{"name":"format","isOptional":true,"type":"boolean","description":"The format of the output, can be `\"text\"` (default) or `\"json\"`."},{"name":"format","isOptional":true,"type":"\"text\" | \"json\"","description":"The format of the output, can be `\"text\"` (default) or `\"json\"`."},{"name":"buffers","isOptional":true,"type":"boolean","description":"If `true`, include information on buffer usage."},{"name":"analyze","isOptional":true,"type":"boolean","description":"If `true`, the query will be executed and the actual run time will be returned."}],"description":"For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query\nusing the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database.\nIt's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n","examples":[{"id":"get-execution-plan","name":"Get the execution plan","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .explain()\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth'),\n  (3, 'Mars');\n```\n"},"response":"```\nAggregate  (cost=33.34..33.36 rows=1 width=112)\n  ->  Limit  (cost=0.00..18.33 rows=1000 width=40)\n        ->  Seq Scan on planets  (cost=0.00..22.00 rows=1200 width=40)\n```\n","description":"By default, the data is returned in TEXT format, but can also be returned as JSON by using the `format` parameter.\n","hideCodeBlock":true,"isSpotlight":true},{"id":"get-execution-plan-with-analyze-and-verbose","name":"Get the execution plan with analyze and verbose","code":"```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .explain(analyze=True, verbose=True)\n    .execute()\n)\n```\n","data":{"sql":"```sql\ncreate table\n  planets (id int8 primary key, name text);\n\ninsert into\n  planets (id, name)\nvalues\n  (1, 'Mercury'),\n  (2, 'Earth'),\n  (3, 'Mars');\n```\n"},"response":"```\nAggregate  (cost=33.34..33.36 rows=1 width=112) (actual time=0.041..0.041 rows=1 loops=1)\n  Output: NULL::bigint, count(ROW(planets.id, planets.name)), COALESCE(json_agg(ROW(planets.id, planets.name)), '[]'::json), NULLIF(current_setting('response.headers'::text, true), ''::text), NULLIF(current_setting('response.status'::text, true), ''::text)\n  ->  Limit  (cost=0.00..18.33 rows=1000 width=40) (actual time=0.005..0.006 rows=3 loops=1)\n        Output: planets.id, planets.name\n        ->  Seq Scan on public.planets  (cost=0.00..22.00 rows=1200 width=40) (actual time=0.004..0.005 rows=3 loops=1)\n              Output: planets.id, planets.name\nQuery Identifier: -4730654291623321173\nPlanning Time: 0.407 ms\nExecution Time: 0.119 ms\n```\n","description":"By default, the data is returned in TEXT format, but can also be returned as JSON by using the `format` parameter.\n","hideCodeBlock":true,"isSpotlight":false}]},{"id":"invoke","title":"invoke()","description":"Invoke a Supabase Function.\n","notes":"- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n","examples":[{"id":"invoke-function","name":"Basic invocation","description":null,"code":"```python\nresponse = supabase.functions.invoke(\n    \"hello-world\",\n    invoke_options={\n        \"body\": {\"name\": \"Functions\"},\n    },\n)\n```\n"},{"id":"error-handling","name":"Error handling","description":"Returns one of the following errors:\n\n- `FunctionsHttpError`: if your function throws an error\n- `FunctionsRelayError`: if the Supabase Relay encounters an error processing your function\n","isSpotlight":true,"code":"```python\nfrom supafunc.errors import FunctionsRelayError, FunctionsHttpError\n\ntry:\n    response = supabase.functions.invoke(\n        \"hello-world\",\n        invoke_options={\n            \"body\": {\"foo\": \"bar\"},\n            \"headers\": {\"my-custom-header\": \"my-custom-header-value\"},\n        },\n    )\nexcept FunctionsHttpError as exception:\n    err = exception.to_dict()\n    print(f'Function returned an error {err.get(\"message\")}')\nexcept FunctionsRelayError as exception:\n    err = exception.to_dict()\n    print(f'Relay error: {err.get(\"message\")}')\n```\n"},{"id":"passing-custom-headers","name":"Passing custom headers","description":"The library accepts custom headers via the `headers` option.\n\nNote: `supabase-py` automatically populates the `Authorization` header if there is a signed in user.\n","isSpotlight":true,"code":"```python\nresponse = supabase.functions.invoke(\n    \"hello-world\",\n    invoke_options={\n        \"headers\": {\n            \"my-custom-header\": \"my-custom-header-value\",\n        },\n        \"body\": {\"foo\": \"bar\"},\n    },\n)\n```\n"}]},{"id":"realtime-api","title":"Overview","description":"Realtime in Python only works with the asynchronous client.\nYou can initialize a new Supabase client using the `acreate_client()` method.\n\n- Some Realtime methods are asynchronous and must be awaited. Ensure these methods are called within an `async` function.\n- In the following Realtime examples, certain methods are awaited. These should be enclosed within an `async` function.\n- When an asynchronous method needs to be used within a synchronous context, such as the callback for `.subscribe()`, utilize `asyncio.create_task()` to schedule the coroutine. This is why the `acreate_client` example includes an import of `asyncio`.\n","examples":[{"id":"acreate-client","name":"acreate_client()","code":"```python\nimport os\nimport asyncio\nfrom supabase import acreate_client, AsyncClient\n\nurl: str = os.environ.get(\"SUPABASE_URL\")\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n\nasync def create_supabase():\n  supabase: AsyncClient = await acreate_client(url, key)\n  return supabase\n```\n"}]},{"id":"subscribe","title":"on().subscribe()","notes":"- By default, Broadcast and Presence are enabled for all projects.\n- Presence is automatically enabled when you attach presence callbacks (`on_presence_sync()`, `on_presence_join()`, or `on_presence_leave()`). If you add presence callbacks to an already joined channel, the channel will automatically resubscribe with presence enabled.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n","examples":[{"id":"listen-to-broadcast","name":"Listen to broadcast messages","isSpotlight":true,"code":"```python\nchannel = supabase.channel(\"room1\")\n\ndef on_subscribe(status, err):\n    if status == RealtimeSubscribeStates.SUBSCRIBED:\n        asyncio.create_task(channel.send_broadcast(\n            \"cursor-pos\",\n            {\"x\": random.random(), \"y\": random.random()}\n        ))\n\ndef handle_broadcast(payload):\n    print(\"Cursor position received!\", payload)\n\nawait channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n```\n"},{"id":"listen-to-presence-sync","name":"Listen to presence sync","isSpotlight":true,"code":"```python\nchannel = supabase.channel(\"room1\")\n\ndef on_subscribe(status, err):\n    if status == RealtimeSubscribeStates.SUBSCRIBED:\n        asyncio.create_task(channel.track({\"online_at\": datetime.datetime.now().isoformat()}))\n\ndef handle_presence_sync():\n    print(\"Synced presence state: \", channel.presence.state)\n\nawait channel.on_presence_sync(callback=handle_presence_sync).subscribe(on_subscribe)\n```\n"},{"id":"listen-to-presence-join","name":"Listen to presence join","isSpotlight":true,"code":"```python\nchannel = supabase.channel(\"room1\")\n\ndef handle_presence_join(key, current_presence, new_presence):\n    print(\"Newly joined presences: \", new_presence)\n\ndef on_subscribe(status, err):\n    if status == RealtimeSubscribeStates.SUBSCRIBED:\n        asyncio.create_task(channel.track({\"online_at\": datetime.datetime.now().isoformat()}))\n\nawait channel.on_presence_join(callback=handle_presence_join).subscribe(on_subscribe)\n```\n"},{"id":"listen-to-presence-leave","name":"Listen to presence leave","isSpotlight":true,"code":"```python\nchannel = supabase.channel(\"room1\")\n\ndef handle_presence_leave(key, current_presence, left_presence):\n    print(\"Newly left presences: \", left_presence)\n\ndef on_subscribe(status, err):\n    if status == RealtimeSubscribeStates.SUBSCRIBED:\n        asyncio.create_task(channel.track({\"online_at\": datetime.datetime.now().isoformat()}))\n        asyncio.create_task(channel.untrack())\n\nawait channel.on_presence_leave(callback=handle_presence_leave).subscribe(on_subscribe)\n```\n"},{"id":"listen-to-all-database-changes","name":"Listen to all database changes","isSpotlight":true,"code":"```python\nresponse = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"*\", schema=\"*\", callback=handle_record_updated)\n    .subscribe()\n)\n```\n"},{"id":"listen-to-a-specific-table","name":"Listen to a specific table","code":"```python\nresponse = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"*\", schema=\"public\", table=\"countries\", callback=handle_record_updated)\n    .subscribe()\n)\n```\n"},{"id":"listen-to-inserts","name":"Listen to inserts","code":"```python\nresponse = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"INSERT\", schema=\"public\", table=\"countries\", callback=handle_record_inserted)\n    .subscribe()\n)\n```\n"},{"id":"listen-to-updates","name":"Listen to updates","description":"By default, Supabase will send only the updated record. If you want to receive the previous values as well you can\nenable full replication for the table you are listening to:\n\n```sql\nalter table \"your_table\" replica identity full;\n```\n","code":"```python\nresponse = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"UPDATE\", schema=\"public\", table=\"countries\", callback=handle_record_updated)\n    .subscribe()\n)\n```\n"},{"id":"listen-to-deletes","name":"Listen to deletes","description":"By default, Supabase does not send deleted records. If you want to receive the deleted record you can\nenable full replication for the table you are listening too:\n\n```sql\nalter table \"your_table\" replica identity full;\n```\n","code":"```python\nresponse = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"DELETE\", schema=\"public\", table=\"countries\", callback=handle_record_deleted)\n    .subscribe()\n)\n```\n"},{"id":"listen-to-multiple-events","name":"Listen to multiple events","description":"You can chain listeners if you want to listen to multiple events for each table.","code":"```python\nresponse = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"INSERT\", schema=\"public\", table=\"countries\", callback=handle_record_inserted)\n    .on_postgres_changes(\"DELETE\", schema=\"public\", table=\"countries\", callback=handle_record_deleted)\n    .subscribe()\n)\n```\n"},{"id":"listening-to-row-level-changes","name":"Listen to row level changes","description":"You can listen to individual rows using the format `{table}:{col}=eq.{val}` - where `{col}` is the column name, and `{val}` is the value which you want to match.","notes":"- ``eq`` filter works with all database types as under the hood, it's casting both the filter value and the database value to the correct type and then comparing them.\n","code":"```python\nresponse = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"UPDATE\", schema=\"public\", table=\"countries\", filter=\"id=eq.200\", callback=handle_record_updated)\n    .subscribe()\n)\n```\n"}]},{"id":"broadcast-message","title":"broadcastMessage()","description":"Broadcast a message to all connected clients to a channel.\n","examples":[{"id":"send-a-message","name":"Send a message via websocket","isSpotlight":true,"code":"```python\nchannel = supabase.channel(\"room1\")\n\ndef on_subscribe(status, err):\n    if status == RealtimeSubscribeStates.SUBSCRIBED:\n        asyncio.create_task(channel.send_broadcast('cursor-pos', {\"x\": random.random(), \"y\": random.random()}))\n\nawait channel.subscribe(on_subscribe)\n```\n","response":"```\nok | timed out | error\n```\n"}]},{"id":"get-channels","title":"getChannels()","examples":[{"id":"get-all-channels","name":"Get all channels","isSpotlight":true,"code":"```python\nchannels = supabase.get_channels()\n```\n"}]},{"id":"remove-channel","title":"removeChannel()","notes":"- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n","examples":[{"id":"removes-a-channel","name":"Removes a channel","isSpotlight":true,"code":"```python\nawait supabase.remove_channel(myChannel)\n```\n"}]},{"id":"remove-all-channels","title":"removeAllChannels()","notes":"- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n","examples":[{"id":"remove-all-channels","name":"Remove all channels","isSpotlight":true,"code":"```python\nawait supabase.remove_all_channels()\n```\n"}]},{"id":"list-buckets","title":"list_buckets()","description":"Retrieves the details of all Storage buckets within an existing project.\n","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"list-buckets","name":"List buckets","code":"```python\nresponse = supabase.storage.list_buckets()\n```\n","response":"```json\n[\n  {\n    \"id\": \"avatars\",\n    \"name\": \"avatars\",\n    \"owner\": \"\",\n    \"public\": false,\n    \"file_size_limit\": 1024,\n    \"allowed_mime_types\": [\n      \"image/png\"\n    ],\n    \"created_at\": \"2024-05-22T22:26:05.100Z\",\n    \"updated_at\": \"2024-05-22T22:26:05.100Z\"\n  }\n]\n```\n"}]},{"id":"get-bucket","title":"get_bucket()","description":"Retrieves the details of an existing Storage bucket.\n","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"id","isOptional":false,"type":"string","description":"The unique identifier of the bucket you would like to retrieve."}],"examples":[{"id":"get-bucket","name":"Get bucket","code":"```python\nresponse = supabase.storage.get_bucket(\"avatars\")\n```\n","response":"```json\n{\n  \"id\": \"avatars\",\n  \"name\": \"avatars\",\n  \"owner\": \"\",\n  \"public\": false,\n  \"file_size_limit\": 1024,\n  \"allowed_mime_types\": [\n    \"image/png\"\n  ],\n  \"created_at\": \"2024-05-22T22:26:05.100Z\",\n  \"updated_at\": \"2024-05-22T22:26:05.100Z\"\n}\n```\n"}]},{"id":"create-bucket","title":"create_bucket()","description":"Creates a new Storage bucket\n","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"id","isOptional":false,"type":"string","description":"A unique identifier for the bucket you are creating."},{"name":"options","isOptional":false,"type":"CreateOrUpdateBucketOptions","subContent":[{"name":"public","isOptional":true,"type":"bool","description":"The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private"},{"name":"allowed_mime_types","isOptional":true,"type":"list[string]","description":"Specifies the allowed mime types that this bucket can accept during upload. The default value is null, which allows files with all mime types to be uploaded. Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png."},{"name":"file_size_limit","isOptional":true,"type":"number","description":"Specifies the max file size in bytes that can be uploaded to this bucket. The global file size limit takes precedence over this value. The default value is null, which doesn't set a per bucket file size limit."}]}],"examples":[{"id":"create-bucket","name":"Create bucket","code":"```python\nresponse = (\n    supabase.storage\n    .create_bucket(\n        \"avatars\",\n        options={\n            \"public\": False,\n            \"allowed_mime_types\": [\"image/png\"],\n            \"file_size_limit\": 1024,\n        }\n    )\n)\n```\n","response":"```json\n{\n  \"name\": \"avatars\"\n}\n```\n"}]},{"id":"empty-bucket","title":"empty_bucket()","description":"Removes all objects inside a single bucket.\n","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"id","isOptional":false,"type":"string","description":"The unique identifier of the bucket you would like to empty."}],"examples":[{"id":"empty-bucket","name":"Empty bucket","code":"```python\nresponse = supabase.storage.empty_bucket(\"avatars\")\n```\n","response":"```json\n{\n  \"message\": \"Successfully emptied\"\n}\n```\n"}]},{"id":"update-bucket","title":"update_bucket()","description":"Updates a Storage bucket\n","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `update`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"id","isOptional":false,"type":"string","description":"A unique identifier for the bucket you are creating."},{"name":"options","isOptional":false,"type":"CreateOrUpdateBucketOptions","subContent":[{"name":"public","isOptional":true,"type":"bool","description":"The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private"},{"name":"allowed_mime_types","isOptional":true,"type":"list[string]","description":"Specifies the allowed mime types that this bucket can accept during upload. The default value is null, which allows files with all mime types to be uploaded. Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png."},{"name":"file_size_limit","isOptional":true,"type":"number","description":"Specifies the max file size in bytes that can be uploaded to this bucket. The global file size limit takes precedence over this value. The default value is null, which doesn't set a per bucket file size limit."}]}],"examples":[{"id":"update-bucket","name":"Update bucket","code":"```python\nresponse = (\n    supabase.storage\n    .update_bucket(\n        \"avatars\",\n        options={\n            \"public\": False,\n            \"allowed_mime_types\": [\"image/png\"],\n            \"file_size_limit\": 1024,\n        }\n    )\n)\n```\n","response":"```json\n{\n  \"message\": \"Successfully updated\"\n}\n```\n"}]},{"id":"delete-bucket","title":"delete_bucket()","description":"Deletes an existing bucket. A bucket can't be deleted with existing objects inside it. You must first `empty()` the bucket.\n","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"id","isOptional":false,"type":"string","description":"The unique identifier of the bucket you would like to delete."}],"examples":[{"id":"delete-bucket","name":"Delete bucket","code":"```python\nresponse = supabase.storage.delete_bucket(\"avatars\")\n```\n","response":"```json\n{\n  \"message\": \"Successfully deleted\"\n}\n```\n"}]},{"id":"from-upload","title":"from_.upload()","description":"Uploads a file to an existing bucket.","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: only `insert` when you are uploading new files and `select`, `insert` and `update` when you are upserting files\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Please specify the appropriate content [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) if you are uploading images or audio. If no `file_options` are specified, the MIME type defaults to `text/html`.\n","params":[{"name":"path","isOptional":false,"type":"string","description":"The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload."},{"name":"file","isOptional":false,"type":"BufferedReader | bytes | FileIO | string | Path","description":"The body of the file to be stored in the bucket."},{"name":"file_options","isOptional":false,"type":"FileOptions","subContent":[{"name":"cache-control","isOptional":true,"type":"string","description":"The number of seconds the asset is cached in the browser and in the Supabase CDN. This is set in the `Cache-Control: max-age=<seconds>` header. Defaults to 3600 seconds.\n"},{"name":"content-type","isOptional":true,"type":"string","description":"The `Content-Type` header value. Should be specified if using a `file` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n"},{"name":"upsert","isOptional":true,"type":"string","description":"When upsert is set to true, the file is overwritten if it exists. When set to false, an error is thrown if the object already exists. Defaults to false."}]}],"examples":[{"id":"upload-file","name":"Upload file using filepath","code":"```python\nwith open(\"./public/avatar1.png\", \"rb\") as f:\n    response = (\n        supabase.storage\n        .from_(\"avatars\")\n        .upload(\n            file=f,\n            path=\"public/avatar1.png\",\n            file_options={\"cache-control\": \"3600\", \"upsert\": \"false\"}\n        )\n    )\n```\n","response":"```json\n{\n  \"path\": \"public/avatar1.png\",\n  \"full_path\": \"avatars/public/avatar1.png\"\n}\n```\n"}]},{"id":"from-update","title":"from_.update()","description":"Replaces an existing file at the specified path with a new one.","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"path","isOptional":false,"type":"string","description":"The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload."},{"name":"file","isOptional":false,"type":"BufferedReader | bytes | FileIO | string | Path","description":"The body of the file to be stored in the bucket."},{"name":"file_options","isOptional":false,"type":"FileOptions","subContent":[{"name":"cache-control","isOptional":true,"type":"string","description":"The number of seconds the asset is cached in the browser and in the Supabase CDN. This is set in the `Cache-Control: max-age=<seconds>` header. Defaults to 3600 seconds.\n"},{"name":"content-type","isOptional":true,"type":"string","description":"The `Content-Type` header value. Should be specified if using a `file` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n"},{"name":"upsert","isOptional":true,"type":"string","description":"When upsert is set to true, the file is overwritten if it exists. When set to false, an error is thrown if the object already exists. Defaults to false."}]}],"examples":[{"id":"update-file","name":"Update file","code":"```python\nwith open(\"./public/avatar1.png\", \"rb\") as f:\n    response = (\n        supabase.storage\n        .from_(\"avatars\")\n        .update(\n            file=f,\n            path=\"public/avatar1.png\",\n            file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"}\n        )\n    )\n```\n","response":"```json\n{\n  \"path\": \"public/avatar1.png\",\n  \"full_path\": \"avatars/public/avatar1.png\"\n}\n```\n"}]},{"id":"from-move","title":"from_.move()","description":"Moves an existing file to a new path in the same bucket.","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"from_path","isOptional":false,"type":"string","description":"The original file path, including the current file name. For example `folder/image.png`."},{"name":"to_path","isOptional":false,"type":"string","description":"The new file path, including the new file name. For example `folder/image-new.png`."}],"examples":[{"id":"move-file","name":"Move file","code":"```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .move(\n        \"public/avatar1.png\",\n        \"private/avatar2.png\"\n    )\n)\n```\n","response":"```json\n{\n  \"message\": \"Successfully moved\"\n}\n```\n"}]},{"id":"from-copy","title":"from_.copy()","description":"Copies an existing file to a new path in the same bucket.","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"from_path","isOptional":false,"type":"string","description":"The original file path, including the current file name. For example `folder/image.png`."},{"name":"to_path","isOptional":false,"type":"string","description":"The new file path, including the new file name. For example `folder/image-new.png`."}],"examples":[{"id":"copy-file","name":"Copy file","code":"```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .copy(\n        \"public/avatar1.png\",\n        \"private/avatar2.png\"\n    )\n)\n```\n","response":"```json\n{\n  \"path\": \"avatars/private/avatar2.png\"\n}\n```\n"}]},{"id":"from-create-signed-urls","title":"from_.create_signed_urls()","description":"Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"paths","isOptional":false,"type":"list[string]","description":"The file paths to be downloaded, including the current file names. For example `[\"folder/image.png\", \"folder2/image2.png\"]`.\n"},{"name":"expires_in","isOptional":false,"type":"number","description":"The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute."},{"name":"options","isOptional":true,"type":"CreateSignedURLsOptions","subContent":[{"name":"download","isOptional":true,"type":"string | bool","description":"Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n"}]}],"examples":[{"id":"create-signed-urls","name":"Create Signed URLs","isSpotlight":true,"code":"```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .create_signed_urls(\n        [\"folder/avatar1.png\", \"folder/avatar2.png\"],\n        60\n    )\n)\n```\n","response":"```json\n[\n  {\n    \"error\": null,\n    \"path\": \"folder/avatar1.png\",\n    \"signedURL\": \"/object/sign/avatars/folder/avatar1.png?token=<TOKEN>\",\n    \"signedUrl\": \"https://example.supabase.co/storage/v1/object/sign/avatars/folder/avatar1.png?token=<TOKEN>\"\n  },\n  {\n    \"error\": null,\n    \"path\": \"folder/avatar2.png\",\n    \"signedURL\": \"/object/sign/avatars/folder/avatar2.png?token=<TOKEN>\",\n    \"signedUrl\": \"https://example.supabase.co/storage/v1/object/sign/avatars/folder/avatar2.png?token=<TOKEN>\"\n  }\n]\n```\n"}]},{"id":"from-create-signed-url","title":"from_.create_signed_url()","description":"Creates a signed URL for a file. Use a signed URL to share a file for a fixed amount of time.","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"path","isOptional":false,"type":"string","description":"The file path, including the file name. For example `\"folder/image.png\"`.\n"},{"name":"expires_in","isOptional":false,"type":"number","description":"The number of seconds until the signed URL expires. For example, `60` for URLs which are valid for one minute."},{"name":"options","isOptional":true,"type":"URLOptions","subContent":[{"name":"download","isOptional":true,"type":"string | bool","description":"Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n"},{"name":"transform","isOptional":true,"type":"TransformOptions","description":"Transform the asset before serving it to the client.","subContent":[{"name":"format","isOptional":true,"type":"origin | avif","description":"Specify the format of the image requested."},{"name":"height","isOptional":true,"type":"number","description":"The height of the image in pixels."},{"name":"quality","isOptional":true,"type":"number","description":"Set the quality of the returned image. A number from 20 to 100, with 100 being the highest quality. Defaults to 80."},{"name":"resize","isOptional":true,"type":"cover | contain | fill","description":"The resize mode can be cover, contain or fill. Defaults to cover. Cover resizes the image to maintain it's aspect ratio while filling the entire width and height. Contain resizes the image to maintain it's aspect ratio while fitting the entire image within the width and height. Fill resizes the image to fill the entire width and height. If the object's aspect ratio does not match the width and height, the image will be stretched to fit.\n"},{"name":"width","isOptional":true,"type":"number","description":"The width of the image in pixels."}]}]}],"examples":[{"id":"create-signed-url","name":"Create Signed URL","code":"```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .create_signed_url(\n        \"folder/avatar1.png\",\n        60\n    )\n)\n```\n","response":"```json\n{\n  \"signedUrl\": \"https://example.supabase.co/storage/v1/object/sign/avatars/folder/avatar1.png?token=<TOKEN>\"\n}\n```\n"},{"id":"create-signed-url-with-transformations","name":"Create a signed URL for an asset with transformations","isSpotlight":true,"code":"```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .create_signed_url(\n        \"folder/avatar1.png\",\n        60,\n        {\"transform\": {\"width\": 100, \"height\": 100}}\n    )\n)\n```\n"},{"id":"create-signed-url-with-download","name":"Create a signed URL which triggers the download of the asset","isSpotlight":true,"code":"```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .create_signed_url(\n        \"folder/avatar1.png\",\n        60,\n        {\"download\": True}\n    )\n)\n```\n"}]},{"id":"from-create-signed-upload-url","title":"from_.create_signed_upload_url()","description":"Creates a signed upload URL. Signed upload URLs can be used to upload files to the bucket without further authentication. They are valid for 2 hours.","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"path","isOptional":false,"type":"string","description":"The file path, including the current file name. For example `\"folder/image.png\"`.\n"}],"examples":[{"id":"create-signed-url","name":"Create Signed URL","code":"```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .create_signed_upload_url(\"folder/avatar1.png\")\n)\n```\n","response":"```json\n{\n  \"signedUrl\": \"https://example.supabase.co/storage/v1/object/upload/sign/avatars/folder/cat.jpg?token=<TOKEN>\",\n    \"path\": \"folder/cat.jpg\",\n    \"token\": \"<TOKEN>\"\n}\n```\n"}]},{"id":"from-upload-to-signed-url","title":"from_.upload_to_signed_url()","description":"Upload a file with a token generated from `create_signed_upload_url`.","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"path","isOptional":false,"type":"string","description":"The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n"},{"name":"token","isOptional":false,"type":"string","description":"The token generated from `create_signed_upload_url`"},{"name":"file","isOptional":false,"type":"BufferedReader | bytes | FileIO | string | Path","description":"The body of the file to be stored in the bucket."},{"name":"options","isOptional":false,"type":"FileOptions","subContent":[{"name":"cache-control","isOptional":true,"type":"string","description":"The number of seconds the asset is cached in the browser and in the Supabase CDN. This is set in the `Cache-Control: max-age=<seconds>` header. Defaults to 3600 seconds.\n"},{"name":"content-type","isOptional":true,"type":"string","description":"The `Content-Type` header value. Should be specified if using a `file` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n"},{"name":"upsert","isOptional":true,"type":"string","description":"When upsert is set to true, the file is overwritten if it exists. When set to false, an error is thrown if the object already exists. Defaults to false."}]}],"examples":[{"id":"create-signed-url","name":"Create Signed URL","code":"```python\nwith open(\"./public/avatar1.png\", \"rb\") as f:\n    response = (\n        supabase.storage\n        .from_(\"avatars\")\n        .upload_to_signed_url(\n            path=\"folder/cat.jpg\",\n            token=\"token-from-create_signed_upload_url\",\n            file=f,\n        )\n    )\n```\n","response":"```json\n{\n  \"path\": \"folder/cat.jpg\",\n  \"full_path\": \"avatars/folder/cat.jpg\"\n}\n```\n"}]},{"id":"from-get-public-url","title":"from_.get_public_url()","description":"A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset. This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n","notes":"- The bucket needs to be set to public, either via [update_bucket()](/docs/reference/python/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"path","isOptional":false,"type":"string","description":"The path and name of the file to generate the public URL for. For example `folder/image.png`.\n"},{"name":"options","isOptional":true,"type":"URLOptions","subContent":[{"name":"download","isOptional":true,"type":"string | bool","description":"Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n"},{"name":"transform","isOptional":true,"type":"TransformOptions","description":"Transform the asset before serving it to the client.","subContent":[{"name":"format","isOptional":true,"type":"origin | avif","description":"Specify the format of the image requested."},{"name":"height","isOptional":true,"type":"number","description":"The height of the image in pixels."},{"name":"quality","isOptional":true,"type":"number","description":"Set the quality of the returned image. A number from 20 to 100, with 100 being the highest quality. Defaults to 80."},{"name":"resize","isOptional":true,"type":"cover | contain | fill","description":"The resize mode can be cover, contain or fill. Defaults to cover. Cover resizes the image to maintain it's aspect ratio while filling the entire width and height. Contain resizes the image to maintain it's aspect ratio while fitting the entire image within the width and height. Fill resizes the image to fill the entire width and height. If the object's aspect ratio does not match the width and height, the image will be stretched to fit.\n"},{"name":"width","isOptional":true,"type":"number","description":"The width of the image in pixels."}]}]}],"examples":[{"id":"get-public-url","name":"Returns the URL for an asset in a public bucket","code":"```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .get_public_url(\"folder/avatar1.jpg\")\n)\n```\n","response":"```json\n{\n  \"publicURL\": \"https://example.supabase.co/storage/v1/object/public/public-bucket/folder/avatar1.png\"\n}\n```\n"},{"id":"transform-asset-in-public-bucket","name":"Returns the URL for an asset in a public bucket with transformations","isSpotlight":true,"code":"```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .get_public_url(\n        \"folder/avatar1.jpg\",\n        {\"transform\": {\"width\": 100, \"height\": 100}}\n    )\n)\n```\n"},{"id":"download-asset-in-public-bucket","name":"Returns the URL which triggers the download of an asset in a public bucket","isSpotlight":true,"code":"```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .get_public_url(\n        \"folder/avatar1.jpg\",\n        {\"download\": True}\n    )\n)\n```\n"}]},{"id":"from-download","title":"from_.download()","description":"Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `get_public_url` instead.","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"path","isOptional":false,"type":"string","description":"The full path and file name of the file to be downloaded. For example `folder/image.png`."},{"name":"options","isOptional":false,"type":"DownloadOptions","subContent":[{"name":"transform","isOptional":true,"type":"TransformOptions","description":"Transform the asset before serving it to the client.","subContent":[{"name":"format","isOptional":true,"type":"origin | avif","description":"Specify the format of the image requested."},{"name":"height","isOptional":true,"type":"number","description":"The height of the image in pixels."},{"name":"quality","isOptional":true,"type":"number","description":"Set the quality of the returned image. A number from 20 to 100, with 100 being the highest quality. Defaults to 80."},{"name":"resize","isOptional":true,"type":"cover | contain | fill","description":"The resize mode can be cover, contain or fill. Defaults to cover. Cover resizes the image to maintain it's aspect ratio while filling the entire width and height. Contain resizes the image to maintain it's aspect ratio while fitting the entire image within the width and height. Fill resizes the image to fill the entire width and height. If the object's aspect ratio does not match the width and height, the image will be stretched to fit.\n"},{"name":"width","isOptional":true,"type":"number","description":"The width of the image in pixels."}]}]}],"examples":[{"id":"download-file","name":"Download file","code":"```python\nwith open(\"./myfolder/avatar1.png\", \"wb+\") as f:\n    response = (\n        supabase.storage\n        .from_(\"avatars\")\n        .download(\"folder/avatar1.png\")\n    )\n    f.write(response)\n```\n"},{"id":"download-file-with-transformations","name":"Download file with transformations","isSpotlight":true,"code":"```python\nwith open(\"./myfolder/avatar1.png\", \"wb+\") as f:\n    response = (\n        supabase.storage\n        .from_(\"avatars\")\n        .download(\n            \"folder/avatar1.png\",\n            {\"transform\": {\"width\": 100, \"height\": 100, \"quality\": 80}},\n        )\n    )\n    f.write(response)\n```\n"}]},{"id":"from-remove","title":"from_.remove()","description":"Deletes files within the same bucket","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"paths","isOptional":false,"type":"list[string]","description":"An array of files to delete, including the path and file name. For example `[\"folder/image.png\"]`.\n"}],"examples":[{"id":"delete-file","name":"Delete file","code":"```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .remove([\"folder/avatar1.png\"])\n)\n```\n","response":"```json\n[\n  {\n    \"name\": \"folder/avatar1.png\",\n    \"bucket_id\": \"avatars\",\n    \"owner\": \"\",\n    \"owner_id\": \"\",\n    \"version\": \"151d16d2-0319-4e5b-add4-53820e8a0863\",\n    \"id\": \"e281a32a-6998-4ed1-b8e0-7d3d7ae9ae3c\",\n    \"updated_at\": \"2024-10-25T15:52:13.993Z\",\n    \"created_at\": \"2024-10-23T21:33:10.046Z\",\n    \"last_accessed_at\": \"2024-10-23T21:33:10.046Z\",\n    \"metadata\": {\n      \"eTag\": \"\\\"ca390059ef9fdb91e2ad5447201d2e91\\\"\",\n      \"size\": 343017,\n      \"mimetype\": \"image/png\",\n      \"cacheControl\": \"max-age=360\",\n      \"lastModified\": \"2024-10-25T15:52:13.974Z\",\n      \"contentLength\": 343017,\n      \"httpStatusCode\": 200\n    },\n    \"user_metadata\": {}\n  }\n]\n```\n"}]},{"id":"from-list","title":"from_.list()","description":"Lists all the files within a bucket.","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"path","isOptional":true,"type":"string","description":"The folder path.\n"},{"name":"options","isOptional":true,"type":"SearchOptions","subContent":[{"name":"limit","isOptional":true,"type":"number","description":"The number of files you want to be returned."},{"name":"offset","isOptional":true,"type":"number","description":"The starting position."},{"name":"search","isOptional":true,"type":"number","description":"The search string to filter files by."},{"name":"sortBy","isOptional":true,"type":"number","description":"The column to sort by. Can be any column inside a FileObject.","subContent":[{"name":"column","isOptional":true,"type":"string"},{"name":"order","isOptional":true,"type":"asc | desc"}]}]}],"examples":[{"id":"list-files","name":"List files in a bucket","code":"```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .list(\n        \"folder\",\n        {\n            \"limit\": 100,\n            \"offset\": 0,\n            \"sortBy\": {\"column\": \"name\", \"order\": \"desc\"},\n        }\n    )\n)\n```\n","response":"```json\n[\n  {\n    \"name\": \"avatar1.png\",\n    \"id\": \"e668cf7f-821b-4a2f-9dce-7dfa5dd1cfd2\",\n    \"updated_at\": \"2024-05-22T23:06:05.580Z\",\n    \"created_at\": \"2024-05-22T23:04:34.443Z\",\n    \"last_accessed_at\": \"2024-05-22T23:04:34.443Z\",\n    \"metadata\": {\n      \"eTag\": \"\\\"c5e8c553235d9af30ef4f6e280790b92\\\"\",\n      \"size\": 32175,\n      \"mimetype\": \"image/png\",\n      \"cacheControl\": \"max-age=3600\",\n      \"lastModified\": \"2024-05-22T23:06:05.574Z\",\n      \"contentLength\": 32175,\n      \"httpStatusCode\": 200\n    }\n  }\n]\n```\n"},{"id":"search-files-in-a-bucket","name":"Search files in a bucket","code":"```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .list(\n        \"folder\",\n        {\n            \"limit\": 100,\n            \"offset\": 0,\n            \"sortBy\": {\"column\": \"name\", \"order\": \"desc\"},\n            \"search\": \"jon\",\n        }\n    )\n)\n```\n"}]}]