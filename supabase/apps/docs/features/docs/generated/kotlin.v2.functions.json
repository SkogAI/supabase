[{"id":"initializing","title":"Initializing","description":"### Create Supabase Client\n\nIndependently of which Supabase module you are using, you will need to initialize the main client first and install the module.\n\nTo create a new client, you can use the `createSupabaseClient` function.\n\nWhen installing a module, you can pass a block to configure it.\n\n### OAuth and OTP link verification\n\n[supabase-kt](https://github.com/supabase-community/supabase-kt) provides several platform implementations for OAuth and OTP link verification.\n\n**On Desktop platforms (JVM, MacOS\\*, Linux)**, it uses a HTTP Callback Server to receive the session data from a successful OAuth login. The success page can be customized via `AuthConfig#httpCallbackConfig` \\\n\\* If no deeplinks are being used.\n\n*Note: OTP link verification such as sign ups are not supported on JVM. You may have to send a verification token rather than a url in your email. To send the token, rather than a redirect url, change `{{ .ConfirmationURL }}` in your sign up email to `{{ .Token }}`*\n\n**On Android, iOS & MacOS**, OAuth and OTP verification use deeplinks. Refer to the guide below on how to setup deeplinks. Alternatively you can use [Native Google Auth](/docs/guides/auth/social-login/auth-google?platform=android). \\\n**On JS**, it uses the website origin as the callback url. Session importing gets handled automatically. \\\n**Windows, tvOS, watchOS & Linux** currently have no default implementation. Feel free to create a PR.\n\nYou always make your own implementation and use `auth.parseSessionFromFragment(fragment)` or `auth.parseSessionFromUrl(url)` to let [supabase-kt](https://github.com/supabase-community/supabase-kt) handle the parsing after receiving a callback.\nThen you can simply use `auth.importSession(session)`.\n\n### Configure deeplink callbacks for Authentication\n\nDeeplinks are supported on Android, iOS and MacOS.\n1. **Set up a deeplink** \\\nOn Android, set up a [deeplink](https://developer.android.com/training/app-links/deep-linking) in your Android manifest. \\\nOn iOS and MacOS, set up a [url scheme](https://developer.apple.com/documentation/xcode/defining-a-custom-url-scheme-for-your-app).\n2. **Add your deeplink to the [redirect URLs](https://supabase.com/dashboard/project/_/auth/url-configuration)** \\\n**Pattern**: scheme://host\n3. **Configure the Auth plugin**\nSet the `host` and `scheme` in the Auth config:\n    ```kotlin\n    install(Auth) {\n       host = \"deeplink host\" // this can be anything, eg. your package name or app/company url (not your Supabase url)\n       scheme = \"deeplink scheme\"\n\n       // On Android only, you can set OAuth and SSO logins to open in a custom tab, rather than an external browser:\n       defaultExternalAuthAction = ExternalAuthAction.CustomTabs() //defaults to ExternalAuthAction.ExternalBrowser\n    }\n    ```\n4. **Call platform specific function on startup** \\\nOn Android: `supabase.handleDeeplinks(intent)` \\\nIf you don't want a separate activity, just call this function at the top of your `onCreate` function in your MainActivity. \\\nOn iOS/MacOS: `supabase.handleDeeplinks(url)`\n\nThen you can log in using OAuth:\n```kotlin\nsupabase.auth.signInWith(Google)\n```\nOr open OTP links directly in your app.\n\n### PKCE Authentication flow\nsupabase-kt supports the [PKCE authentication flow](https://supabase.com/blog/supabase-auth-sso-pkce).\nTo use it, change the `flowType` in the Auth configuration:\n```kotlin\ninstall(Auth) {\n  flowType = FlowType.PKCE\n}\n```\nThat's it! If you already implemented deeplinks to handle OTPs and OAuth you don't have to change anything!\n","params":[{"name":"supabaseUrl","isOptional":false,"type":"String","description":"The unique Supabase URL which is supplied when you create a new project in your project dashboard."},{"name":"supabaseKey","isOptional":false,"type":"String","description":"The unique Supabase Key which is supplied when you create a new project in your project dashboard."},{"name":"builder","isOptional":true,"type":"SupabaseClientBuilder.() -> Unit","description":"Apply additional configuration and install plugins.","subContent":[{"name":"useHTTPS","isOptional":true,"type":"Boolean","description":"Whether to use HTTPS for network requests. Will be set automatically depending on your Supabase url, but can be changed manually."},{"name":"httpEngine","isOptional":true,"type":"HttpClientEngine?","description":"Custom Ktor Client engine. Shouldn't be set manually as Ktor uses an engine from your dependencies, but can be set to a MockEngine for tests."},{"name":"ignoreModulesInUrl","isOptional":true,"type":"Boolean","description":"Whether to ignore if [supabaseUrl] contains modules like 'realtime' or 'auth'. If false, an exception will be thrown. Defaults to false."},{"name":"requestTimeout","isOptional":true,"type":"Duration","description":"Timeout after network requests throw a `HttpRequestTimeoutException`. Defaults to 10 seconds."},{"name":"defaultLogLevel","isOptional":true,"type":"LogLevel","description":"The default log level used for plugins. Can be overridden per plugin. Defaults to `LogLevel.INFO`."},{"name":"defaultSerializer","isOptional":true,"type":"SupabaseSerializer","description":"The default serializer used to serialize and deserialize custom data types. Defaults to `KotlinXSerializer`."}]}],"examples":[{"id":"initialize-client","name":"Initialize Client","code":"```kotlin\nval supabase = createSupabaseClient(\n    supabaseUrl = \"https://xyzcompany.supabase.co\",\n    supabaseKey = \"publishable-or-anon-key\"\n) {\n    install(Auth)\n    install(Postgrest)\n    //install other modules\n}\n```\n"},{"id":"configure-auth","name":"Configure Auth module","code":"```kotlin\nval supabase = createSupabaseClient(\n    supabaseUrl = \"https://xyzcompany.supabase.co\",\n    supabaseKey = \"publishable-or-anon-key\"\n) {\n    install(Auth) {\n        alwaysAutoRefresh = false // default: true\n        autoLoadFromStorage = false // default: true\n        //and more...\n    }\n}\n```\n","description":"**Common:**\n\n`alwaysAutoRefresh` - whether the Auth plugin should always auto refresh expired sessions automatically. Default: `true`\n\n`autoLoadFromStorage` - whether the Auth plugin should automatically load the session from the session manager. Default: `true`\n\n`autoSaveToStorage` - whether the Auth plugin should automatically save the session to the session manager. Default: `true`\n\n`flowType` - Which authentication flow to use. Currently available: FlowType.PKCE and FlowType.IMPLICIT. Default: `FlowType.IMPLICIT`\n\n`codeVerifierCache` - Interface for saving and loading codes for the PKCE authentication flow. Default: `SettingsCodeVerifierCache`\n\n`customUrl` - Custom url for the Auth API. Can be safely ignored when using Supabase. Default: `null`\n\n`jwtToken` - Plugin specific JWT Token. Can be ignored when using the Auth plugin. Default: `null`\n\n`retryDelay` - Duration after which the Auth plugin should retry a failed session refresh. Default: `10.seconds`\n\n`sessionManager` - Interface for saving and loading the user session. Default: `SettingsSessionManager`\n\n**Android & iOS:**\n\n`scheme` - The scheme for the redirect url, when using deep linking. Default: `supabase`\n\n`host` - The host for the redirect url, when using deep linking. Default: `login`\n\n**Android:**\n\n`enableLifecycleCallbacks` - Whether to stop auto-refresh on focus loss, and resume it on focus again. Default: `true`\n\n**Desktop:**\n\n`httpPort`: The port the web server is running on, when logging in with OAuth. Default: `0` (random port).\n\n`timeout`: The timeout for the web server, when logging in with OAuth. Default: `1.minutes`.\n\n`htmlTitle`: The title of the redirect page, when logging in with OAuth. Default: `\"Supabase Auth\"`.\n\n`htmlText`: The text of the redirect page, when logging in with OAuth. Default: `\"Logged in. You may continue in your app.\"`.\n\n`htmlIconUrl`: The icon of the redirect page, when logging in with OAuth. Default: `\"https://supabase.com/brand-assets/supabase-logo-icon.png\"`.\n"},{"id":"configure-postgrest","name":"Configure PostgREST module","code":"```kotlin\nval supabase = createSupabaseClient(\n    supabaseUrl = \"https://xyzcompany.supabase.co\",\n    supabaseKey = \"publishable-or-anon-key\"\n) {\n    install(Postgrest) {\n        defaultSchema = \"schema\" // default: \"public\"\n        propertyConversionMethod = PropertyConversionMethod.SERIAL_NAME // default: PropertyConversionMethod.CAMEL_CASE_TO_SNAKE_CASE\n    }\n}\n```\n","description":"`propertyConversionMethod` - The method to use to convert the property names to the column names when applying filters and using the update method. Default: `PropertyConversionMethod.CAMEL_CASE_TO_SNAKE_CASE`\n\n`defaultSchema` - The default schema to use for database requests. Default: `public`\n\n`customUrl` - Custom url for the PostgREST API. Can be safely ignored when using Supabase. Default: `null`\n\n`jwtToken` - Plugin specific JWT Token. Can be ignored when using the Auth plugin. Default: `null`\n"},{"id":"configure-storage","name":"Configure Storage module","code":"```kotlin\nval supabase = createSupabaseClient(\n    supabaseUrl = \"https://xyzcompany.supabase.co\",\n    supabaseKey = \"publishable-or-anon-key\"\n) {\n    install(Storage) {\n        transferTimeout = 90.seconds // Default: 120 seconds\n    }\n}\n```\n","description":"`transferTimeout` - the timeout for uploading and downloading files. Default: `120.seconds`\n\n`resumable.cache` - Interface for storing resumable upload urls. Default: `SettingsResumableCache`\n\n`resumable.defaultChunkSize` - The default chunk size for resumable uploads. Supabase currently only supports a chunk size of 6MB, so be careful when changing this value. Default: `6MB`\n\n`resumable.retryTimeout` - the timeout for retrying resumable uploads when uploading a chunk fails. Default: `5.seconds`\n\n`resumable.onlyUpdateStateAfterChunk` - whether the upload state should only be updated after a chunk was uploaded successfully or also when the chunk is currently being uploaded. Default: `false`\n\n`customUrl` - Custom url for the Storage API. Can be safely ignored when using Supabase. Default: `null`\n\n`jwtToken` - Plugin specific JWT Token. Can be ignored when using the Auth plugin. Default: `null`\n"},{"id":"configure-realtime","name":"Configure Realtime module","code":"```kotlin\nval supabase = createSupabaseClient(\n    supabaseUrl = \"https://xyzcompany.supabase.co\",\n    supabaseKey = \"publishable-or-anon-key\"\n) {\n    install(Realtime) {\n        reconnectDelay = 5.seconds // Default: 7 seconds\n    }\n}\n```\n","description":"`reconnectDelay` - The delay between reconnect attempts. Default: `7.seconds`\n\n`heartbeatInterval` - The interval between heartbeat messages. Default: `15.seconds`\n\n`disconnectOnSessionLoss` - Whether to disconnect from the websocket when the session is lost. Default: `true`\n\n`secure` - Whether to use wss or ws. Defaults to [SupabaseClient.useHTTPS] when null\n\n`websocketConfig` - Custom Ktor websocket config\n\n`customUrl` - Custom url for the Realtime websocket. Can be safely ignored when using Supabase. Default: `null`\n\n`jwtToken` - Plugin specific JWT Token. Can be ignored when using the Auth plugin. Default: `null`\n"},{"id":"configure-functions","name":"Configure Functions plugin","code":"```kotlin\nval supabase = createSupabaseClient(\n    supabaseUrl = \"https://xyzcompany.supabase.co\",\n    supabaseKey = \"publishable-or-anon-key\"\n) {\n    install(Functions) {\n        //no custom settings\n    }\n}\n```\n","description":"`customUrl` - Custom url for the Functions API. Can be safely ignored when using Supabase. Default: `null`\n\n`jwtToken` - Plugin specific JWT Token. Can be ignored when using the Auth plugin. Default: `null`\n"},{"id":"configure-graphql","name":"Configure GraphQL plugin","code":"```kotlin\nval supabase = createSupabaseClient(\n    supabaseUrl = \"https://xyzcompany.supabase.co\",\n    supabaseKey = \"publishable-or-anon-key\"\n) {\n    install(GraphQL) {\n        apolloConfiguration {\n          //custom configuration\n        }\n    }\n}\n```\n","description":"`apolloConfiguration` - Custom configuration for the ApolloClient\n\n`customUrl` - Custom url for the GraphQL API. Can be safely ignored when using Supabase. Default: `null`\n\n`jwtToken` - Plugin specific JWT Token. Can be ignored when using the Auth plugin. Default: `null`\n\n**You can access the created ApolloClient via `supabase.graphql.apolloClient`, which automatically adds the required headers depending on your session.**\n"}]},{"id":"select","title":"Fetch data: select()","notes":"Perform a SELECT query on the table or view.\n- When calling a `decode` method, you have to provide a [serializable class](/docs/reference/kotlin/installing#serialization) as the type parameter.\n- You can provide a `Columns` object to select specific columns.\n- You can provide a [filter](/docs/reference/kotlin/using-filters) block to filter the results\n","params":[{"name":"columns","isOptional":true,"type":"Columns","description":"The columns to retrieve, defaults to `Columns.ALL`. You can also use `Columns.list`, `Columns.type` or `Columns.raw` to specify the columns."},{"name":"head","isOptional":true,"type":"Boolean","description":"If true, select will delete the selected data."},{"name":"request","isOptional":true,"type":"PostgrestRequestBuilder.() -> Unit","description":"Additional configuration & filtering for the request."}],"examples":[{"id":"getting-your-data","name":"Getting your data","isSpotlight":true,"code":"```kotlin\nval city = supabase.from(\"cities\").select().decodeSingle<City>()\n```\n"},{"id":"selecting-specific-columns","name":"Selecting specific columns","description":"You can select specific fields from your tables.","code":"```kotlin\nval city = supabase.from(\"cities\").select(columns = Columns.list(\"id, name\")).decodeSingle<City>()\n```\n"},{"id":"query-foreign-tables","name":"Query foreign tables","description":"If your database has foreign key relationships, you can query related tables too.","code":"```kotlin\nval columns = Columns.raw(\"\"\"\n    id,\n    name,\n    cities (\n      id,\n      name\n    )\n\"\"\".trimIndent())\nval country = supabase.from(\"countries\")\n  .select(\n    columns = columns\n  )\n  .decodeSingle<Country>()\n```\n","note":"What about join tables\nIf your tables are **NOT** directly related, but instead are joined by a _join table_,\nyou can still use the `select()` method to query the related data. The PostgREST engine detects the relationship automatically.\nFor more details, [follow the link](https://postgrest.org/en/latest/api.html#embedding-through-join-tables).\n"},{"id":"query-the-same-foreign-table-multiple-times","name":"Query the same foreign table multiple times","description":"Sometimes you will need to query the same foreign table twice.\nIn this case, you can use the name of the joined column to identify\nwhich join you intend to use. For convenience, you can also give an\nalias for each column.\n","code":"```kotlin\nval columns = Columns.raw(\"\"\"\n    content,\n    from: sender_id(name),\n    to: receiver_id(name)\n\"\"\".trimIndent())\nval message = supabase.from(\"messages\")\n    .select(columns = columns)\n    .decodeSingle<Message>()\n```\n"},{"id":"querying-with-count-option","name":"Querying with count option","description":"You can get the number of rows by using the count option.\nAllowed values for count option are [Count.EXACT](https://postgrest.org/en/stable/api.html#exact-count), [Count.PLANNED](https://postgrest.org/en/stable/api.html#planned-count) and [Count.ESTIMATED](https://postgrest.org/en/stable/api.html#estimated-count).\n","code":"```kotlin\nval count = supabase.from(\"countries\")\n    .select {\n        count(Count.EXACT)\n    }\n    .count()!!\n```\n"},{"id":"querying-json-data","name":"Querying JSON data","description":"If you have data inside of a JSONB column, you can apply select\nand query filters to the data values. Postgres offers a\n[number of operators](https://www.postgresql.org/docs/current/functions-json.html)\nfor querying JSON data. Also see\n[PostgREST docs](http://postgrest.org/en/v7.0.0/api.html#json-columns) for more details.\n","code":"```kotlin\nval columns = Columns.raw(\"\"\"\n    id, name\n    address->city\n\"\"\".trimIndent())\nval user = supabase.from(\"users\")\n    .select(columns = columns)\n    .decodeSingle<User>()\n```\n"}]},{"id":"insert","title":"Create data: insert()","$ref":"@supabase/postgrest-js.\"lib/PostgrestQueryBuilder\".PostgrestQueryBuilder.insert","notes":"Perform an INSERT into the table or view.\n- When calling an `insert` method, you have to provide a [serializable value](/docs/reference/kotlin/installing#serialization).\n- By default, `insert` will not return the inserted data. If you want to return the inserted data, you can use the `select()` method inside the request.\n","params":[{"name":"value","isOptional":false,"type":"T or List<T>","description":"The value(s) you want to insert. `T` can be any serializable type."},{"name":"request","isOptional":true,"type":"PostgrestRequestBuilder.() -> Unit","description":"Additional configuration & filtering for the request."}],"examples":[{"id":"create-a-record","name":"Create a record","isSpotlight":true,"code":"```kotlin\nval city = City(name = \"The Shire\", countryId = 554)\nsupabase.from(\"cities\").insert(city)\n```\n"},{"id":"create-a-record-and-return","name":"Create a record and return it","isSpotlight":true,"code":"```kotlin\nval city = City(name = \"The Shire\", countryId = 554)\nval result = supabase.from(\"cities\").insert(city) {\n    select()\n}.decodeSingle<City>()\n```\n"},{"id":"bulk-create","name":"Bulk create","description":"When running a bulk create, the operation is handled in a single transaction. If any of the inserts fail, all other operations are\nrolled back.\n","code":"```kotlin\nval theShire = City(name = \"The Shire\", countryId = 554)\nval rohan = City(name = \"Rohan\", countryId = 554)\nsupabase.from(\"cities\").insert(listOf(theShire, rohan))\n```\n"}]},{"id":"update","title":"Modify data: update()","notes":"Perform an UPDATE on the table or view.\n- `update()` should always be combined with a [filter](/docs/reference/kotlin/using-filters) block to avoid updating all records.\n- When calling `insert` or `update`, you have to provide a [serializable value](/docs/reference/kotlin/installing#serialization) in the function parameter.\n- By default, `update` will not return the inserted data. If you want to return the inserted data, you can use the `select()` method inside the request.\n","params":[{"name":"value","type":"T or PostgrestUpdate.() -> Unit = {}","isOptional":false,"description":"The new value, can be either a serializable value or PostgrestUpdate DSL where you can set new values per column."},{"name":"request","isOptional":true,"type":"PostgrestRequestBuilder.() -> Unit","description":"Additional configuration & filtering for the request."}],"examples":[{"id":"updating-your-data","name":"Updating your data","isSpotlight":true,"code":"```kotlin\nsupabase.from(\"characters\").update(\n    {\n       Character::name setTo \"Harry\"\n       //or\n       set(\"name\", \"Harry\")\n    }\n) {\n    filter {\n        Character::id eq 1\n        //or\n        eq(\"id\", 1)\n    }\n}\n```\n"},{"id":"update-a-record-and-return-it","name":"Update a record and return it","code":"```kotlin\nval newInstrument = supabase.from(\"instruments\").update(\n    {\n       Instrument::name setTo \"piano\"\n       //or\n       set(\"name\", \"piano\")\n    }\n) {\n    select()\n    filter {\n        Instrument::id eq 1\n        //or\n        eq(\"id\", 1)\n    }\n}.decodeSingle<Instrument>()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'harpsichord');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"harpsichord\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true},{"id":"updating-json-data","name":"Updating JSON data","description":"Postgres offers a\n[number of operators](https://www.postgresql.org/docs/current/functions-json.html)\nfor working with JSON data. Right now it is only possible to update an entire JSON document,\nbut we are [working on ideas](https://github.com/PostgREST/postgrest/issues/465) for updating individual keys.\n","code":"```kotlin\nval address = Address(street = \"Melrose Place\", postcode = 90210)\nsupabase.from(\"users\").update(\n    {\n       User::address setTo address\n    }\n) {\n    filter {\n        eq(\"address->postcode\", 90210)\n    }\n}\n```\n"}]},{"id":"upsert","title":"Upsert data: upsert()","$ref":"@supabase/postgrest-js.\"lib/PostgrestQueryBuilder\".PostgrestQueryBuilder.upsert","notes":"Perform an UPSERT on the table or view. Depending on the column(s) passed to `onConflict`, `.upsert()` allows you to perform the equivalent of `.insert()` if a row with the corresponding `onConflict` columns doesn't exist, or if it does exist, perform an alternative action depending on `ignoreDuplicates`.\n- Primary keys should be included in the data payload in order for an update to work correctly.\n- Primary keys  must be natural, not surrogate. There are however, [workarounds](https://github.com/PostgREST/postgrest/issues/1118) for surrogate primary keys.\n- If you need to insert new data and update existing data at the same time, use [Postgres triggers](https://github.com/supabase/postgrest-js/issues/173#issuecomment-825124550).\n- When calling `insert` or `update`, you have to provide a [serializable value](/docs/reference/kotlin/installing#serialization) in the function parameter.\n- By default, `upsert` will not return the inserted data. If you want to return the inserted data, you can use the `select()` method inside the request.\n","params":[{"name":"value","isOptional":false,"type":"T or List<T>","description":"The value(s) you want to insert. `T` can be any serializable type."},{"name":"onConflict","isOptional":true,"type":"String?","description":"Comma-separated UNIQUE column(s) to specify how duplicate rows are determined. Two rows are duplicates if all the `onConflict` columns are equal."},{"name":"defaultToNull","isOptional":true,"type":"Boolean","description":"Make missing fields default to `null`. Otherwise, use the default value for the column. This only applies when inserting new rows, not when merging with existing rows under"},{"name":"ignoreDuplicates","isOptional":true,"type":"Boolean","description":"If `true`, duplicate rows are ignored. If `false`, duplicate rows are merged with existing rows."},{"name":"request","isOptional":true,"type":"PostgrestRequestBuilder.() -> Unit","description":"Additional configuration & filtering for the request."}],"examples":[{"id":"upsert-your-data","name":"Upsert your data","isSpotlight":true,"code":"```kotlin\nval toUpsert = Message(id = 3, message = \"foo\", username = \"supabot\")\nsupabase.from(\"messages\").upsert(toUpsert)\n```\n"},{"id":"upsert-your-data-and-return","name":"Upsert your data and return it","isSpotlight":true,"code":"```kotlin\nval toUpsert = Message(id = 3, message = \"foo\", username = \"supabot\")\nval message = supabase.from(\"messages\").upsert(toUpsert) {\n    select()\n}.decodeSingle<Message>()\n```\n"},{"id":"upserting-into-tables-with-constraints","name":"Upserting into tables with constraints","description":"Running the following will cause Supabase to upsert data into the `users` table.\nIf the username 'supabot' already exists, the `onConflict` argument tells Supabase to overwrite that row\nbased on the column passed into `onConflict`.\n","isSpotlight":true,"code":"```kotlin\nval toUpsert = User(username = \"supabot\")\nsupabase.from(\"users\").upsert(toUpsert, onConflict = \"username\")\n```\n"},{"id":"upsert-return-row-count","name":"Return the exact number of rows","isSpotlight":true,"code":"```kotlin\nval toUpsert = User(username = \"supabot\")\nval count = supabase.from(\"users\").upsert(toUpsert, onConflict = \"username\") {\n    count(Count.EXACT)\n}.count()\n```\n"}]},{"id":"delete","title":"Delete data: delete()","$ref":"@supabase/postgrest-js.\"lib/PostgrestQueryBuilder\".PostgrestQueryBuilder.delete","notes":"Perform a DELETE on the table or view.\n- `delete()` should always be combined with a [filter](/docs/reference/kotlin/using-filters) block to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have\n  [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only\n  rows visible through `SELECT` policies are deleted. Note that by default\n  no rows are visible, so you need at least one `SELECT`/`ALL` policy that\n  makes the rows visible.\n- By default, `delete` will not return the deleted data. If you want to return the deleted data, you can use the `select()` method inside the request.\n","params":[{"name":"request","isOptional":true,"type":"PostgrestRequestBuilder.() -> Unit","description":"Additional configuration & filtering for the request."}],"examples":[{"id":"delete-records","name":"Delete records","isSpotlight":true,"code":"```kotlin\nsupabase.from(\"cities\").delete {\n    filter {\n        City::id eq 666\n        //or\n        eq(\"id\", 666)\n    }\n}\n```\n"},{"id":"fetch-delete-records","name":"Fetch deleted records","code":"```kotlin\nval deletedCity = supabase.from(\"cities\").delete {\n    select()\n    filter {\n        City::id eq 666\n        //or\n        eq(\"id\", 666)\n    }\n}.decodeSingle<City>()\n```\n"}]},{"id":"rpc","title":"Stored Procedures: rpc()","description":"You can call stored procedures as a \"Remote Procedure Call\".\n\nThat's a fancy way of saying that you can put some logic into your database then call it from anywhere.\nIt's especially useful when the logic rarely changes - like password resets and updates.\n\n- When calling `rpc` with parameters, you have to provide a [serializable value](/docs/reference/kotlin/installing#serialization) in the function parameter.\n","params":[{"name":"function","isOptional":false,"type":"String","description":"The name of the function"},{"name":"parameters","isOptional":true,"type":"T","description":"Parameters to pass to the function. T can be any serializable type."},{"name":"method","isOptional":true,"type":"RpcMethod","description":"The HTTP method to use. Defaults  to `RpcMethod.POST`"},{"name":"request","isOptional":true,"type":"PostgrestRequestBuilder.() -> Unit","description":"Additional configuration & filtering for the request."}],"examples":[{"id":"call-a-stored-procedure","name":"Call a stored procedure","isSpotlight":true,"description":"This is an example invoking a stored procedure.","code":"```kotlin\nsupabase.postgrest.rpc(\"hello_world\")\n```\n"},{"id":"with-parameters","name":"With Parameters","code":"```kotlin\nval rpcParams = City(name = \"The Shire\")\nsupabase.postgrest.rpc(\"echo_city\", rpcParams)\n```\n"}]},{"id":"using-filters","title":"Using Filters","description":"Filters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, and `delete()` queries.\n\nYou can use two different types for applying filters:\n```kotlin\neq(\"country_id\", 1)\n```\nAnd using a class property:\n```kotlin\nCity::countryId eq 1\n```\n\nAs you can see on the property syntax:\nthe name of the `countryId` gets converted to `country_id`.\n\nBy default, this is done by converting camel case to snake case, but you can customize this by changing the `propertyConversionMethod` in the Postgrest Config\n\nIf a database function returns a table response, you can also apply filters.\n","examples":[{"id":"applying-filters","name":"Applying a filter block","description":"Filters can be applied on any of these functions: `select()`, `update()`, `upsert()`,\n`delete()`, and `rpc()`\n","code":"```kotlin\nsupabase.from(\"cities\").select(columns = Columns.list(\"name\", \"country_id\")) {\n    filter {\n        City::name eq \"The Shire\"\n        //or\n        eq(\"name\", \"The Shire\")\n    }\n}\n```\n"},{"id":"multiple-filters","name":"Multiple filters on one column","description":"Filters can be applied on any of these functions: `select()`, `update()`, `upsert()`,\n`delete()`, and `rpc()`\n","code":"```kotlin\nsupabase.from(\"cities\").select(columns = Columns.list(\"name, country_id\")) {\n    filter {\n        and { //when both are true\n           City::population gt 40000\n           City::population lt 700000\n        }\n        or { //when either one of the filters are true\n           City::name eq \"Hobbiton\"\n           City::name eq \"Edoras\"\n        }\n    }\n}\n```\n"},{"id":"filter-by-value-within-json-column","name":"Filter by values within a JSON column","description":"Filters can be built up one step at a time and then executed. For example:\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\ninsert into\n  users (id, name, address)\nvalues\n  (1, 'Michael', '{ \"postcode\": 90210 }'),\n  (2, 'Jane', null);\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Michael\",\n      \"address\": {\n        \"postcode\": 90210\n      }\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","code":"```kotlin\nsupabase.from(\"users\").select {\n    filter {\n        eq(\"address->postcode\", 90210)\n    }\n}\n```\n"},{"id":"filter-foreign-tables","name":"Filter Foreign Tables","code":"```kotlin\nval columns = Columns.raw(\"\"\"\n    name,\n    cities!inner (\n        name\n    )\n\"\"\".trimIndent())\nsupabase.from(\"countries\").select(\n      columns = columns\n) {\n    filter {\n        eq(\"cities.name\", \"Hobbiton\")\n    }\n}\n```\n","data":{"sql":"```sql\ncreate table\n  countries (id int8 primary key, name text);\ncreate table\n  cities (\n    id int8 primary key,\n    country_id int8 not null references countries,\n    name text\n  );\n\ninsert into\n  countries (id, name)\nvalues\n  (1, 'Gondor'),\n  (2, 'The Shire');\ninsert into\n  cities (id, country_id, name)\nvalues\n  (1, 2, 'Hobbiton'),\n  (2, 1, 'Minas Tirith');\n```\n","response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"The Shire\",\n      \"cities\": [\n        {\n          \"name\": \"Hobbiton\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n"}}]},{"id":"or","title":"or()","description":"Finds all rows satisfying at least one of the filters.\n","params":[{"name":"negate","isOptional":true,"type":"Boolean","description":"If true, negate the entire block."},{"name":"block","isOptional":false,"type":"PostgrestFilterBuilder.() -> Unit","description":"The block to apply the `or` filter to."}],"examples":[{"id":"with-select","name":"With select()","isSpotlight":true,"code":"```kotlin\nsupabase.from(\"countries\").select(columns = Columns.list(\"name\")) {\n    filter {\n        or {\n            Country::id eq 2\n            Country::name eq \"The Shire\"\n            //or\n            eq(\"id\", 2)\n            eq(\"name\", \"The Shire\")\n        }\n    }\n}\n```\n"},{"id":"use-or-with-and","name":"Use `or` with `and`","code":"```kotlin\nsupabase.from(\"countries\").select(columns = Columns.list(\"name\")) {\n    filter {\n        or {\n            Country::id gt 3\n            and {\n               Country::id eq 1\n               Country::name eq \"The Shire\"\n            }\n        }\n    }\n}\n```\n"}]},{"id":"not","title":"filterNot()","description":"Finds all rows that don't satisfy the filter.\n","notes":"- `.filterNot()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for the filter names and values.\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The column to filter on."},{"name":"operator","isOptional":false,"type":"FilterOperator","description":"The operator to use for the filter."},{"name":"value","isOptional":false,"type":"Any","description":"The value to filter with."}],"examples":[{"id":"with-select","name":"With select()","isSpotlight":true,"code":"```kotlin\nsupabase.from(\"countries\").select {\n    filter {\n        filterNot(\"name\", FilterOperation.IS, \"\")\n    }\n}\n```\n"}]},{"id":"eq","title":"eq()","description":"Finds all rows whose value on the stated `column` exactly matches the specified `value`.\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The column to filter on."},{"name":"value","isOptional":false,"type":"Any","description":"The value to filter with."}],"examples":[{"id":"with-select","name":"With select()","isSpotlight":true,"code":"```kotlin\nsupabase.from(\"cities\").select(columns = Columns.list(\"name\", \"country_id\")) {\n    filter {\n        City::name eq \"The Shire\"\n        //or\n        eq(\"name\", \"The Shire\")\n    }\n}\n```\n"},{"id":"with-update","name":"With update()","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.from(\"cities\").update(toUpdate) {\n    filter {\n        City::name eq \"Hobbiton\"\n        //or\n        eq(\"name\", \"Hobbiton\")\n    }\n}\n```\n"},{"id":"with-delete","name":"With delete()","code":"```kotlin\nsupabase.from(\"cities\").delete {\n    filter {\n        City::name eq \"Mordor\"\n        //or\n        eq(\"name\", \"Mordor\")\n    }\n}\n```\n"},{"id":"with-rpc","name":"With rpc()","code":"```kotlin\nsupabase.postgrest.rpc(\"function\") {\n    filter {\n        City::name eq \"Mordor\"\n        //or\n        eq(\"name\", \"Mordor\")\n    }\n}\n```\n"}]},{"id":"neq","title":"neq()","description":"Finds all rows whose value on the stated `column` doesn't match the specified `value`.\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The column to filter on."},{"name":"value","isOptional":false,"type":"Any","description":"The value to filter with."}],"examples":[{"id":"with-select","name":"With select()","isSpotlight":true,"code":"```kotlin\nsupabase.from(\"cities\").select(columns = Columns.list(\"name\", \"country_id\")) {\n    filter {\n        City::name neq \"The Shire\"\n        //or\n        neq(\"name\", \"The Shire\")\n    }\n}\n```\n"},{"id":"with-update","name":"With update()","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.from(\"cities\").update(toUpdate) {\n    filter {\n        City::name neq \"The Shire\"\n        //or\n        neq(\"name\", \"The Shire\")\n    }\n}\n```\n"},{"id":"with-delete","name":"With delete()","code":"```kotlin\nsupabase.from(\"cities\").delete {\n    filter {\n        City::name neq \"The Shire\"\n        //or\n        neq(\"name\", \"The Shire\")\n    }\n}\n```\n"},{"id":"with-rpc","name":"With rpc()","code":"```kotlin\nsupabase.rpc(\"echo_all_cities\") {\n    filter {\n        neq(\"address->postcode\", 90210)\n    }\n}\n```\n"}]},{"id":"gt","title":"gt()","description":"Finds all rows whose value on the stated `column` is greater than the specified `value`.\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The column to filter on."},{"name":"value","isOptional":false,"type":"Any","description":"The value to filter with."}],"examples":[{"id":"with-select","name":"With select()","isSpotlight":true,"code":"```kotlin\nsupabase.from(\"cities\").select(columns = Columns.list(\"name\")) {\n    filter {\n       City::countryId gt 300\n       //or\n       gt(\"country_id\", 300)\n    }\n}\n```\n"},{"id":"with-update","name":"With update()","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.from(\"cities\").update(toUpdate) {\n    filter {\n       City::countryId gt 300\n       //or\n       gt(\"country_id\", 300)\n    }\n}\n```\n"},{"id":"with-delete","name":"With delete()","code":"```kotlin\nsupabase.from(\"cities\").delete {\n    filter {\n       City::countryId gt 300\n       //or\n       gt(\"country_id\", 300)\n    }\n}\n```\n"},{"id":"with-rpc","name":"With rpc()","code":"```kotlin\nsupabase.postgrest.rpc(\"echo_all_cities\") {\n    filter {\n       City::countryId gt 300\n       //or\n       gt(\"country_id\", 300)\n    }\n}\n```\n"}]},{"id":"gte","title":"gte()","description":"Finds all rows whose value on the stated `column` is greater than or equal to the specified `value`.\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The column to filter on."},{"name":"value","isOptional":false,"type":"Any","description":"The value to filter with."}],"examples":[{"id":"with-select","name":"With select()","isSpotlight":true,"code":"```kotlin\nsupabase.from(\"cities\").select(columns = Columns.list(\"name\")) {\n    filter {\n       City::countryId gte 300\n       //or\n       gte(\"country_id\", 300)\n    }\n}\n```\n"},{"id":"with-update","name":"With update()","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.from(\"cities\").update(toUpdate) {\n    filter {\n       City::countryId gte 300\n       //or\n       gte(\"country_id\", 300)\n    }\n}\n```\n"},{"id":"with-delete","name":"With delete()","code":"```kotlin\nsupabase.from(\"cities\").delete {\n    filter {\n       City::countryId gte 300\n       //or\n       gte(\"country_id\", 300)\n    }\n}\n```\n"},{"id":"with-rpc","name":"With rpc()","code":"```kotlin\nsupabase.postgrest.rpc(\"echo_all_cities\") {\n    filter {\n       City::countryId gte 300\n       //or\n       gte(\"country_id\", 300)\n    }\n}\n```\n"}]},{"id":"lt","title":"lt()","description":"Finds all rows whose value on the stated `column` is less than the specified `value`.\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The column to filter on."},{"name":"value","isOptional":false,"type":"Any","description":"The value to filter with."}],"examples":[{"id":"with-select","name":"With select()","isSpotlight":true,"code":"```kotlin\nsupabase.from(\"cities\").select(columns = Columns.list(\"name\")) {\n    filter {\n       City::countryId lt 300\n       //or\n       lt(\"country_id\", 300)\n    }\n}\n```\n"},{"id":"with-update","name":"With update()","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.from(\"cities\").update(toUpdate) {\n    filter {\n       City::countryId lt 300\n       //or\n       lt(\"country_id\", 300)\n    }\n}\n```\n"},{"id":"with-delete","name":"With delete()","code":"```kotlin\nsupabase.from(\"cities\").delete {\n    filter {\n       City::countryId lt 300\n       //or\n       lt(\"country_id\", 300)\n    }\n}\n```\n"},{"id":"with-rpc","name":"With rpc()","code":"```kotlin\nsupabase.postgrest.rpc(\"echo_all_cities\") {\n    filter {\n       City::countryId lt 300\n       //or\n       lt(\"country_id\", 300)\n    }\n}\n```\n"}]},{"id":"lte","title":"lte()","description":"Finds all rows whose value on the stated `column` is less than or equal to the specified `value`.\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The column to filter on."},{"name":"value","isOptional":false,"type":"Any","description":"The value to filter with."}],"examples":[{"id":"with-select","name":"With select()","isSpotlight":true,"code":"```kotlin\nsupabase.from(\"cities\").select(columns = Columns.list(\"name\")) {\n    filter {\n       City::countryId lte 300\n       //or\n       lte(\"country_id\", 300)\n    }\n}\n```\n"},{"id":"with-update","name":"With update()","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.from(\"cities\").update(toUpdate) {\n    filter {\n       City::countryId lte 300\n       //or\n       lte(\"country_id\", 300)\n    }\n}\n```\n"},{"id":"with-delete","name":"With delete()","code":"```kotlin\nsupabase.from(\"cities\").delete {\n    filter {\n       City::countryId lte 300\n       //or\n       lte(\"country_id\", 300)\n    }\n}\n```\n"},{"id":"with-rpc","name":"With rpc()","code":"```kotlin\nsupabase.postgrest.rpc(\"echo_all_cities\") {\n    filter {\n       City::countryId lte 300\n       //or\n       lte(\"country_id\", 300)\n    }\n}\n```\n"}]},{"id":"like","title":"like()","description":"Finds all rows whose value in the stated `column` matches the supplied `pattern` (case sensitive).\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The column to filter on."},{"name":"pattern","isOptional":false,"type":"String","description":"The pattern to match with."}],"examples":[{"id":"with-select","name":"With select()","isSpotlight":true,"code":"```kotlin\nsupabase.from(\"cities\").select(columns = Columns.list(\"name\")) {\n    filter {\n       City::name like \"%la%\"\n       //or\n       like(\"name\", \"%la%\")\n    }\n}\n```\n"},{"id":"with-update","name":"With update()","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.from(\"cities\").update(toUpdate) {\n    filter {\n       City::name like \"%la%\"\n       //or\n       like(\"name\", \"%la%\")\n    }\n}\n```\n"},{"id":"with-delete","name":"With delete()","code":"```kotlin\nsupabase.from(\"cities\").delete {\n    filter {\n       City::name like \"%la%\"\n       //or\n       like(\"name\", \"%la%\")\n    }\n}\n```\n"},{"id":"with-rpc","name":"With rpc()","code":"```kotlin\nsupabase.postgrest.rpc(\"echo_all_cities\") {\n    filter {\n       City::name like \"%la%\"\n       //or\n       like(\"name\", \"%la%\")\n    }\n}\n```\n"}]},{"id":"ilike","title":"ilike()","description":"Finds all rows whose value in the stated `column` matches the supplied `pattern` (case insensitive).\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The column to filter on."},{"name":"pattern","isOptional":false,"type":"String","description":"The pattern to match with."}],"examples":[{"id":"with-select","name":"With select()","isSpotlight":true,"code":"```kotlin\nsupabase.from(\"cities\").select(columns = Columns.list(\"name\")) {\n    filter {\n       City::name ilike \"%la%\"\n       //or\n       ilike(\"name\", \"%la%\")\n    }\n}\n```\n"},{"id":"with-update","name":"With update()","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.from(\"cities\").update(toUpdate) {\n    filter {\n       City::name ilike \"%la%\"\n       //or\n       ilike(\"name\", \"%la%\")\n    }\n}\n```\n"},{"id":"with-delete","name":"With delete()","code":"```kotlin\nsupabase.from(\"cities\").delete {\n    filter {\n       City::name ilike \"%la%\"\n       //or\n       ilike(\"name\", \"%la%\")\n    }\n}\n```\n"},{"id":"with-rpc","name":"With rpc()","code":"```kotlin\nsupabase.postgrest.rpc(\"echo_all_cities\") {\n    filter {\n       City::name ilike \"%la%\"\n       //or\n       ilike(\"name\", \"%la%\")\n    }\n}\n```\n"}]},{"id":"is","title":"is_()","description":"A check for exact equality (null, true, false), finds all rows whose value on the stated `column` exactly match the specified `value`.\n\n`is_` and `in_` filter methods are suffixed with `_` to avoid collisions with reserved keywords.\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The column to filter on."},{"name":"value","isOptional":false,"type":"Boolean?","description":"The value to filter with."}],"examples":[{"id":"with-select","name":"With select()","isSpotlight":true,"code":"```kotlin\nsupabase.from(\"cities\").select(columns = Columns.list(\"name\")) {\n    filter {\n       City::name isExact null\n       //or\n       exact(\"name\", null)\n    }\n}\n```\n"},{"id":"with-update","name":"With update()","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.from(\"cities\").update(toUpdate) {\n    filter {\n       City::name isExact null\n       //or\n       exact(\"name\", null)\n    }\n}\n```\n"},{"id":"with-delete","name":"With delete()","code":"```kotlin\nsupabase.from(\"cities\").delete {\n    filter {\n       City::name isExact null\n       //or\n       exact(\"name\", null)\n    }\n}\n```\n"},{"id":"with-rpc","name":"With rpc()","code":"```kotlin\nsupabase.postgrest.rpc(\"echo_all_cities\") {\n    filter {\n       City::name isExact null\n       //or\n       exact(\"name\", null)\n    }\n}\n```\n"}]},{"id":"in","title":"in_()","description":"Finds all rows whose value on the stated `column` is found on the specified `values`.\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The column to filter on."},{"name":"values","isOptional":false,"type":"List<Any>","description":"The values to filter with."}],"examples":[{"id":"with-select","name":"With select()","isSpotlight":true,"code":"```kotlin\nsupabase.from(\"cities\").select(columns = Columns.list(\"name\")) {\n    filter {\n       City::name isIn listOf(\"Hobbiton\", \"Edoras\")\n       //or\n       isIn(\"name\", listOf(\"Hobbiton\", \"Edoras\"))\n    }\n}\n```\n"},{"id":"with-update","name":"With update()","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.from(\"cities\").update(toUpdate) {\n    filter {\n       City::name isIn listOf(\"Hobbiton\", \"Edoras\")\n       //or\n       isIn(\"name\", listOf(\"Hobbiton\", \"Edoras\"))\n    }\n}\n```\n"},{"id":"with-delete","name":"With delete()","code":"```kotlin\nsupabase.from(\"cities\").delete {\n    filter {\n       City::name isIn listOf(\"Hobbiton\", \"Edoras\")\n       //or\n       isIn(\"name\", listOf(\"Hobbiton\", \"Edoras\"))\n    }\n}\n```\n"},{"id":"with-rpc","name":"With rpc()","code":"```kotlin\nsupabase.postgrest.rpc(\"echo_all_cities\") {\n    filter {\n       City::name isIn listOf(\"Hobbiton\", \"Edoras\")\n       //or\n       isIn(\"name\", listOf(\"Hobbiton\", \"Edoras\"))\n    }\n}\n```\n"}]},{"id":"contains","title":"contains()","description":"Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The jsonb, array, or range column to filter on"},{"name":"value","isOptional":false,"type":"List<Any>","description":"The jsonb, array, or range value to filter with"}],"examples":[{"id":"with-select","name":"With select()","isSpotlight":true,"code":"```kotlin\nsupabase.from(\"cities\").select(columns = Columns.list(\"name\")) {\n    filter {\n       City::mainExports contains listOf(\"oil\")\n       //or\n       contains(\"main_exports\", listOf(\"oil\"))\n    }\n}\n```\n"},{"id":"with-update","name":"With update()","code":"```kotlin\nval toUpdate = City(name = \"Mordor\")\nsupabase.from(\"cities\").update(toUpdate) {\n    filter {\n       City::mainExports contains listOf(\"oil\")\n       //or\n       contains(\"main_exports\", listOf(\"oil\"))\n    }\n}\n```\n"},{"id":"with-delete","name":"With delete()","code":"```kotlin\nsupabase.from(\"cities\").delete {\n    filter {\n       City::mainExports contains listOf(\"oil\")\n       //or\n       contains(\"main_exports\", listOf(\"oil\"))\n    }\n}\n```\n"},{"id":"with-rpc","name":"With rpc()","code":"```kotlin\nsupabase.postgrest.rpc(\"echo_all_cities\") {\n    filter {\n       City::mainExports contains listOf(\"oil\")\n       //or\n       contains(\"main_exports\", listOf(\"oil\"))\n    }\n}\n```\n"}]},{"id":"range-lt","title":"rangeLt()","description":"Only relevant for range columns. Match only rows where every element in column is less than any element in range.\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The column to filter on."},{"name":"values","isOptional":false,"type":"Pair<Any, Any>","description":"The values to filter with."}],"examples":[{"id":"with-select","name":"With select()","isSpotlight":true,"code":"```kotlin\n  supabase.from(\"reservations\").select {\n      filter {\n         Reservation::during rangeLt (\"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n         //or\n         rangeLt(\"during\", \"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n      }\n  }\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"room_name\": \"Emerald\",\n      \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n","hideCodeBlock":true}]},{"id":"range-gt","title":"rangeGt()","description":"Only relevant for range columns. Match only rows where every element in column is greater than any element in range.\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The column to filter on."},{"name":"values","isOptional":false,"type":"Pair<Any, Any>","description":"The values to filter with."}],"examples":[{"id":"with-select","name":"With select()","isSpotlight":true,"code":"```kotlin\n  supabase.from(\"reservations\").select {\n      filter {\n         Reservation::during rangeGt (\"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n         //or\n         rangeGt(\"during\", \"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n      }\n  }\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n  {\n    \"data\": [\n      {\n        \"id\": 2,\n        \"room_name\": \"Topaz\",\n        \"during\": \"[\\\"2000-01-02 09:00:00\\\",\\\"2000-01-02 10:00:00\\\")\"\n      }\n    ],\n    \"status\": 200,\n    \"statusText\": \"OK\"\n  }\n  ```\n","description":"Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n","hideCodeBlock":true}]},{"id":"range-gte","title":"rangeGte()","description":"Only relevant for range columns. Match only rows where every element in column is either contained in range or greater than any element in range.\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The column to filter on."},{"name":"values","isOptional":false,"type":"Pair<Any, Any>","description":"The values to filter with."}],"examples":[{"id":"with-select","name":"With select()","isSpotlight":true,"code":"```kotlin\n  supabase.from(\"reservations\").select {\n      filter {\n         Reservation::during rangeGte (\"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n         //or\n         rangeGte(\"during\", \"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n      }\n  }\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n  {\n    \"data\": [\n      {\n        \"id\": 2,\n        \"room_name\": \"Topaz\",\n        \"during\": \"[\\\"2000-01-02 09:00:00\\\",\\\"2000-01-02 10:00:00\\\")\"\n      }\n    ],\n    \"status\": 200,\n    \"statusText\": \"OK\"\n  }\n  ```\n","description":"Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n","hideCodeBlock":true}]},{"id":"range-lte","title":"rangeLte()","description":"Only relevant for range columns. Match only rows where every element in column is either contained in range or less than any element in range.\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The column to filter on."},{"name":"values","isOptional":false,"type":"Pair<Any, Any>","description":"The values to filter with."}],"$ref":"@supabase/postgrest-js.PostgrestFilterBuilder.rangeLte","examples":[{"id":"with-select","name":"With select()","isSpotlight":true,"code":"```kotlin\n  supabase.from(\"reservations\").select {\n      filter {\n         Reservation::during rangeLte (\"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n         //or\n         rangeLte(\"during\", \"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n      }\n  }\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n  {\n    \"data\": [\n      {\n        \"id\": 1,\n        \"room_name\": \"Emerald\",\n        \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n      }\n    ],\n    \"status\": 200,\n    \"statusText\": \"OK\"\n  }\n  ```\n","description":"Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n","hideCodeBlock":true}]},{"id":"range-adjacent","title":"rangeAdjacent()","description":"Only relevant for range columns. Match only rows where column is mutually exclusive to range and there can be no element between the two ranges.\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The column to filter on."},{"name":"values","isOptional":false,"type":"Pair<Any, Any>","description":"The values to filter with."}],"examples":[{"id":"with-select","name":"With select()","isSpotlight":true,"code":"```kotlin\n  supabase.from(\"reservations\").select {\n      filter {\n         Reservation::during adjacent (\"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n         //or\n         adjacent(\"during\", \"2000-01-02 08:30\" to \"2000-01-02 09:30\")\n      }\n  }\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"room_name\": \"Emerald\",\n      \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true}]},{"id":"overlaps","title":"overlaps()","$ref":"@supabase/postgrest-js.PostgrestFilterBuilder.overlaps","description":"Only relevant for array and range columns. Match only rows where column and value have an element in common.\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The column to filter on."},{"name":"values","isOptional":false,"type":"List<Any>","description":"The values to filter with."}],"examples":[{"id":"on-array-columns","name":"On array columns","code":"```kotlin\nsupabase.from(\"issues\").select(columns = Columns.list(\"title\")) {\n    filter {\n       Issue::tags overlaps listOf(\"is:closed\", \"severity:high\")\n       //or\n       overlaps(\"tags\", listOf(\"is:closed\", \"severity:high\"))\n    }\n}\n```\n","data":{"sql":"```sql\ncreate table\n  issues (\n    id int8 primary key,\n    title text,\n    tags text[]\n  );\n\ninsert into\n  issues (id, title, tags)\nvalues\n  (1, 'Cache invalidation is not working', array['is:open', 'severity:high', 'priority:low']),\n  (2, 'Use better names', array['is:open', 'severity:low', 'priority:medium']);\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"title\": \"Cache invalidation is not working\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-range-columns","name":"On range columns","code":"```kotlin\nsupabase.from(\"issues\").select(columns = Columns.list(\"title\")) {\n    filter {\n       Issue::during overlaps listOf(\"2000-01-01 12:45\", \"2000-01-01 13:15\")\n       //or\n       overlaps(\"during\", listOf(\"2000-01-01 12:45\", \"2000-01-01 13:15\"))\n    }\n}\n```\n","data":{"sql":"```sql\ncreate table\n  reservations (\n    id int8 primary key,\n    room_name text,\n    during tsrange\n  );\n\ninsert into\n  reservations (id, room_name, during)\nvalues\n  (1, 'Emerald', '[2000-01-01 13:00, 2000-01-01 15:00)'),\n  (2, 'Topaz', '[2000-01-02 09:00, 2000-01-02 10:00)');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"room_name\": \"Emerald\",\n      \"during\": \"[\\\"2000-01-01 13:00:00\\\",\\\"2000-01-01 15:00:00\\\")\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"Postgres supports a number of [range\ntypes](https://www.postgresql.org/docs/current/rangetypes.html). You\ncan filter on range columns using the string representation of range\nvalues.\n","hideCodeBlock":true}]},{"id":"text-search","title":"textSearch()","description":"Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\nFor more information, see [Postgres full text search](https://supabase.com/docs/guides/database/full-text-search).\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The text or tsvector column to filter on"},{"name":"query","isOptional":false,"type":"String","description":"The query text to match with"},{"name":"textSearchType","isOptional":true,"type":"TextSearchType","description":"The type of text search to use. Defaults to `TextSearchType.NONE`."},{"name":"config","isOptional":true,"type":"String","description":"The text search configuration to use."}],"examples":[{"id":"text-search","name":"Text search","code":"```kotlin\nsupabase.from(\"quotes\").select(columns = Columns.list(\"catchphrase\")) {\n    filter {\n       textSearch(column = \"catchphrase\", query = \"'fat' & 'cat'\", config = \"english\", type = TextSearchType.YOUR_TYPE)\n    }\n}\n```\n"},{"id":"search-multiple-columns","name":"Search multiple columns","code":"```kotlin\nsupabase.from(\"quotes\").select(columns = Columns.list(\"catchphrase\")) {\n    filter {\n      or {\n        textSearch(column = \"catchphrase\", query = \"'fat' & 'cat'\", config = \"english\", type = TextSearchType.YOUR_TYPE)\n        textSearch(column = \"author\", query = \"'fat' & 'cat'\", config = \"english\", type = TextSearchType.YOUR_TYPE)\n      }\n    }\n}\n```\n"},{"id":"basic-normalization","name":"Basic normalization","description":"Uses PostgreSQL's `plainto_tsquery` function.","code":"```kotlin\nsupabase.from(\"quotes\").select(columns = Columns.list(\"catchphrase\")) {\n    filter {\n       textSearch(column = \"catchphrase\", query = \"'fat' & 'cat'\", config = \"english\", type = TextSearchType.PLAINTO)\n    }\n}\n```\n"},{"id":"full-normalization","name":"Full normalization","description":"Uses PostgreSQL's `phraseto_tsquery` function.","code":"```kotlin\nsupabase.from(\"quotes\").select(columns = Columns.list(\"catchphrase\")) {\n    filter {\n       textSearch(column = \"catchphrase\", query = \"'fat' & 'cat'\", config = \"english\", type = TextSearchType.PHRASETO)\n    }\n}\n```\n"},{"id":"web-search","name":"Websearch","description":"Uses PostgreSQL's `websearch_to_tsquery` function.\nThis function will never raise syntax errors, which makes it possible to use raw user-supplied input for search, and can be used\nwith advanced operators.\n\n- `unquoted text`: text not inside quote marks will be converted to terms separated by & operators, as if processed by plainto_tsquery.\n- `\"quoted text\"`: text inside quote marks will be converted to terms separated by `<->` operators, as if processed by phraseto_tsquery.\n- `OR`: the word “or” will be converted to the | operator.\n- `-`: a dash will be converted to the ! operator.\n","code":"```kotlin\nsupabase.from(\"quotes\").select(columns = Columns.list(\"catchphrase\")) {\n    filter {\n       textSearch(column = \"catchphrase\", query = \"'fat' & 'cat'\", config = \"english\", type = TextSearchType.WEBSEARCH)\n    }\n}\n```\n"}]},{"id":"filter","title":"filter()","$ref":"@supabase/postgrest-js.PostgrestFilterBuilder.filter","notes":"filter() expects you to use the raw PostgREST syntax for the filter values.\n","params":[{"name":"column","isOptional":false,"type":"String","description":"The column to filter on."},{"name":"operator","isOptional":false,"type":"FilterOperator","description":"The operator to use for the filter."},{"name":"value","isOptional":false,"type":"Any","description":"The value to filter with."}],"examples":[{"id":"with-select","name":"With select()","code":"```kotlin\nsupabase.from(\"characters\").select {\n    filter {\n       filter(column = \"name\", operator = FilterOperator.IN, value = \"('Han', 'Katniss')\")\n    }\n}\n```\n","data":{"sql":"```sql\ncreate table\n  characters (id int8 primary key, name text);\n\ninsert into\n  characters (id, name)\nvalues\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 3,\n      \"name\": \"Han\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-a-foreign-table","name":"On a foreign table","code":"```kotlin\nval columns = Columns.raw(\"\"\"\n    name,\n    instruments!inner (\n        name\n    )\n\"\"\".trimIndent())\nsupabase.from(\"orchestral_sections\").select(\n   columns = columns\n) {\n    filter {\n        filter(column = \"instruments.name\", operator = FilterOperator.EQ, value = \"flute\")\n    }\n}\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"woodwinds\",\n      \"instruments\": [\n        {\n          \"name\": \"flute\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true}]},{"id":"using-modifiers","title":"Using Modifiers","description":"Filters work on the row level—they allow you to return rows that\nonly match certain conditions without changing the shape of the rows.\nModifiers are everything that don't fit that definition—allowing you to\nchange the format of the response (e.g., returning a CSV string).\n\nModifiers are be specified next to the filter block. Some modifiers only apply for\nqueries that return rows (e.g., `select()` or `rpc()` on a function that\nreturns a table response).\n"},{"id":"db-modifiers-select","title":"select()","$ref":"@supabase/postgrest-js.PostgrestTransformBuilder.select","params":[{"name":"columns","isOptional":true,"type":"Columns","description":"The columns to select."}],"examples":[{"id":"with-upsert","name":"With upsert()","code":"```kotlin\nval toUpsert = Character(id = 2, name = \"Leia\")\nval count = supabase.from(\"characters\").upsert(toUpsert) {\n    select()\n}.decodeSingle<Character>()\n```\n","data":{"sql":"```sql\ncreate table\n  characters (id int8 primary key, name text);\n\ninsert into\n  characters (id, name)\nvalues\n  (1, 'Luke');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 2,\n      \"name\": \"Leia\"\n    }\n  ],\n  \"status\": 201,\n  \"statusText\": \"Created\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"order","title":"order()","description":"Order the query result by column.\n","$ref":"@supabase/postgrest-js.PostgrestTransformBuilder.order","params":[{"name":"column","isOptional":false,"type":"String","description":"The column to order by."},{"name":"order","isOptional":false,"type":"Order","description":"The order to use."},{"name":"nullsFirst","isOptional":true,"type":"Boolean","description":"Whether to order nulls first."},{"name":"referencedTable","isOptional":true,"type":"String","description":"The foreign table to order by."}],"examples":[{"id":"with-select","name":"With select()","code":"```kotlin\nsupabase.from(\"characters\").select(columns = Columns.list(\"id\", \"name\")) {\n   order(column = \"id\", order = Order.DESCENDING)\n}\n```\n","data":{"sql":"```sql\ncreate table\n  characters (id int8 primary key, name text);\n\ninsert into\n  characters (id, name)\nvalues\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 3,\n      \"name\": \"Han\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Leia\"\n    },\n    {\n      \"id\": 1,\n      \"name\": \"Luke\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-a-foreign-table","name":"On a foreign table","code":"```kotlin\nval columns = Columns.raw(\"\"\"\n    name,\n    instruments (\n        name\n    )\n\"\"\".trimIndent())\nsupabase.from(\"orchestral_sections\").select(\n    columns = columns\n) {\n    order(column = \"id\", order = Order.DESCENDING, referencedTable = \"instruments\")\n}\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 1, 'harp'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"instruments\": [\n        {\n          \"name\": \"violin\"\n        },\n        {\n          \"name\": \"harp\"\n        }\n      ]\n    },\n    {\n      \"name\": \"woodwinds\",\n      \"instruments\": []\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"Ordering on foreign tables doesn't affect the ordering of\nthe parent table.\n","hideCodeBlock":true}]},{"id":"limit","title":"limit()","description":"Limit the query result by count.\n","$ref":"@supabase/postgrest-js.PostgrestTransformBuilder.limit","params":[{"name":"count","isOptional":false,"type":"Long","description":"The number of rows to limit the result to."},{"name":"referencedTable","isOptional":true,"type":"String","description":"The foreign table to limit by."}],"examples":[{"id":"with-select","name":"With select()","code":"```kotlin\nsupabase.from(\"countries\").select {\n    limit(count = 1)\n}\n```\n","data":{"sql":"```sql\ncreate table\n  characters (id int8 primary key, name text);\n\ninsert into\n  characters (id, name)\nvalues\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"Luke\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-a-foreign-table","name":"On a foreign table","code":"```kotlin\nval columns = Columns.raw(\"\"\"\n    name,\n    instruments (\n        name\n    )\n\"\"\")\nsupabase.from(\"orchestral_sections\").select(\n    columns = columns\n) {\n    limit(count = 1, referencedTable = \"instruments\")\n}\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 1, 'harp'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"cities\": [\n        {\n          \"name\": \"harp\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true}]},{"id":"range","title":"range()","description":"Limit the query result by from and to inclusively.\n","params":[{"name":"from","isOptional":false,"type":"Long","description":"The start of the range."},{"name":"to","isOptional":false,"type":"Long","description":"The end of the range."},{"name":"referencedTable","isOptional":true,"type":"String","description":"The foreign table to limit by."}],"examples":[{"id":"with-select","name":"With select()","code":"```kotlin\nsupabase.from(\"characters\").select {\n    range(1L..5L)\n}\n```\n","data":{"sql":"```sql\ncreate table\n  characters (id int8 primary key, name text);\n\ninsert into\n  characters (id, name)\nvalues\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"Luke\"\n    },\n    {\n      \"name\": \"Leia\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"single","title":"single()","$ref":"@supabase/postgrest-js.PostgrestTransformBuilder.single","examples":[{"id":"with-select","name":"With select()","code":"```kotlin\nval result = supabase.from(\"characters\").select(Columns.list(\"name\")) {\n    limit(1)\n    single()\n}\n```\n","data":{"sql":"```sql\ncreate table\n  characters (id int8 primary key, name text);\n\ninsert into\n  characters (id, name)\nvalues\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"},"response":"```json\n{\n  \"data\": {\n    \"name\": \"Luke\"\n  },\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"csv","$ref":"@supabase/postgrest-js.PostgrestTransformBuilder.csv","title":"csv()","examples":[{"id":"return-data-as-csv","name":"Return data as CSV","code":"```kotlin\nval (csvData, _) = supabase.from(\"characters\").select {\n    csv()\n}\n```\n","data":{"sql":"```sql\ncreate table\n  characters (id int8 primary key, name text);\n\ninsert into\n  characters (id, name)\nvalues\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"},"response":"```json\n{\n  \"data\": \"id,name\\n1,Luke\\n2,Leia\\n3,Han\",\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"By default, the data is returned in JSON format, but can also be returned as Comma Separated Values.\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"explain","$ref":"@supabase/postgrest-js.PostgrestTransformBuilder.explain","title":"Using Explain","description":"For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query\nusing the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database.\nIt's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/api/rest/debugging-performance) to enable the functionality on your project.\n","params":[{"name":"analyze","isOptional":true,"type":"Boolean","description":"If `true`, the query will be executed and the actual run time will be returned"},{"name":"verbose","isOptional":true,"type":"Boolean","description":"If `true`, the query identifier will be returned and `data` will include the output columns of the query"},{"name":"settings","isOptional":true,"type":"Boolean","description":"If `true`, include information on configuration parameters that affect query planning"},{"name":"buffers","isOptional":true,"type":"Boolean","description":"If `true`, include information on buffer usage"},{"name":"wal","isOptional":true,"type":"Boolean","description":"If `true`, include information on WAL record generation"},{"name":"format","isOptional":true,"type":"String","description":"The format of the output, can be `\"text\"` (default) or `\"json\"`"}],"examples":[{"id":"get-execution-plan","name":"Get the execution plan","code":"```kotlin\nval result = supabase.from(\"characters\").select {\n    explain()\n}\n```\n","data":{"sql":"```sql\ncreate table\n  characters (id int8 primary key, name text);\n\ninsert into\n  characters (id, name)\nvalues\n  (1, 'Luke'),\n  (2, 'Leia'),\n  (3, 'Han');\n```\n"},"response":"```\nAggregate  (cost=33.34..33.36 rows=1 width=112)\n  ->  Limit  (cost=0.00..18.33 rows=1000 width=40)\n        ->  Seq Scan on characters  (cost=0.00..22.00 rows=1200 width=40)\n```\n","description":"By default, the data is returned in TEXT format, but can also be returned as JSON by using the `format` parameter.\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"auth-api","title":"Overview","notes":"- The auth methods can be accessed via the Supabase Auth client.\n","examples":[{"id":"create-auth-client","name":"Create auth client","isSpotlight":true,"code":"```kotlin\nval supabase = createSupabaseClient(supabaseURL = \"https://xyzcompany.supabase.co'\", supabaseKey = \"publishable-or-anon-key\") { ... }\nval auth = supabase.auth\n```\n"}]},{"id":"sign-up","title":"signUp()","$ref":"@supabase/gotrue-js.GoTrueClient.signUp","notes":"Creates a new user.\n- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, the return value is the user and you won't be logged in automatically.\n  - If **Confirm email** is disabled, the return value is null and you will be logged in instead.\n- When the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls) by default. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- To learn how to handle OTP links & OAuth refer to [initializing](/docs/reference/kotlin/initializing)\n- If signUpWith() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n","params":[{"name":"provider","isOptional":false,"type":"Email or Phone","description":"The provider to use for the user's authentication. In this case `Email` or `Phone`."},{"name":"redirectUrl","isOptional":true,"type":"String?","description":"The redirect url to use. If you don't specify this, the platform specific will be used, like deeplinks on android."},{"name":"config","isOptional":true,"type":"Email.Config.() -> Unit or Phone.Config.() -> Unit","description":"The configuration for signing in with `Email` or `Phone`.","subContent":[{"name":"password","isOptional":false,"type":"String","description":"The user's password"},{"name":"email/phone","isOptional":false,"type":"String","description":"The user's email or phone."},{"name":"captchaToken","isOptional":true,"type":"String?","description":"The captcha token when having captcha enabled."},{"name":"data","isOptional":true,"type":"JsonObject?","description":"Extra user data to pass in."}]}],"examples":[{"id":"sign-up-email","name":"Sign up with email","isSpotlight":true,"code":"```kotlin\nval user = supabase.auth.signUpWith(Email) {\n    email = \"example@email.com\"\n    password = \"example-password\"\n}\n```\n"},{"id":"sign-up-phone-whatsapp","name":"Sign up with a phone number and password (whatsapp)","isSpotlight":true,"code":"```kotlin\nval user = supabase.auth.signUpWith(Phone) {\n    phone = \"+4912345679\"\n    password = \"example-password\"\n    channel = Phone.Channel.WHATSAPP\n}\n```\n"},{"id":"sign-up-phone-sms","name":"Sign up with a phone number and password (sms)","isSpotlight":true,"code":"```kotlin\nval user = supabase.auth.signUpWith(Phone) {\n    phone = \"+4912345679\"\n    password = \"example-password\"\n}\n```\n"},{"id":"sign-up-with-additional-user-metadata","name":"Sign up with additional user metadata","isSpotlight":false,"code":"```kotlin\nval user = supabase.auth.signUpWith(Email) {\n    email = \"example@email.com\"\n    password = \"example-password\"\n    data = buildJsonObject {\n       put(\"first_name\", \"John\")\n       put(\"age\", 24)\n    }\n}\n```\n"},{"id":"sign-up-with-redirect","name":"Sign up with a redirect URL","description":"- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n","code":"```kotlin\nval user = supabase.auth.signUpWith(Email, redirectUrl = \"https://example.com\") {\n    email = \"example@email.com\"\n    password = \"example-password\"\n}\n```\n"}]},{"id":"sign-in-anonymously","title":"signInAnonymously()","notes":"- Creates an anonymous user.\n- The user can be retrieved by calling `supabase.auth.currentUserOrNull()`.\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n","params":[{"name":"captchaToken","isOptional":true,"type":"String?","description":"The captcha token when having captcha enabled."},{"name":"data","isOptional":true,"type":"JsonObject? or T","description":"Extra user data to pass in."}],"examples":[{"id":"sign-in-anonymously","name":"Create an anonymous user","isSpotlight":true,"code":"```kotlin\nsupabase.auth.signInAnonymously(captchaToken = \"token\")\n```\n"},{"id":"sign-in-anonymously-with-user-metadata","name":"Create an anonymous user with custom user metadata","isSpotlight":false,"code":"```kotlin\nsupabase.auth.signInAnonymously(data = customUserData)\n```\n"}]},{"id":"sign-in-with-password","title":"signInWith()","$ref":"@supabase/gotrue-js.GoTrueClient.signInWithPassword","notes":"Logs in an existing user.\n- Requires either an email and password or a phone number and password.\n","params":[{"name":"provider","isOptional":false,"type":"Email or Phone","description":"The provider to use for the user's authentication, in this case `Email` or `Phone`."},{"name":"redirectUrl","isOptional":true,"type":"String?","description":"The redirect url to use. If you don't specify this, the platform specific will be used, like deeplinks on android."},{"name":"config","isOptional":true,"type":"Email.Config.() -> Unit or Phone.Config.() -> Unit","description":"The configuration for signing in with `Email` or `Phone`.","subContent":[{"name":"password","isOptional":false,"type":"String","description":"The user's password"},{"name":"email/phone","isOptional":false,"type":"String","description":"The user's email or phone."},{"name":"captchaToken","isOptional":true,"type":"String?","description":"The captcha token when having captcha enabled."}]}],"examples":[{"id":"sign-in-with-email-and-password","name":"Sign in with email and password","isSpotlight":true,"code":"```kotlin\nsupabase.auth.signInWith(Email) {\n    email = \"example@email.com\"\n    password = \"example-password\"\n}\n```\n"},{"id":"sign-in-with-phone-and-password","name":"Sign in with phone and password","isSpotlight":false,"code":"```kotlin\nsupabase.auth.signInWith(Phone) {\n    phone = \"+4912345679\"\n    password = \"example-password\"\n}\n```\n"}]},{"id":"sign-in-with-id-token","title":"signInWithIdToken","params":[{"name":"provider","isOptional":false,"type":"IDToken","description":"The provider to use for the user's authentication. For this method it will be `IDToken`."},{"name":"redirectUrl","isOptional":true,"type":"String?","description":"The redirect url to use. If you don't specify this, the platform specific will be used, like deeplinks on android."},{"name":"config","isOptional":true,"type":"IDToken.Config.() -> Unit","description":"The configuration for signing in with an id token.","subContent":[{"name":"idToken","isOptional":false,"type":"String","description":"OIDC ID token issued by the specified provider. The `iss` claim in the ID token must match the supplied provider. Some ID tokens contain an `at_hash` which require that you provide an `access_token` value to be accepted properly. If the token contains a `nonce` claim you must supply the nonce used to obtain the ID token."},{"name":"provider","isOptional":false,"type":"IDTokenProvider","description":"The provider of the id token. Only `Apple`, `Google`, `Facebook` and `Azure` are supported."},{"name":"accessToken","isOptional":true,"type":"String?","description":"If the ID token contains an `at_hash` claim, then the hash of this value is compared to the value in the ID token."},{"name":"nonce","isOptional":true,"type":"String?","description":"If the ID token contains a `nonce` claim, then the hash of this value is compared to the value in the ID token."},{"name":"captchaToken","isOptional":true,"type":"String?","description":"The captcha token when having captcha enabled."}]}],"examples":[{"id":"sign-in-with-id-token","name":"Sign In using ID Token","code":"```kotlin\nsupabase.auth.signInWith(IDToken) {\n    idToken = \"token\"\n    provider = Google //Also supported: Apple, Azure and Facebook\n    //optional:\n    nonce = \"nonce\"\n    data = buildJsonObject {\n        //...\n    }\n}\n```\n"}]},{"id":"sign-in-with-otp","title":"signInWith(OTP)","$ref":"@supabase/gotrue-js.GoTrueClient.signInWithOtp","notes":"Sends a OTP to the user's email or phone number.\n- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `signInWith(OTP)` will signup the user instead. To restrict this behavior, you can set `createUser` to `false`.\n- The method `signUpWith(OTP)` does the exact same thing as `signInWith(OTP)`, so it doesn't matter which one you use.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- To learn how to handle OTP links & OAuth refer to [initializing](/docs/reference/kotlin/initializing)\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates) to include `{{ .Token }}` instead of `{{ .ConfirmationURL }}`.\n","params":[{"name":"provider","isOptional":false,"type":"OTP","description":"The provider to use for the user's authentication, in this case `OTP`."},{"name":"redirectUrl","isOptional":true,"type":"String?","description":"The redirect url to use. If you don't specify this, the platform specific will be used, like deeplinks on android."},{"name":"config","isOptional":true,"type":"OTP.Config.() -> Unit","description":"The configuration for signing in with `OTP`.","subContent":[{"name":"email/phone","isOptional":false,"type":"String","description":"The user's email or phone."},{"name":"captchaToken","isOptional":true,"type":"String?","description":"The captcha token when having captcha enabled."}]}],"examples":[{"id":"sign-in-with-email","name":"Sign in with email","isSpotlight":true,"description":"The user will be sent an email which contains either a magiclink or a OTP or both. By default, a given user can only request a OTP once every 60 seconds.","code":"```kotlin\nsupabase.auth.signInWith(OTP) {\n    email = \"example@email.com\"\n}\n```\n"},{"id":"sign-in-with-sms-otp","name":"Sign in with SMS OTP","isSpotlight":false,"description":"The user will be sent a SMS which contains a OTP. By default, a given user can only request a OTP once every 60 seconds.","code":"```kotlin\nsupabase.auth.signInWith(OTP) {\n    phone = \"+4912345679\"\n}\n```\n"}]},{"id":"sign-in-with-oauth","title":"signInWith(OAuthProvider)","$ref":"@supabase/gotrue-js.GoTrueClient.signInWithOAuth","notes":"- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](https://supabase.com/docs/guides/auth#providers).\n- To learn how to handle OTP links & OAuth refer to [initializing](/docs/reference/kotlin/initializing)\n","params":[{"name":"provider","isOptional":false,"type":"OAuthProvider","description":"The OAuth provider to use for the user's authentication, for example `Google` or `GitHub`."},{"name":"redirectUrl","isOptional":true,"type":"String?","description":"The redirect url to use. If you don't specify this, the platform specific will be used, like deeplinks on android."},{"name":"config","isOptional":true,"type":"ExternalAuthConfig.() -> Unit","description":"The configuration for signing in with an OAuth provider.","subContent":[{"name":"scopes","isOptional":true,"type":"MutableList<String>","description":"The scopes to request from the OAuth provider."},{"name":"queryParams","isOptional":true,"type":"MutableMap<String, String>","description":"Additional query parameters to use."}]}],"examples":[{"id":"sign-in-using-a-third-party-provider","name":"Sign in using a third-party provider","isSpotlight":true,"code":"```kotlin\nsupabase.auth.signInWith(Github)\n```\n"},{"id":"sign-in-using-a-third-party-provider with scopes","name":"Sign in using a third-party provider with scopes","isSpotlight":true,"code":"```kotlin\nsupabase.auth.signInWith(Github) {\n    scopes.add(\"email\")\n}\n```\n"},{"id":"sign-in-using-a-third-party-provider-with-redirect","name":"Create a custom url","isSpotlight":false,"description":"- When the third-party provider successfully authenticates the user, the provider redirects the user to the URL specified in the `redirectUrl` parameter. This parameter defaults to the [`SITE_URL`](/docs/guides/auth/redirect-urls). It does not redirect the user immediately after invoking this method.\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- getOAuthUrl() provides the URL which needs to be opened in a browser.\n- The redirectTo URL needs to be setup correctly in your project under Authentication -> URL Configuration -> Redirect URLs.\n- To see how you can use a custom in-app browser on Android, check our [demo](https://github.com/supabase-community/supabase-kt/tree/development/demos/android-login) on GitHub.\n","code":"```kotlin\nval url = supabase.auth.getOAuthUrl(Github, redirectUrl = \"https://example.com\")\n```\n"},{"id":"sign-in-with-scopes","name":"Create a custom url with scopes","isSpotlight":false,"description":"If you need additional data from an OAuth provider, you can include a space-separated list of scopes in your request to get back an OAuth provider token.\nYou may also need to specify the scopes in the provider's OAuth app settings, depending on the provider. The list of scopes will be documented by the third-party provider you are using and specifying scopes will enable you to use the OAuth provider token to call additional APIs supported by the third-party provider to get more information.\n","code":"```kotlin\nval url = supabase.auth.getOAuthUrl(Github, redirectUrl = \"https://example.com\") {\n    scopes.add(\"email\")\n}\n```\n"}]},{"id":"sign-in-with-sso","title":"signInWithSSO()","$ref":"@supabase/gotrue-js.GoTrueClient.signInWithSSO","notes":"- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can change the `domain` property in the `signInWith(SSO)` method to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can change the `providerId` property. For example:\n    - Mapping specific user email addresses with an identity provider.\n    - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n- To learn how to handle OTP links & OAuth refer to [initializing](/docs/reference/kotlin/initializing)\n","params":[{"name":"provider","isOptional":false,"type":"SSO","description":"The OAuth provider to use for the user's authentication, in this case `SSO`."},{"name":"redirectUrl","isOptional":true,"type":"String?","description":"The redirect url to use. If you don't specify this, the platform specific will be used, like deeplinks on android."},{"name":"config","isOptional":true,"type":"ExternalAuthConfig.() -> Unit","description":"The configuration for signing in with an OAuth provider.","subContent":[{"name":"providerId/domain","isOptional":false,"type":"String","description":"The providerId or domain."},{"name":"captchaToken","isOptional":true,"type":"String?","description":"The captcha token when having captcha enabled."}]}],"examples":[{"id":"sign-in-with-domain","name":"Sign in with email domain","isSpotlight":true,"code":"```kotlin\n  // You can extract the user's email domain and use it to trigger the\n  // authentication flow with the correct identity provider.\n\n  supabase.auth.signInWith(SSO) {\n      domain = \"company.com\"\n  }\n\n  //the url was opened automatically, if you don't want that, provide a custom redirect url\n```\n"},{"id":"sign-in-with-provider-uuid","name":"Sign in with provider UUID","isSpotlight":true,"code":"```kotlin\n  // Useful when you need to map a user's sign in request according\n  // to different rules that can't use email domains.\n\n  supabase.auth.signInWith(SSO) {\n      providerId = \"21648a9d-8d5a-4555-a9d1-d6375dc14e92\"\n  }\n\n  //the url was opened automatically, if you don't want that, provide a custom redirect url\n```\n"}]},{"id":"sign-out","title":"signOut()","$ref":"@supabase/gotrue-js.GoTrueClient.signOut","notes":"Logs out the current user.\n- In order to use the `signOut()` method, the user needs to be signed in first.\n","params":[{"name":"scope","isOptional":true,"type":"SignOutScope","description":"The scope of the sign-out."}],"examples":[{"id":"sign-out","name":"Sign out","isSpotlight":true,"code":"```kotlin\nsupabase.auth.signOut()\n```\n"},{"id":"sign-out-all-sessions","name":"Sign out all sessions","isSpotlight":true,"code":"```kotlin\nsupabase.auth.signOut(SignOutScope.GLOBAL)\n```\n"},{"id":"sign-out-others","name":"Sign out all sessions except the current","isSpotlight":true,"code":"```kotlin\nsupabase.auth.signOut(SignOutScope.OTHERS)\n```\n"}]},{"id":"verify-otp","title":"Verify OTPs","$ref":"@supabase/gotrue-js.GoTrueClient.verifyOtp","notes":"- Verifying an OTP is done through either `verifyPhoneOtp` or `verifyEmailOtp`.\n- The verification type used should be determined based on the corresponding auth method called before using `verifyPhoneOtp`/`verifyEmailOtp` to sign up / sign-in a user.\n","params":[{"name":"type","isOptional":false,"type":"OtpType.Email or OtpType.Phone","description":"The OTP type. Depending on the type, an email or phone has to be specified as parameter."},{"name":"email/phone","isOptional":false,"type":"String","description":"The email or phone number, depending on which type you specified."},{"name":"token","isOptional":false,"type":"String","description":"The token to verify."},{"name":"captchaToken","isOptional":true,"type":"String?","description":"The captcha token when having captcha enabled."}],"examples":[{"id":"verify-email-otp(otp)","name":"Verify an Email OTP","isSpotlight":true,"code":"```kotlin\nsupabase.auth.verifyEmailOtp(type = OtpType.Email.EMAIL, email = \"example@email.com\", token = \"token\")\n```\n","description":"Available types are:\n  - `OtpType.Email.MAGIC_LINK` (deprecated)\n  - `OtpType.Email.SIGNUP` (deprecated)\n  - `OtpType.Email.INVITE`\n  - `OtpType.Email.RECOVERY`\n  - `OtpType.Email.EMAIL_CHANGE`\n  - `OtpType.Email.EMAIL`\n"},{"id":"verify-phone-otp(otp)","name":"Verify an Phone OTP","isSpotlight":false,"code":"```kotlin\nsupabase.auth.verifyPhoneOtp(type = OtpType.Phone.SMS, phone = \"+491234567\", token = \"token\")\n```\n","description":"Available types are:\n  - `OtpType.Phone.SMS`\n  - `OtpType.Phone.PHONE_CHANGE`\n"}]},{"id":"send-password-reauthentication","title":"reauthenticate()","$ref":"@supabase/gotrue-js.GoTrueClient.reauthenticate","notes":"- This method is used together with `updateUser()` when a user's password needs to be updated.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n","examples":[{"id":"send-reauthentication-nonce","name":"Send reauthentication nonce","description":"Sends a reauthentication nonce to the user's email or phone number.","isSpotlight":true,"code":"```kotlin\nsupabase.auth.reauthenticate()\n```\n"}]},{"id":"resend-email-or-phone-otps","title":"resend()","$ref":"@supabase/gotrue-js.GoTrueClient.resend","notes":"- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `signInWith(OTP)` method again.\n- Password recovery emails can be resent by calling the `resetPasswordForEmail()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n","params":[{"name":"type","isOptional":false,"type":"OtpType.Email or OtpType.Phone","description":"The OTP type. Depending on the type, an email or phone has to be specified as parameter."},{"name":"email/phone","isOptional":false,"type":"String","description":"The email or phone number, depending on which type you specified."},{"name":"captchaToken","isOptional":true,"type":"String?","description":"The captcha token when having captcha enabled."}],"examples":[{"id":"resend-email-signup-confirmation","name":"Resend an email signup confirmation","description":"Resends the email signup confirmation to the user","isSpotlight":true,"code":"```kotlin\nsupabase.auth.resendEmail(OtpType.Email.SIGNUP, \"example@email.com\")\n```\n"},{"id":"resend-phone-signup-confirmation","name":"Resend a phone signup confirmation","description":"Resends the phone signup confirmation email to the user","code":"```kotlin\nsupabase.auth.resendPhone(OtpType.Phone.SMS, \"1234567890\")\n```\n"},{"id":"resend-email-change-email","name":"Resend email change email","description":"Resends the email change email to the user","code":"```kotlin\nsupabase.auth.resendEmail(OtpType.Email.EMAIL_CHANGE, \"example@email.com\")\n```\n"},{"id":"resend-phone-change","name":"Resend phone change OTP","description":"Resends the phone change OTP to the user","code":"```kotlin\nsupabase.auth.resendPhone(OtpType.Phone.PHONE_CHANGE, \"1234567890\")\n```\n"}]},{"id":"get-session","title":"Get current session","$ref":"@supabase/gotrue-js.GoTrueClient.getSession","notes":"Returns the current session, or `null` if there is none.\n","examples":[{"id":"get-the-session-data","name":"Get the session data","isSpotlight":true,"code":"```kotlin\nval session = supabase.auth.currentSessionOrNull()\n```\n"}]},{"id":"get-user","title":"getUser()","$ref":"@supabase/gotrue-js.GoTrueClient.getUser","description":"- This method gets the user object from the current session.\n- Fetches the user object from the database instead of local session.\n- Should be used only when you require the most current user data. For faster results, `getCurrentSessionOrNull()?.user` is recommended.\n","params":[{"name":"jwt","isOptional":false,"type":"String","description":"The JWT token."}],"examples":[{"id":"get-the-logged-in-user-with-the-current-existing-session","name":"Get the logged in user with the current session","isSpotlight":true,"code":"```kotlin\nval user = supabase.auth.retrieveUserForCurrentSession(updateSession = true)\n```\n","description":"`updateSession` updates the local session with the new user\n"},{"id":"get-different-user","name":"Get a user based on their access token","isSpotlight":true,"code":"```kotlin\nval user = supabase.auth.retrieveUser(\"JWT\")\n```\n"}]},{"id":"update-user","title":"updateUser()","$ref":"@supabase/gotrue-js.GoTrueClient.updateUser","notes":"Modifies the user data.\n- In order to use the `updateUser()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email.\nTo only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](https://supabase.com/dashboard/project/_/auth/providers).\n","params":[{"name":"updateCurrentUser","isOptional":true,"type":"Boolean","description":"Whether to update the local session with the new user. Defaults to `true`."},{"name":"redirectUrl","isOptional":true,"type":"String?","description":"The redirect url to use. If you don't specify this, the platform specific will be used, like deeplinks on android."},{"name":"config","isOptional":false,"type":"UserUpdateBuilder.() -> Unit","subContent":[{"name":"email","isOptional":true,"type":"String?","description":"The new email."},{"name":"password","isOptional":true,"type":"String?","description":"The new password."},{"name":"phone","isOptional":true,"type":"String?","description":"The new phone number."},{"name":"nonce","isOptional":true,"type":"String?","description":"The nonce sent for reauthentication if the user's password is to be updated."},{"name":"data","isOptional":true,"type":"JsonObject","description":"The new user data."}]}],"examples":[{"id":"update-the-email-for-an-authenticated-user","name":"Update the email for an authenticated user","description":"Sends a \"Confirm Email Change\" email to the new email address.","isSpotlight":false,"code":"```kotlin\nval user = supabase.auth.updateUser {\n   email = \"newEmail@email.com\"\n}\n```\n"},{"id":"update-the-password-for-an-authenticated-user","name":"Update the password for an authenticated user","isSpotlight":false,"code":"```kotlin\nval user = supabase.auth.updateUser {\n   password = \"secretPassword\"\n}\n```\n"},{"id":"update-the-users-metadata","name":"Update the user's metadata","isSpotlight":true,"code":"```kotlin\nval user = supabase.auth.updateUser {\n   data {\n      put(\"name\", \"John\")\n   }\n}\n```\n"}]},{"id":"get-user-identities","title":"currentIdentitiesOrNull()","$ref":"@supabase/gotrue-js.GoTrueClient.getUserIdentities","notes":"- The user needs to be signed in to call `currentIdentitiesOrNull()`.\n","examples":[{"id":"get-user-identities","name":"Returns a list of identities linked to the user","isSpotlight":true,"code":"```kotlin\n//get the identities from the current user\nval identities = supabase.auth.currentIdentitiesOrNull()\n//Or retrieve them\nval identities = supabase.auth.retrieveUserForCurrentSession().identities\n```\n"}]},{"id":"link-identity","title":"linkIdentity()","$ref":"@supabase/gotrue-js.GoTrueClient.linkIdentity","notes":"- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `linkIdentity()`.\n- If the candidate identity is already linked to the existing user or another user, `linkIdentity()` will fail.\n- This method works similarly to `signInWith()` using an OAuthProvider. To learn how to handle OTP links & OAuth refer to [initializing](/docs/reference/kotlin/initializing)\n","params":[{"name":"provider","isOptional":false,"type":"OAuthProvider","description":"The OAuth provider you want to link the user with."},{"name":"redirectUrl","isOptional":true,"type":"String?","description":"The redirect url to use. If you don't specify this, the platform specific will be used, like deeplinks on android."},{"name":"config","isOptional":true,"type":"ExternalAuthConfigDefaults.() -> Unit","description":"Extra configuration.","subContent":[{"name":"scopes","isOptional":true,"type":"MutableList<String>","description":"The scopes to request from the OAuth provider."},{"name":"queryParams","isOptional":true,"type":"MutableMap<String, String>","description":"Additional query parameters to use."}]}],"examples":[{"id":"link-identity","name":"Link an identity to a user","isSpotlight":true,"code":"```kotlin\nsupabase.auth.linkIdentity(OAuthProvider)\n\n//Example:\nsupabase.auth.linkIdentity(Google)\n```\n"}]},{"id":"unlink-identity","title":"unlinkIdentity()","$ref":"@supabase/gotrue-js.GoTrueClient.unlinkIdentity","notes":"- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlinkIdentity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n","params":[{"name":"identityId","isOptional":false,"type":"String","description":"The id of the OAuth identity"},{"name":"updateLocalUser","isOptional":true,"type":"Boolean","description":"Whether to delete the identity from the local user or not. Defaults to `true`."}],"examples":[{"id":"unlink-identity","name":"Unlink an identity","isSpotlight":true,"code":"```kotlin\n//get all identities linked to a user\nval identities = supabase.auth.currentIdentitiesOrNull() ?: emptyList()\n\n//find the google identity linked to the user\nval googleIdentity = identities.first { it.provider == \"google\" }\n\n//unlink the google identity from the user\nsupabase.auth.unlinkIdentity(googleIdentity.identityId!!)\n```\n"}]},{"id":"set-session","title":"importSession()","$ref":"@supabase/gotrue-js.GoTrueClient.setSession","notes":"Changes the local session.\n- `importSession()` takes in a UserSession.\n- [Refresh token rotation](/docs/reference/auth/config#refresh_token_rotation_enabled) is enabled by default on all projects to guard against replay attacks.\n- You can configure the [`REFRESH_TOKEN_REUSE_INTERVAL`](https://supabase.com/docs/reference/auth/config#refresh_token_reuse_interval) which provides a short window in which the same refresh token can be used multiple times in the event of concurrency or offline issues.\n","params":[{"name":"session","isOptional":false,"type":"UserSession","description":"The session to set."}],"examples":[{"id":"refresh-the-session","name":"Set local session","description":"Sets the local session from refresh_token and returns current session or an error if the refresh_token is invalid.","isSpotlight":true,"code":"```kotlin\nsupabase.auth.importSession(UserSession(accessToken = \"token\", refreshToken = \"refresh\", expiresIn = 2000, tokenType = \"Bearer\", user = null))\n```\n"}]},{"id":"refresh-session","title":"refreshSession()","$ref":"@supabase/gotrue-js.GoTrueClient.refreshSession","notes":"This method will refresh the session whether the current one is expired or not.\n\n- This is done automatically, but can be disabled in the Auth config.\n","params":[{"name":"refreshToken","isOptional":false,"type":"String","description":"The refresh token to use."}],"examples":[{"id":"refresh-current-session","name":"Refresh current session","isSpotlight":true,"code":"```kotlin\nval session = supabase.auth.refreshCurrentSession()\n```\n"},{"id":"refresh-session-using-the-current-session","name":"Refresh session using the refresh token","isSpotlight":true,"code":"```kotlin\nval session = supabase.auth.refreshSession(refreshToken = \"refreshToken\")\n```\n"}]},{"id":"on-auth-state-change","title":"sessionStatus","$ref":"@supabase/gotrue-js.GoTrueClient.onAuthStateChange","notes":"Listen to session changes.\n","examples":[{"id":"listen-to-auth-changes","name":"Listen to auth changes","isSpotlight":true,"code":"```kotlin\nsupabase.auth.sessionStatus.collect {\n    when(it) {\n        is SessionStatus.Authenticated -> {\n            println(\"Received new authenticated session.\")\n            when(it.source) { //Check the source of the session\n                SessionSource.External -> TODO()\n                is SessionSource.Refresh -> TODO()\n                is SessionSource.SignIn -> TODO()\n                is SessionSource.SignUp -> TODO()\n                SessionSource.Storage -> TODO()\n                SessionSource.Unknown -> TODO()\n                is SessionSource.UserChanged -> TODO()\n                is SessionSource.UserIdentitiesChanged -> TODO()\n            }\n        }\n        SessionStatus.LoadingFromStorage -> println(\"Loading from storage\")\n        SessionStatus.NetworkError -> println(\"Network error\")\n        is SessionStatus.NotAuthenticated -> {\n            if(it.isSignOut) {\n                println(\"User signed out\")\n            } else {\n                println(\"User not signed in\")\n            }\n        }\n    }\n}\n```\n","description":"Types of statuses:\n- `NotAuthenticated(isSignOut)`,\n- `LoadingFromStorage`,\n- `NetworkError`,\n- `Authenticated(session, source)`\n"}]},{"id":"reset-password-for-email","title":"Send a password reset request","notes":"Sends a password reset request to the given email address.\n- The password reset flow consist of 2 broad steps: (i) Allow the user to login via the password reset link; (ii) Update the user's password.\n- The `resetPasswordForEmail()` only sends a password reset link to the user's email.\nTo update the user's password, see [`updateUser()`](/docs/reference/kotlin/auth-updateuser).\n- The user gets redirected back to your app, assuming you setup [OTP handling](/docs/reference/kotlin/initializing)\n- After the user has been redirected successfully, prompt them for a new password and call `updateUser()`:\n  ```kotlin\n  supabase.auth.updateUser {\n      password = \"1234567\"\n  }\n  ```\n","params":[{"name":"email","isOptional":false,"type":"String","description":"The email to send the password reset email to."},{"name":"redirectUrl","isOptional":true,"type":"String?","description":"The redirect url to use. If you don't specify this, the platform specific will be used, like deeplinks on android."},{"name":"captchaToken","isOptional":true,"type":"String?","description":"The captcha token when having captcha enabled."}],"examples":[{"id":"send-password-reset-email","name":"Send password reset email","isSpotlight":true,"code":"```kotlin\nsupabase.auth.resetPasswordForEmail(email = \"example@email.com\")\n```\n"}]},{"id":"exchange-code-for-session","title":"exchangeCodeForSession()","$ref":"@supabase/gotrue-js.GoTrueClient.exchangeCodeForSession","notes":"- Used when `flowType` is set to `FlowType.PKCE` in the Auth configuration.\n","params":[{"name":"code","isOptional":false,"type":"String","description":"The code to exchange."},{"name":"saveSession","isOptional":true,"type":"Boolean","description":"Whether to save the session. Defaults to true."}],"examples":[{"id":"exchange-auth-code","name":"Exchange Auth Code","isSpotlight":true,"code":"```kotlin\nsupabase.auth.exchangeCodeForSession(\"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n```\n"}]},{"id":"auth-mfa-api","title":"Overview","notes":"This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n"},{"id":"mfa-enroll","title":"Enroll a factor","$ref":"@supabase/gotrue-js.GoTrueMFAApi.enroll","notes":"Enrolls a new factor.\n- Use `FactorType.TOTP` or `FactorType.Phone` as the factorType and use the returned id to create a challenge.\n- To create a challenge, see [`mfa.createChallenge()`](/docs/reference/kotlin/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verifyChallenge()`](/docs/reference/kotlin/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.createChallengeAndVerify()`](/docs/reference/kotlin/auth-mfa-challengeandverify).\n","params":[{"name":"factorType","isOptional":false,"type":"FactorType<C, R>","description":"The type of MFA factor to enroll. Currently supports `FactorType.TOTP` and `FactorType.Phone`."},{"name":"issuer","isOptional":true,"type":"String?","description":"Domain which the user is enrolling with."},{"name":"config","isOptional":true,"type":"Config.() -> Unit","description":"Factor type specific configuration."}],"examples":[{"id":"enroll-totp-factor","name":"Enroll a time-based, one-time password (TOTP) factor","isSpotlight":true,"code":"```kotlin\nval factor = supabase.auth.mfa.enroll(factorType = FactorType.TOTP, friendlyName = \"Your friendly Name\") {\n      // Optional\n      issuer = \"example.com\"\n}\n\n// Use the id to create a challenge.\n// The challenge can be verified by entering the code generated from the authenticator app.\n// The code will be generated upon scanning the qr_code or entering the secret into the authenticator app.\nval (id, type, qrCode) = factor.data //qrCode is a svg as a string\nval (factorId, factorType, _) = factor\nval challenge = supabase.auth.mfa.createChallenge(factor.id)\n```\n"},{"id":"enroll-phone-factor","name":"Enroll a Phone Factor","isSpotlight":true,"code":"```kotlin\nval factor = supabase.auth.mfa.enroll(factorType = FactorType.Phone, friendlyName = \"Your friendly Name\") {\n      phone = \"+123456789\"\n}\n\n// Use the id to create a challenge and send an SMS with a code to the user.\nval (phone) = factor.data\nval (factorId, factorType, _) = factor\nval challenge = supabase.auth.mfa.createChallenge(factor.id)\n```\n"},{"id":"get-local-verified-factors","name":"Check the local user for verified factors","isSpotlight":true,"code":"```kotlin\nval verifiedFactors = supabase.auth.mfa.verifiedFactors\n```\n"},{"id":"retrieve-verified-factors","name":"Retrieve verified factors","isSpotlight":true,"code":"```kotlin\nval verifiedFactors = supabase.auth.mfa.retrieveFactorsForCurrentUser()\n```\n"}]},{"id":"mfa-challenge","title":"mfa.challenge()","$ref":"@supabase/gotrue-js.GoTrueMFAApi.challenge","notes":"Creates a challenge for a factor.\n- An [enrolled factor](/docs/reference/kotlin/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verifyChallenge()`](/docs/reference/kotlin/auth-mfa-verify).\n- A phone factor sends a code to the user upon challenge. The channel defaults to `Phone.Channel.SMS` unless otherwise specified.\n","params":[{"name":"factorId","isOptional":false,"type":"String","description":"The id of the MFA factor you want to create a challenge for."},{"name":"channel","isOptional":true,"type":"Phone.Channel?","description":"The channel to send the challenge to. Defaults to `Phone.Channel.SMS`."}],"examples":[{"id":"create-mfa-challenge","name":"Create a challenge for a factor","isSpotlight":true,"code":"```kotlin\nval challenge = supabase.auth.mfa.createChallenge(factorId = \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n```\n"}]},{"id":"mfa-verify","title":"mfa.verify()","$ref":"@supabase/gotrue-js.GoTrueMFAApi.verify","notes":"Verifies a challenge for a factor.\n- To verify a challenge, please [create a challenge](/docs/reference/kotlin/auth-mfa-challenge) first.\n","params":[{"name":"factorId","isOptional":false,"type":"String","description":"The id of the MFA factor to verify."},{"name":"challengeId","isOptional":false,"type":"String","description":"The id of the challenge to verify."},{"name":"code","isOptional":false,"type":"String","description":"The code used to verify."},{"name":"saveSession","isOptional":true,"type":"Boolean","description":"Whether to save the session. Defaults to true."}],"examples":[{"id":"verify-challenge","name":"Verify a challenge for a factor","isSpotlight":true,"code":"```kotlin\nsupabase.auth.mfa.verifyChallenge(\n    factorId = \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n    challengeId = \"4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15\",\n    code = \"123456\",\n    saveSession = true // this is set to true by default, but you can set it to false if you want to handle the session yourself\n)\n```\n"}]},{"id":"mfa-challenge-and-verify","title":"mfa.challengeAndVerify()","$ref":"@supabase/gotrue-js.GoTrueMFAApi.challengeAndVerify","notes":"Creates and verifies a challenge for a factor.\n- Creating and verifying a challenge in a single step is not supported by the `Phone` factor type.\n- An [enrolled factor](/docs/reference/kotlin/auth-mfa-enroll) is required before invoking `createChallengeAndVerify()`.\n- Executes [`mfa.createChallenge()`](/docs/reference/kotlin/auth-mfa-challenge) and [`mfa.verifyChallenge()`](/docs/reference/kotlin/auth-mfa-verify) in a single step.\n","params":[{"name":"factorId","isOptional":false,"type":"String","description":"The id of the MFA factor to verify."},{"name":"code","isOptional":false,"type":"String","description":"The code used to verify."},{"name":"saveSession","isOptional":true,"type":"Boolean","description":"Whether to save the session. Defaults to true."}],"examples":[{"id":"challenge-and-verify","name":"Create and verify a challenge for a factor","isSpotlight":true,"code":"```kotlin\nsupabase.auth.mfa.createChallengeAndVerify(\n    factorId = \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n    code = \"123456\",\n    saveSession = true // this is set to true by default, but you can set it to false if you want to handle the session yourself\n)\n```\n"}]},{"id":"mfa-unenroll","title":"mfa.unenroll()","$ref":"@supabase/gotrue-js.GoTrueMFAApi.unenroll","notes":"Unenroll removes a MFA factor. A user has to have an `AAL2` authentication level in order to unenroll a verified factor.\n","params":[{"name":"factorId","isOptional":false,"type":"String","description":"The id of the factor you want to unenroll."}],"examples":[{"id":"unenroll-a-factor","name":"Unenroll a factor","isSpotlight":true,"code":"```kotlin\nsupabase.auth.mfa.unenroll(factorId = \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n```\n"}]},{"id":"mfa-get-authenticator-assurance-level","title":"mfa.getAuthenticatorAssuranceLevel()","$ref":"@supabase/gotrue-js.GoTrueMFAApi.getAuthenticatorAssuranceLevel","notes":"- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `next` field will return `AuthenticatorAssuranceLevel.AAL2`, else, it will return `AuthenticatorAssuranceLevel.AAL1`.\n","examples":[{"id":"get-aal","name":"Get the AAL details of the current session","isSpotlight":true,"code":"```kotlin\nval (current, next) = supabase.auth.mfa.getAuthenticatorAssuranceLevel()\n```\n"},{"id":"aal-enabled","name":"Check whether the user has at least one verified factor","isSpotlight":true,"code":"```kotlin\nval (enabled, _) = supabase.auth.mfa.status\n//flow variant, automatically emitting new values on session changes\nval statusFlow = supabase.auth.mfa.statusFlow\n```\n"},{"id":"aal-enabled-for-current-session","name":"Check whether the user is logged in using AAL2","isSpotlight":true,"code":"```kotlin\nval (_, active) = supabase.auth.mfa.status\n//flow variant, automatically emitting new values on session changes\nval statusFlow = supabase.auth.mfa.statusFlow\n```\n"}]},{"id":"admin-api","title":"Overview","notes":"- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n","examples":[{"id":"create-auth-admin-client","name":"Create server-side auth client","isSpotlight":true,"code":"```kotlin\nval supabase = createSupabaseClient(\n    supabaseUrl = \"https://id.supabase.co\",\n    supabaseKey = \"supabaseKey\"\n) {\n    install(Auth) {\n        minimalSettings() //disables session saving and auto-refreshing\n    }\n    // install other plugins (these will use the service role key)\n}\nsupabase.auth.importAuthToken(\"service_role\")\n\n// Access auth admin api\nval adminAuthClient = supabase.auth.admin\n```\n"}]},{"id":"get-user-by-id","title":"getUserById()","$ref":"@supabase/gotrue-js.GoTrueAdminApi.getUserById","notes":"Fetches the user object from the database based on the user's id.\n- The `retrieveUserById()` method requires the user's id which maps to the `auth.users.id` column.\n","params":[{"name":"uid","isOptional":false,"type":"String","description":"The id of the user you want to retrieve."}],"examples":[{"id":"fetch-the-user-object-using-the-access-token-jwt","name":"Fetch the user object using the access_token jwt","isSpotlight":true,"code":"```kotlin\nval user = supabase.auth.admin.retrieveUserById(uid = \"f2a0b0a0-6b1a-4b7a-8f1a-4b7a6b1a8f1a\")\n```\n"}]},{"id":"list-users","title":"listUsers()","$ref":"@supabase/gotrue-js.GoTrueAdminApi.listUsers","notes":"Retrieves a list of users.\n- Defaults to return 50 users per page.\n","params":[{"name":"page","isOptional":true,"type":"Int","description":"The page number to retrieve."},{"name":"perPage","isOptional":true,"type":"Int","description":"The number of users to retrieve per page."}],"examples":[{"id":"get-a-full-list-of-users","name":"Get a page of users","isSpotlight":true,"code":"```kotlin\nval users = supabase.auth.admin.retrieveUsers()\n```\n"},{"id":"get-paginated-list-of-users","name":"Paginated list of users","isSpotlight":false,"code":"```kotlin\nval users = supabase.auth.admin.retrieveUsers(\n    page = 1,\n    perPage = 100\n)\n```\n"}]},{"id":"create-user","title":"createUser()","$ref":"@supabase/gotrue-js.GoTrueAdminApi.createUser","notes":"Creates a new user.\n- To confirm the user's email address or phone number, set `autoConfirm` to true. Both arguments default to false.\n","params":[{"name":"builder","isOptional":false,"type":"AdminUserBuilder.Email.() -> Unit or AdminUserBuilder.Phone.() -> Unit","description":"The builder to create a new user.","subContent":[{"name":"email/phone","isOptional":true,"type":"String","description":"The new user's email or phone."},{"name":"password","isOptional":false,"type":"String","description":"The user's password."},{"name":"autoConfirm","isOptional":true,"type":"Boolean","description":"Whether to auto-confirm the user's email or phone number."},{"name":"userMetadata","isOptional":true,"type":"JsonObject?","description":"Custom user metadata."},{"name":"appMetadata","isOptional":true,"type":"JsonObject?","description":"Custom app metadata."}]}],"examples":[{"id":"create-a-new-user-with-email-custom-user-metadata","name":"Create user with email","isSpotlight":true,"code":"```kotlin\nval userWithEmail = supabase.auth.admin.createUserWithEmail {\n    email = \"example@email.com\"\n    password = \"secretpassword\"\n    userMetadata {\n        put(\"name\", \"John\")\n    }\n}\n```\n"},{"id":"create-a-new-user-with-phone-custom-user-metadata","name":"Create user with phone","isSpotlight":true,"code":"```kotlin\nval userWithPhone = supabase.auth.admin.createUserWithPhone {\n    phone = \"+49123456789\"\n    password = \"secretpassword\"\n    userMetadata {\n        put(\"name\", \"John\")\n    }\n}\n```\n"},{"id":"auto-confirm-the-users-email","name":"Auto-confirm the user's email","code":"```kotlin\nval userWithEmail = supabase.auth.admin.createUserWithEmail {\n    email = \"example@email.com\"\n    password = \"secretpassword\"\n    autoConfirm = true\n}\n```\n"},{"id":"auto-confirm-the-users-phone-number","name":"Auto-confirm the user's phone number","code":"```kotlin\nval userWithPhone = supabase.auth.admin.createUserWithPhone {\n    phone = \"+49123456789\"\n    password = \"secretpassword\"\n    autoConfirm = true\n}\n```\n"}]},{"id":"delete-user","title":"deleteUser()","$ref":"@supabase/gotrue-js.GoTrueAdminApi.deleteUser","notes":"Deletes a user from the database.\n- The `deleteUser()` method requires the user's ID, which maps to the `auth.users.id` column.\n","params":[{"name":"uid","isOptional":false,"type":"String","description":"The id of the user you want to delete."}],"examples":[{"id":"removes-a-user","name":"Removes a user","isSpotlight":true,"code":"```kotlin\nsupabase.auth.admin.deleteUser(uid = \"uid\")\n```\n"}]},{"id":"invite-user-by-email","title":"inviteUserByEmail()","$ref":"@supabase/gotrue-js.GoTrueAdminApi.inviteUserByEmail","notes":"Sends an invite link to the user's email address.\n","params":[{"name":"email","isOptional":false,"type":"String","description":"The email to send the invite to."},{"name":"redirectTo","isOptional":true,"type":"String","description":"The redirect url to use. If you don't specify this, the platform specific will be used, like deeplinks on android."},{"name":"data","isOptional":true,"type":"JsonObject","description":"Custom data to create the user with."}],"examples":[{"id":"invite-a-user","name":"Invite a user","isSpotlight":true,"code":"```kotlin\nsupabase.auth.admin.inviteUserByEmail(\n    email = \"example@email.com\",\n    //optional:\n    redirectTo = \"https://example.com/redirect\",\n    data = buildJsonObject {\n        put(\"custom\", \"value\")\n    }\n)\n```\n"}]},{"id":"generate-link","title":"generateLink()","$ref":"@supabase/gotrue-js.GoTrueAdminApi.generateLink","notes":"Generates email links and OTPs to be sent via a custom email provider.\n","params":[{"name":"type","isOptional":false,"type":"LinkType<C>","description":"The type of link to generate, e.g. `LinkType.Signup`."},{"name":"redirectTo","isOptional":true,"type":"String","description":"The redirect url to use. If you don't specify this, the platform specific will be used, like deeplinks on android."},{"name":"config","isOptional":true,"type":"C.() -> Unit","description":"The builder to create a new link."}],"examples":[{"id":"generate-a-signup-link","name":"Generate a signup link","isSpotlight":true,"code":"```kotlin\nval (url, user) = supabase.auth.admin.generateLinkFor(LinkType.Signup) {\n    email = \"example@email.com\"\n    password = \"secretpassword\"\n}\n```\n"},{"id":"generate-an-invite-link","name":"Generate an invite link","isSpotlight":false,"code":"```kotlin\nval (url, user) = supabase.auth.admin.generateLinkFor(LinkType.Invite) {\n    email = \"example@email.com\"\n}\n```\n"},{"id":"generate-a-magic-link","name":"Generate a magic link","isSpotlight":false,"code":"```kotlin\nval (url, user) = supabase.auth.admin.generateLinkFor(LinkType.MagicLink) {\n    email = \"example@email.com\"\n}\n```\n"},{"id":"generate-a-recovery-link","name":"Generate a recovery link","isSpotlight":false,"code":"```kotlin\nval (url, user) = supabase.auth.admin.generateLinkFor(LinkType.Recovery) {\n    email = \"example@email.com\"\n}\n```\n"},{"id":"generate-links-to-change-current-email-address","name":"Generate links to change current email address","isSpotlight":false,"code":"```kotlin\n// generate an email change link to be sent to the current email address\nval (url, user) = supabase.auth.admin.generateLinkFor(LinkType.EmailChangeCurrent) {\n    email = \"example@email.com\"\n    newEmail = \"newEmail@email.com\"\n}\n\n// generate an email change link to be sent to the new email address\nval (url, user) = supabase.auth.admin.generateLinkFor(LinkType.EmailChangeNew) {\n    email = \"example@email.com\"\n    newEmail = \"newEmail@email.com\"\n}\n```\n"}]},{"id":"update-user-by-id","title":"updateUserById()","$ref":"@supabase/gotrue-js.GoTrueAdminApi.updateUserById","notes":"Updates the user data.\n","params":[{"name":"uid","isOptional":false,"type":"String","description":"The id of the user you want to update."},{"name":"builder","isOptional":false,"type":"AdminUserUpdateBuilder.() -> Unit","description":"The builder to update the user.","subContent":[{"name":"email","isOptional":true,"type":"String","description":"The new email."},{"name":"phone","isOptional":true,"type":"String","description":"The new phone number."},{"name":"password","isOptional":true,"type":"String","description":"The new password."},{"name":"userMetadata","isOptional":true,"type":"JsonObject?","description":"Custom user metadata."},{"name":"appMetadata","isOptional":true,"type":"JsonObject?","description":"Custom app metadata."},{"name":"emailConfirm","isOptional":true,"type":"Boolean","description":"Whether to confirm the user's email."},{"name":"phoneConfirm","isOptional":true,"type":"Boolean","description":"Whether to confirm the user's phone number."},{"name":"banDuration","isOptional":true,"type":"String","description":"The format for the ban duration follows a strict sequence of decimal numbers with a unit suffix. Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\"."},{"name":"role","isOptional":true,"type":"String","description":"The `role` claim set in the user's access token JWT. When a user signs up, this role is set to `authenticated` by default. You should only modify the `role` if you need to provision several levels of admin access that have different permissions on individual columns in your database."}]}],"examples":[{"id":"updates-a-users-email","name":"Updates a user's email","isSpotlight":false,"code":"```kotlin\nsupabase.auth.admin.updateUserById(uid = \"id\") {\n    email = \"example@email.com\"\n}\n```\n"},{"id":"updates-a-users-password","name":"Updates a user's password","isSpotlight":false,"code":"```js\nsupabase.auth.admin.updateUserById(uid = \"id\") {\n    password = \"password\"\n}\n```\n"},{"id":"updates-a-users-metadata","name":"Updates a user's metadata","isSpotlight":true,"code":"```kotlin\nsupabase.auth.admin.updateUserById(uid = \"id\") {\n    userMetadata = buildJsonObject {\n        put(\"key\", \"value\")\n    }\n}\n```\n"},{"id":"updates-a-users-app-metadata","name":"Updates a user's app_metadata","isSpotlight":false,"code":"```kotlin\nsupabase.auth.admin.updateUserById(uid = \"id\") {\n    appMetadata = buildJsonObject {\n        put(\"key\", \"value\")\n    }\n}\n```\n"},{"id":"confirms-a-users-email-address","name":"Confirms a user's email address","isSpotlight":false,"code":"```kotlin\nsupabase.auth.admin.updateUserById(uid = \"id\") {\n    emailConfirm = true\n}\n```\n"},{"id":"confirms-a-users-phone-number","name":"Confirms a user's phone number","isSpotlight":false,"code":"```kotlin\nsupabase.auth.admin.updateUserById(uid = \"id\") {\n    phoneConfirm = true\n}\n```\n"}]},{"id":"mfa-list-factors","title":"mfa.listFactors()","notes":"Lists all factors associated to a user.\n","params":[{"name":"uid","isOptional":false,"type":"String","description":"The id of the user you want to list factors for."}],"examples":[{"id":"list-factors","name":"List all factors for a user","isSpotlight":true,"code":"```kotlin\nconst factors = supabase.auth.admin.retrieveFactors(uid = \"id\")\n```\n"}]},{"id":"mfa-delete-factor","title":"mfa.deleteFactor()","notes":"Deletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified.\n","params":[{"name":"uid","isOptional":false,"type":"String","description":"The id of the user you want to delete a factor for."},{"name":"factorId","isOptional":false,"type":"String","description":"The id of the factor you want to delete."}],"examples":[{"id":"delete-factor","name":"Delete a factor for a user","isSpotlight":true,"code":"```kotlin\nsupabase.auth.admin.deleteFactor(uid = \"id\", factorId = \"factor_id\")\n```\n"}]},{"id":"invoke","title":"invoke()","description":"Invokes a Supabase Function. See the [guide](/docs/guides/functions) for details on writing Functions.\n- When invoking a function with parameters, you have to provide a [serializable value](/docs/reference/kotlin/installing#serialization) in the function parameter.\n","notes":"- Requires an Authorization header.\n","params":[{"name":"function","isOptional":false,"type":"String","description":"The name of the function to invoke."},{"name":"body","isOptional":true,"type":"T","description":"The body to send with the request. T can be any serializable type."},{"name":"region","isOptional":true,"type":"FunctionRegion","description":"The region where the function is invoked. Defaults to `Functions.Config#defaultRegion`."},{"name":"headers","isOptional":true,"type":"Headers","description":"The headers to send with the request."}],"examples":[{"id":"basic-invocation","name":"Basic invocation","isSpotlight":true,"code":"```kotlin\nval response = supabase.functions.invoke(\"function_name\")\n\n// Decode the response body to a serializable class\nval data = response.body<FunctionResponse>()\n```\n"},{"id":"basic-invocation-with-body","name":"Basic invocation with body","isSpotlight":true,"code":"```kotlin\nsupabase.functions.invoke(\n  function = \"function_name\",\n  body = buildJsonObject {\n      put(\"foo\", \"bar\")\n  },\n  headers = Headers.build {\n      append(HttpHeaders.ContentType, \"application/json\")\n  }\n)\n```\n","description":"The return type of the invoking methods is an `HttpResponse`. You can access the response body via `response.body<T>()`, where `T` can be any serializable type.\n"},{"id":"reuse-function","name":"Reuse function by saving it to a variable","isSpotlight":true,"code":"```kotlin\nval function = supabase.functions.buildEdgeFunction(\n  function = \"function\",\n  headers = Headers.build {\n      /*Default headers*/\n      //when you are sending a body you may want to add this header:\n      append(HttpHeaders.ContentType, \"application/json\")\n    }\n  )\n//invoke it:\nfunction()\n//invoke it with a body:\nfunction(body)\n//invoke it with custom request options:\nfunction(body) {\n    header(\"Header\", \"Value\")\n    parameter(\"Key\", \"Value\") //url parameter\n}\n```\n"}]},{"id":"stream","title":"stream()","description":"Return real-time data from your table as a [Flow](https://kotlinlang.org/docs/flow.html).\n- Realtime is disabled by default for new tables. You can turn it on by [managing replication](/docs/guides/realtime/postgres-changes#replication-setup).\n- `selectAsFlow` and `selectSingleValueAsFlow` will emit the initial data and then listen for changes.\n- Takes in a `filter` parameter to filter the data and a `primaryKey` parameter to cache the data by the primary key.\n- This method requires both the `Realtime` and `Postgrest` plugins to be installed.\n- The type parameter `T` must be a [serializable class](/docs/reference/kotlin/installing#serialization).\n- If you want more control over the realtime updates, you can use the `Realtime` plugin directly.\n","params":[{"name":"primaryKey","isOptional":false,"type":"KProperty1<Data, Value> or PrimaryKey<Data>","description":"The primary key to cache the data by. Can be a property reference or a custom primary key."},{"name":"channelName","isOptional":true,"type":"String","description":"The name of the channel to use for the realtime updates. If null, a channel name following the format \"schema:table:id\" will be used"},{"name":"filter","isOptional":true,"type":"PostgrestFilterBuilder.() -> Unit or FilterOperation","description":"The filter to apply to the data."}],"examples":[{"id":"select-as-flow","name":"Listen for changes in multiple rows","isSpotlight":true,"code":"```kotlin\nval flow: Flow<List<Country>> = supabase.from(\"countries\").selectAsFlow(Country::id)\nflow.collect {\n    for (country in it) {\n        println(country.name)\n    }\n}\n```\n"},{"id":"select-as-flow-filter","name":"Listen for changes in multiple rows with a filter","isSpotlight":true,"code":"```kotlin\nval flow: Flow<List<Country>> = supabase.from(\"countries\").selectAsFlow(\n    Country::id,\n    filter = FilterOperation(\"name\", FilterOperator.ILIKE, \"a%\")\n)\nflow.collect {\n    for (country in it) {\n        println(country.name)\n    }\n}\n```\n"},{"id":"select-single-value-as-flow","name":"Listen for changes in a single row","isSpotlight":true,"code":"```kotlin\nval flow: Flow<Country> = supabase.from(\"countries\").selectSingleValueAsFlow(Country::id) {\n    //You can use the same filter methods as in the `select` method, but the result is limited to a single row\n    Country::id eq 1\n    //or\n    eq(\"id\", 1)\n}\nflow.collect {\n    println(\"My country is $it\")\n}\n```\n","description":"The flow will end if the row is deleted.\n"}]},{"id":"subscribe","description":"Subscribe to realtime changes in your database.\n","title":"on().subscribe()","notes":"- Realtime is disabled by default for new Projects for better database performance and security. You can turn it on by [managing replication](/docs/guides/database/api#managing-realtime).\n- If you want to receive the \"previous\" data for updates and deletes, you will need to set `REPLICA IDENTITY` to `FULL`, like this: `ALTER TABLE your_table REPLICA IDENTITY FULL;`\n- When using a method with a generic type like `track`, `broadcast` or `broadcastFlow`, you have to provide a [serializable class](/docs/reference/kotlin/installing#serialization) as the type parameter.\n- Presence, Broadcast and Database updates are sent through a [Flow](https://kotlinlang.org/docs/flow.html)\n","examples":[{"id":"liste-to-broadcasts","name":"Listen to broadcasts","code":"```kotlin\n@Serializable\ndata class Message(val content: String, val sender: String)\n\nval channel = supabase.channel(\"channelId\") {\n    // optional config\n}\n\nval broadcastFlow = channel.broadcastFlow<Message>(event = \"message\")\n\n// Collect the flow\nbroadcastFlow.onEach { // it: Message\n    println(it)\n}.launchIn(coroutineScope) // launch a new coroutine to collect the flow\n\nchannel.subscribe(blockUntilSubscribed = true)\n\nchannel.broadcast(event = \"message\", Message(\"I joined!\", \"John\"))\n```\n"},{"id":"listen-to-presence-updates","name":"Listen to presence updates","code":"```kotlin\n@Serializable\ndata class PresenceState(val username: String)\n\nval channel = supabase.channel(\"channelId\") {\n    //optional config\n}\n\n//if you want more control and want to receive the raw data, use the `presenceChangeFlow` method\nval presenceFlow = channel.presenceDataFlow<PresenceState>()\n\n//Collect the flow\npresenceFlow.onEach {\n    for (presence in it) {\n        println(presence.username)\n    }\n}.launchIn(coroutineScope) // launch a new coroutine to collect the flow\n\nchannel.subscribe(blockUntilSubscribed = true)\n//send your own state\nchannel.track(PresenceState(username = \"John\"))\n","description":"You have two methods you can use to listen for presence updates:\n- `presenceDataFlow` takes care of caching presences based on their id and automatically emits the updated list.\n- `presenceChangeFlow` emits the raw data received by realtime. Can be used if more control is required.\n"},{"id":"listen-to-all-database-changes","name":"Listen to all database changes","code":"```kotlin\nval channel = supabase.channel(\"channelId\") {\n    //optional config\n}\nval changeFlow = channel.postgresChangeFlow<PostgresAction>(schema = \"public\")\n\n//Collect the flow\nchangeFlow.onEach {\n    when(it) {\n        is PostgresAction.Delete -> println(\"Deleted: ${it.oldRecord}\")\n        is PostgresAction.Insert -> println(\"Inserted: ${it.record}\")\n        is PostgresAction.Select -> println(\"Selected: ${it.record}\")\n        is PostgresAction.Update -> println(\"Updated: ${it.oldRecord} with ${it.record}\")\n    }\n}.launchIn(coroutineScope) // launch a new coroutine to collect the flow\n\nchannel.subscribe()\n```\n"},{"id":"listen-to-a-specific-table","name":"Listen to a specific table","code":"```kotlin\nval channel = supabase.channel(\"channelId\") {\n    //optional config\n}\n\n//This flow will automatically emit the initial data of all messages (which can be restricted by specifying a filter) and then listens for updates.\n//The data is cached automatically by the primary key you specify\nval users: Flow<List<User>> = channel.postgresListDataFlow(schema = \"public\", table = \"users\", primaryKey = User::id)\n\n//If you want more control and want to receive the raw data use the `postgresChangeFlow` method:\nval changeFlow = channel.postgresChangeFlow<PostgresAction>(schema = \"public\") {\n    table = \"users\"\n}\n\n//Collect the flow\nchangeFlow.onEach {\n    when(it) {\n        is PostgresAction.Delete -> println(\"Deleted: ${it.oldRecord}\")\n        is PostgresAction.Insert -> println(\"Inserted: ${it.record}\")\n        is PostgresAction.Select -> println(\"Selected: ${it.record}\")\n        is PostgresAction.Update -> println(\"Updated: ${it.oldRecord} with ${it.record}\")\n    }\n}.launchIn(coroutineScope) // launch a new coroutine to collect the flow\n\nchannel.subscribe()\n```\n","description":"You have two methods you can use if you want to listen for database updates on a specific table:\n- `postgresListDataFlow` fetches the initial data of all database entries matching your filter (or all entries if you didn't specify one) and then caches the data based on their primary key. Inserts, Updates and Deletes are handled automatically and you will get the updated list through the flow.\n- `postgresChangeFlow` emits the raw data received by realtime. Events can be filtered by specifying a `PostgresAction` type parameter (see examples), or all by specifying only `PostgresAction`. Can be used if more control is required.\n"},{"id":"listen-to-inserts","name":"Listen to inserts","code":"```kotlin\nval channel = supabase.channel(\"channelId\") {\n    //optional config\n}\nval changeFlow = channel.postgresChangeFlow<PostgresAction.Insert>(schema = \"public\") {\n    table = \"users\"\n}\n\n//Collect the flow\nchangeFlow.onEach {\n    println(it.record)\n}.launchIn(coroutineScope) // launch a new coroutine to collect the flow\n\nchannel.subscribe()\n```\n"},{"id":"listen-to-updates","name":"Listen to updates","description":"By default, Supabase will send only the updated record. If you want to receive the previous values as well you can\nenable full replication for the table you are listening too:\n\n```sql\nalter table \"your_table\" replica identity full;\n```\n","code":"```kotlin\nval channel = supabase.channel(\"channelId\") {\n    //optional config\n}\n\nval changeFlow = channel.postgresChangeFlow<PostgresAction.Update>(schema = \"public\") {\n    table = \"users\"\n}\n\n//Collect the flow\nchangeFlow.onEach {\n    println(it.record)\n    println(it.oldRecord)\n}.launchIn(coroutineScope) // launch a new coroutine to collect the flow\n\nchannel.subscribe()\n```\n"},{"id":"listen-to-deletes","name":"Listen to deletes","description":"By default, Supabase does not send deleted records. If you want to receive the deleted record you can\nenable full replication for the table you are listening too:\n\n```sql\nalter table \"your_table\" replica identity full;\n```\n","code":"```kotlin\nval channel = supabase.channel(\"channelId\") {\n    //optional config\n}\n\nval changeFlow = channel.postgresChangeFlow<PostgresAction.Delete>(schema = \"public\") {\n    table = \"users\"\n}\n\n//Collect the flow\nchangeFlow.onEach {\n    println(it.oldRecord)\n}.launchIn(coroutineScope) // launch a new coroutine to collect the flow\n\nchannel.subscribe()\n```\n"},{"id":"listening-to-row-level-changes","name":"Listen to row level changes","code":"```kotlin\nval channel = supabase.channel(\"channelId\") {\n   //optional config\n}\n\n//This flow will automatically emit the user's initial data and then emits new values on update. The flow ends on deletion\nval user: Flow<User> = channel.postgresSingleDataFlow(schema = \"public\", table = \"users\", primaryKey = User::id) {\n    //This is the same filter as used in postgrest, so you could use complex queries, but only one entry is fetched\n    eq(\"id\", 1)\n}\n\n//If you want more control, use the `postgresChangeFlow` method which works the same as the other examples\nval changeFlow = channel.postgresChangeFlow<PostgresAction.Delete>(schema = \"public\") {\n    table = \"users\"\n    filter(\"id\", FilterOperator.EQ, 1)\n}\n\n//Collect the flow\nchangeFlow.onEach {\n    println(it.oldRecord)\n}.launchIn(coroutineScope) // launch a new coroutine to collect the flow\n\nchannel.subscribe()\n```\n","description":"You have two methods you can use if you want to listen for updates on a specific database row:\n- `postgresSingleDataFlow` fetches the initial data matching the filter and then emits updates based on realtime events.\n- `postgresChangeFlow` emits the raw data received by realtime. To filter the realtime queries, use the `filter` method.\n"}]},{"id":"remove-channel","description":"Unsubscribes and removes Realtime channel from Realtime client.\n","title":"removeChannel()","notes":"- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes.\n- Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n- If you removed all channels, the client automatically disconnects from the Realtime websocket. This can be disabled in the Realtime config by setting `disconnectOnNoSubscriptions` to false.\n","examples":[{"id":"removes-a-channel","name":"Remove a channel","isSpotlight":true,"code":"```kotlin\nval channel = supabase.channel(\"channelId\") {\n    //optional config\n}\n//...\nsupabase.realtime.removeChannel(channel)\n```\n"},{"id":"unsubscribe-channel","name":"Unsubscribe from a channel","isSpotlight":true,"code":"```kotlin\nval channel = supabase.channel(\"channelId\") {\n    //optional config\n}\n//...\nchannel.unsubscribe()\n```\n"}]},{"id":"remove-all-channels","title":"removeAllChannels()","$ref":"@supabase/supabase-js.index.SupabaseClient.removeAllChannels","notes":"Unsubscribes and removes all Realtime channels from Realtime client.\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n- If you removed all channels, the client automatically disconnects from the Realtime websocket. This can be disabled in the Realtime config by setting `disconnectOnNoSubscriptions` to false.\n","examples":[{"id":"remove-all-channels","name":"Remove all channels","isSpotlight":true,"code":"```kotlin\nsupabase.realtime.removeAllChannels()\n```\n"}]},{"id":"get-channels","title":"getChannels()","$ref":"@supabase/supabase-js.index.SupabaseClient.getChannels","notes":"Returns all Realtime channels.\n","examples":[{"id":"get-all-channels","name":"Get all channels","isSpotlight":true,"code":"```kotlin\nval channels = supabase.realtime.subscriptions.entries\n```\n"}]},{"id":"list-buckets","title":"listBuckets()","$ref":"@supabase/storage-js.packages/StorageBucketApi.default.listBuckets","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"list-buckets","name":"List buckets","isSpotlight":true,"code":"```kotlin\nval buckets = supabase.storage.retrieveBuckets()\n```\n"}]},{"id":"get-bucket","title":"getBucket()","$ref":"@supabase/storage-js.packages/StorageBucketApi.default.getBucket","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"get-bucket","name":"Get bucket","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage.retrieveBucketById(bucketId = \"avatars\")\n```\n"}]},{"id":"create-bucket","title":"createBucket()","$ref":"@supabase/storage-js.packages/StorageBucketApi.default.createBucket","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"id","isOptional":false,"type":"String","description":"The id of the bucket you want to create."},{"name":"builder","isOptional":true,"type":"BucketBuilder.() -> Unit","description":"The builder to create a new bucket.","subContent":[{"name":"public","isOptional":true,"type":"Boolean","description":"Whether the bucket is public or not."},{"name":"fileSizeLimit","isOptional":true,"type":"FileSizeLimit","description":"The maximum file size."}]}],"examples":[{"id":"create-bucket","name":"Create bucket","isSpotlight":true,"code":"```kotlin\nsupabase.storage.createBucket(id = \"icons\") {\n    public = true\n    fileSizeLimit = 5.megabytes\n}\n```\n"}]},{"id":"update-bucket","title":"updateBucket()","$ref":"@supabase/storage-js.packages/StorageBucketApi.default.updateBucket","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `update`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"id","isOptional":false,"type":"String","description":"The id of the bucket you want to create."},{"name":"builder","isOptional":true,"type":"BucketBuilder.() -> Unit","description":"The builder to create a new bucket.","subContent":[{"name":"public","isOptional":true,"type":"Boolean","description":"Whether the bucket is public or not."},{"name":"fileSizeLimit","isOptional":true,"type":"FileSizeLimit","description":"The maximum file size."}]}],"examples":[{"id":"update-bucket","name":"Update bucket","isSpotlight":true,"code":"```kotlin\nsupabase.storage.updateBucket(\"cards\") {\n    public = false\n    fileSizeLimit = 20.megabytes\n    allowedMimeTypes(ContentType.Image.PNG, ContentType.Image.JPEG)\n}\n```\n"}]},{"id":"empty-bucket","title":"emptyBucket()","$ref":"@supabase/storage-js.packages/StorageBucketApi.default.emptyBucket","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"bucketId","isOptional":false,"type":"String","description":"The id of the bucket you want to empty."}],"examples":[{"id":"empty-bucket","name":"Empty bucket","isSpotlight":true,"code":"```kotlin\nsupabase.storage.emptyBucket(bucketId = \"icons\")\n```\n"}]},{"id":"delete-bucket","title":"deleteBucket()","$ref":"@supabase/storage-js.packages/StorageBucketApi.default.deleteBucket","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"bucketId","isOptional":false,"type":"String","description":"The id of the bucket you want to delete."}],"examples":[{"id":"delete-bucket","name":"Delete bucket","isSpotlight":true,"code":"```kotlin\nsupabase.storage.deleteBucket(bucketId = \"icons\")\n```\n"}]},{"id":"from-upload","title":"from.upload()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.upload","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n- Resumable uploads use a `Disk` cache by default to store the upload urls. You can customize that in the Auth config by changing the `resumable.cache` property.\n","params":[{"name":"path","isOptional":false,"type":"String","description":"The path of the file you want to upload."},{"name":"data","isOptional":false,"type":"ByteArray","description":"The data of the file you want to upload."},{"name":"upsert","isOptional":true,"type":"Boolean","description":"Whether to overwrite the file if it already exists."}],"examples":[{"id":"upload-file","name":"Upload file","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage.from(\"avatars\")\nbucket.upload(\"myIcon.png\", byteArray, upsert = false)\n//on JVM you can use java.io.File\nbucket.upload(\"myIcon.png\", file, upsert = false)\n```\n"},{"id":"upload-file-with-progress","name":"Upload file with progress","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage.from(\"avatars\")\nbucket.uploadAsFlow(\"test.png\", byteArrayOf()).collect {\n    when(it) {\n        is UploadStatus.Progress -> println(\"Progress: ${it.totalBytesSend.toFloat() / it.contentLength * 100}%\")\n        is UploadStatus.Success -> println(\"Success\")\n    }\n}\n```\n"},{"id":"create-resumable-upload","name":"Create resumable upload","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage.from(\"avatars\")\n//JVM/Android:\nval upload = bucket.resumable.createOrContinueUpload(\"icon.png\", File(\"icon.png\"))\n//Other platforms:\nval upload = bucket.resumable.createOrContinueUpload(data = byteArray, source = \"this is for continuing previous uploads later\", path = \"icon.png\")\nval upload = bucket.resumable.createOrContinueUpload( //Probably better to write an extension function\n    channel = { offset -> /* create ByteReadChannel and seek to offset */ },\n    source = \"this is for continuing previous uploads later\",\n    size = dataSize,\n    path = \"icon.png\"\n)\n```\n"},{"id":"start-resumable-upload","name":"Start and resumable upload","isSpotlight":true,"code":"```kotlin\nupload.startOrResumeUploading()\n```\n"},{"id":"pause-resumable-upload","name":"Pause resumable upload","code":"```kotlin\nupload.pause()\n```\n"},{"id":"cancel-resumable-upload","name":"Cancel resumable upload","code":"```kotlin\nupload.cancel()\n```\n","description":"This will also remove the upload url from the cache\n"},{"id":"listen-to-upload-state","name":"Listen to the resumable upload state","code":"```kotlin\nupload.stateFlow.collect {\n    println(\"Progress: ${it.progress * 100}%\")\n    println(\"Paused: ${it.paused}\")\n    println(\"Is done: ${it.isDone}\")\n}\n```\n"},{"id":"continue-previous-upload","name":"Continue previous uploads","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage.from(\"avatars\")\n\n//only on JVM/Android:\nbucket.resumable.continuePreviousFileUploads()\n    .map { it.await() } //await all uploads. This just makes sure the uploads have an update-to-date url. You can also do this in parallel\n    .forEach { upload ->\n        upload.startOrResumeUploading()\n    }\n\n//on other platforms you may have to continue uploads from the source (Probably better to write an extension function):\nbucket.resumable.continuePreviousUploads { source, offset ->\n    //create ByteReadChannel from source and seek to offset\n}\n    .map { it.await() } //await all uploads. This just makes sure the uploads have an update-to-date url. You can also do this in parallel\n    .forEach { upload ->\n        upload.startOrResumeUploading()\n    }\n```\n"}]},{"id":"from-update","title":"from.update()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.update","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"path","isOptional":false,"type":"String","description":"The path of the file you want to upload."},{"name":"data","isOptional":false,"type":"ByteArray","description":"The data of the file you want to upload."},{"name":"upsert","isOptional":true,"type":"Boolean","description":"Whether to overwrite the file if it already exists."}],"examples":[{"id":"update-file","name":"Update file","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage.from(\"avatars\")\nbucket.update(\"myIcon.png\", byteArray, upsert = false)\n//on JVM you can use java.io.File\nbucket.update(\"myIcon.png\", file, upsert = false)\n```\n"}]},{"id":"from-move","title":"from.move()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.move","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"from","isOptional":false,"type":"String","description":"The path of the file you want to move."},{"name":"to","isOptional":false,"type":"String","description":"The new path of the file."},{"name":"destinationBucket","isOptional":true,"type":"String","description":"The destination bucket of the file."}],"examples":[{"id":"move-file","name":"Move file","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage.from(\"avatars\")\nbucket.move(\"icon1.png\", \"icon2.png\")\n```\n"}]},{"id":"from-copy","title":"from.copy()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.copy","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"from","isOptional":false,"type":"String","description":"The path of the file you want to copy."},{"name":"to","isOptional":false,"type":"String","description":"The new path of the file."},{"name":"destinationBucket","isOptional":true,"type":"String","description":"The destination bucket of the file."}],"examples":[{"id":"copy-file","name":"Copy file","isSpotlight":true,"code":"```kotlin\nsupabase.storage.from(\"test\").copy(from = \"avatar.png\", to = \"avatar2.png\")\n```\n"}]},{"id":"from-create-signed-url","title":"from.createSignedUrl()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.createSignedUrl","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"path","isOptional":false,"type":"String","description":"The path of the file you want to create a signed url for."},{"name":"expiresIn","isOptional":false,"type":"Duration","description":"The duration the signed url should be valid for."},{"name":"builder","isOptional":true,"type":"ImageTransformation.() -> Unit","description":"The transformation to apply to the image.","subContent":[{"name":"width","isOptional":true,"type":"Int","description":"The width of the image."},{"name":"height","isOptional":true,"type":"Int","description":"The height of the image."},{"name":"resize","isOptional":true,"type":"Resize","description":"The resize mode of the image."},{"name":"quality","isOptional":true,"type":"Int","description":"The quality of the image. (Percentage 1-100, defaults to 80)"},{"name":"format","isOptional":true,"type":"String","description":"Specify in which format you want the image to receive. (Defaults to 'origin', which means the original format)"}]}],"examples":[{"id":"create-signed-url","name":"Create Signed URL","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage.from(\"avatars\")\nval url = bucket.createSignedUrl(path = \"icon.png\", expiresIn = 3.minutes)\n```\n"},{"id":"create-signed-url-with-transformation","name":"Create Signed URL with transformation","code":"```kotlin\nval bucket = supabase.storage.from(\"avatars\")\nval url = bucket.createSignedUrl(path = \"icon.png\", expiresIn = 3.minutes) {\n    size(100, 100)\n    fill()\n    quality = 80\n}\n```\n"}]},{"id":"from-create-signed-urls","title":"from.createSignedUrls()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"expiresIn","isOptional":false,"type":"Duration","description":"The duration the signed url should be valid for."},{"name":"paths","isOptional":false,"type":"vararg String","description":"The paths of the files you want to create signed urls for."}],"examples":[{"id":"create-signed-urls","name":"Create Signed URLs","isSpotlight":true,"code":"```kotlin\nval urls = supabase.storage.from(\"avatars\").createSignedUrls(20.minutes, \"avata1.jpg\", \"avatar2.jpg\")\n```\n"}]},{"id":"from-create-signed-upload-url","title":"from.createSignedUploadUrl()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.createSignedUploadUrl","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"path","isOptional":false,"type":"String","description":"The path of the file you want to upload."}],"examples":[{"id":"create-signed-upload-url","name":"Create Signed Upload URL","isSpotlight":true,"code":"```kotlin\nval url = supabase.storage.from(\"avatars\").createSignedUploadUrl(\"avatar.png\")\n```\n"}]},{"id":"from-upload-to-signed-url","title":"from.uploadToSignedUrl()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.uploadToSignedUrl","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"path","isOptional":false,"type":"String","description":"The path of the file you want to upload."},{"name":"token","isOptional":false,"type":"String","description":"The token you received from `createSignedUploadUrl`."},{"name":"data","isOptional":true,"type":"ByteArray","description":"The data of the file you want to upload."}],"examples":[{"id":"upload-to-signed-url","name":"Upload to a signed URL","isSpotlight":true,"code":"```kotlin\nsupabase.storage.from(\"avatars\").uploadToSignedUrl(path = \"avatar.jpg\", token = \"token-from-createSignedUploadUrl\", data = bytes)\n//or on JVM:\nsupabase.storage.from(\"avatars\").uploadToSignedUrl(path = \"avatar.jpg\", token = \"token-from-createSignedUploadUrl\", file = File(\"avatar.jpg\"))\n```\n"}]},{"id":"from-get-public-url","title":"from.getPublicUrl()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.getPublicUrl","notes":"- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/kotlin/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"path","isOptional":false,"type":"String","description":"The path of the file you want to get the public url for."}],"examples":[{"id":"returns-the-url-for-an-asset-in-a-public-bucket","name":"Returns the URL for an asset in a public bucket","isSpotlight":true,"code":"```kotlin\nval url = supabase.storage.from(\"public-bucket\").publicUrl(\"folder/avatar1.png\")\n```\n"},{"id":"transform-asset-in-public-bucket","name":"Returns the URL for an asset in a public bucket with transformations","isSpotlight":true,"code":"```kotlin\nval url = supabase.storage.from(\"public-bucket\").publicRenderUrl(\"folder/avatar1.png\") {\n    size(100, 100)\n}\n```\n"}]},{"id":"from-download","title":"from.download()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.download","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"path","isOptional":false,"type":"String","description":"The path of the file you want to download."}],"examples":[{"id":"download-file-authenticated","name":"Download file from non-public bucket","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage.from(\"avatars\")\nval bytes = bucket.downloadAuthenticated(\"test.png\")\n//or on JVM:\nbucket.downloadAuthenticatedTo(\"test.png\", File(\"test.png\"))\n```\n"},{"id":"download-file-public","name":"Download file from public bucket","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage.from(\"avatars\")\nval bytes = bucket.downloadPublic(\"test.png\")\n//or on JVM:\nbucket.downloadPublicTo(\"test.png\", File(\"test.png\"))\n```\n"},{"id":"download-with-transformation","name":"Download file with transformation","code":"```kotlin\nval bucket = supabase.storage.from(\"avatars\")\nval bytes = bucket.downloadPublic(\"test.png\") {\n    size(100, 100)\n    fill()\n    quality = 100\n}\n//or on JVM:\nbucket.downloadPublicTo(\"test.png\", File(\"test.png\")) {\n    size(100, 100)\n    fill()\n    quality = 100\n}\n```\n"},{"id":"download-with-progress","name":"Download file with progress","code":"```kotlin\nval bucket = supabase.storage.from(\"avatars\")\nbucket.downloadAuthenticatedAsFlow(\"icon.png\").collect {\n    when(it) {\n        is DownloadStatus.ByteData -> println(\"Downloaded ${it.data.size} bytes\")\n        is DownloadStatus.Progress -> println(\"Downloaded ${it.totalBytesReceived.toFloat() / it.contentLength * 100}%\")\n        DownloadStatus.Success -> println(\"Downloaded successfully\")\n    }\n}\n//or on JVM:\nbucket.downloadAuthenticatedToAsFlow(\"icon.png\", File(\"icon.png\")).collect {\n    when(it) {\n        is DownloadStatus.Progress -> println(\"Downloaded ${it.totalBytesReceived.toFloat() / it.contentLength * 100}%\")\n        DownloadStatus.Success -> println(\"Downloaded successfully\")\n        else -> {} //The ByteData status will never occur as we are writing directly to a file\n    }\n}\n```\n"}]},{"id":"from-remove","title":"from.remove()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.remove","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","params":[{"name":"paths","isOptional":false,"type":"vararg String","description":"The paths of the files you want to remove."}],"examples":[{"id":"delete-file","name":"Delete file","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage.from(\"avatars\")\nbucket.delete(\"test.png\", \"test2.png\")\n```\n"}]},{"id":"from-list","title":"from.list()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.list","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"list-files-in-a-bucket","name":"List files in a bucket","isSpotlight":true,"code":"```kotlin\nval bucket = supabase.storage.from(\"avatars\")\nval files = bucket.list()\n```\n"}]}]