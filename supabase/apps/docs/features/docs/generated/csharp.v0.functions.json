[{"id":"initializing","title":"Initializing","description":"Initializing a new client is pretty straightforward. Find your project url and public key from the\nadmin panel and pass it into your client initialization function.\n\n`Supabase` is heavily dependent on Models deriving from `BaseModel`. To interact with the API, one must have the associated model (see example) specified.\n\nLeverage `Table`, `PrimaryKey`, and `Column` attributes to specify names of classes/properties that are different from their C# Versions.\n","examples":[{"id":"csharp-init-standard","name":"Standard","code":"```c#\nvar url = Environment.GetEnvironmentVariable(\"SUPABASE_URL\");\nvar key = Environment.GetEnvironmentVariable(\"SUPABASE_KEY\");\n\nvar options = new Supabase.SupabaseOptions\n{\n    AutoConnectRealtime = true\n};\n\nvar supabase = new Supabase.Client(url, key, options);\nawait supabase.InitializeAsync();\n```\n"},{"id":"csharp-init-maui","name":"Dependency Injection (Maui-like)","code":"```c#\npublic static MauiApp CreateMauiApp()\n{\n      // ...\n      var builder = MauiApp.CreateBuilder();\n\n      var url = Environment.GetEnvironmentVariable(\"SUPABASE_URL\");\n      var key = Environment.GetEnvironmentVariable(\"SUPABASE_KEY\");\n      var options = new SupabaseOptions\n      {\n        AutoRefreshToken = true,\n        AutoConnectRealtime = true,\n        // SessionHandler = new SupabaseSessionHandler() <-- This must be implemented by the developer\n      };\n\n      // Note the creation as a singleton.\n      builder.Services.AddSingleton(provider => new Supabase.Client(url, key, options));\n}\n```\n"},{"id":"csharp-init-showing-models","name":"With Models Example","code":"```c#\n// Given the following Model representing the Supabase Database (Message.cs)\n[Table(\"messages\")]\npublic class Message : BaseModel\n{\n    [PrimaryKey(\"id\")]\n    public int Id { get; set; }\n\n    [Column(\"username\")]\n    public string UserName { get; set; }\n\n    [Column(\"channel_id\")]\n    public int ChannelId { get; set; }\n\n    public override bool Equals(object obj)\n    {\n        return obj is Message message &&\n                Id == message.Id;\n    }\n\n    public override int GetHashCode()\n    {\n        return HashCode.Combine(Id);\n    }\n}\n\nvoid Initialize()\n{\n    // Get All Messages\n    var response = await client.Table<Message>().Get();\n    List<Message> models = response.Models;\n\n    // Insert\n    var newMessage = new Message { UserName = \"acupofjose\", ChannelId = 1 };\n    await client.Table<Message>().Insert();\n\n    // Update\n    var model = response.Models.First();\n    model.UserName = \"elrhomariyounes\";\n    await model.Update();\n\n    // Delete\n    await response.Models.Last().Delete();\n\n    // etc.\n}\n```\n"}]},{"id":"sign-up","title":"SignUp()","description":"Creates a new user.\n","notes":"- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- When the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls) by default. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If SignUp() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n","examples":[{"id":"sign-up","name":"Sign up.","isSpotlight":true,"code":"```c#\nvar session = await supabase.Auth.SignUp(email, password);\n```\n"}]},{"id":"sign-in-with-password","title":"SignIn(email, password)","description":"Log in an existing user using email or phone number with password.\n","notes":"- Requires either an email and password or a phone number and password.\n","examples":[{"id":"sign-in-with-email-and-password","name":"Sign in with email and password","isSpotlight":true,"code":"```c#\nvar session = await supabase.Auth.SignIn(email, password);\n```\n"},{"id":"sign-in-with-phone-and-password","name":"Sign in with phone and password","code":"```c#\nvar session = await supabase.Auth.SignIn(SignInType.Phone, phoneNumber, password);\n```\n"}]},{"id":"sign-in-with-otp","title":"SendMagicLink() and SignIn(SignInType, Phone)","notes":"- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify the `SITE_URL` or add additional redirect urls in [your project](https://supabase.com/dashboard/project/_/auth/settings).\n","examples":[{"id":"sign-in-with-email","name":"Send Magic Link.","isSpotlight":true,"description":"The user will be sent an email which contains either a magiclink or a OTP or both. By default, a given user can only request a OTP once every 60 seconds.\nYou can pass `emailRedirectTo` with dynamic link to bring the users back to your app after they click on the magic link.\n","code":"```c#\nvar options = new SignInOptions { RedirectTo = \"http://myredirect.example\" };\nvar didSendMagicLink = await supabase.Auth.SendMagicLink(\"joseph@supabase.io\", options);\n```\n"},{"id":"sign-in-with-sms-otp","name":"Sign in with SMS OTP.","description":"The user will be sent a SMS which contains a OTP. By default, a given user can only request a OTP once every 60 seconds.","code":"```c#\nawait supabase.Auth.SignIn(SignInType.Phone, \"+13334445555\");\n\n// Paired with `VerifyOTP` to get a session\nvar session = await supabase.Auth.VerifyOTP(\"+13334445555\", TOKEN, MobileOtpType.SMS);\n```\n"}]},{"id":"sign-in-with-oauth","title":"SignIn(Provider)","description":"Signs the user in using third party OAuth providers.\n","notes":"- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](https://supabase.com/docs/guides/auth#providers).\n","examples":[{"id":"sign-in-using-a-third-party-provider","name":"Sign in using a third-party provider","isSpotlight":true,"code":"```c#\nvar signInUrl = supabase.Auth.SignIn(Provider.Github);\n```\n"},{"id":"sign-in-with-scopes","name":"With scopes","description":"If you need additional data from an OAuth provider, you can include a space-separated list of scopes in your request to get back an OAuth provider token.\nYou may also need to specify the scopes in the provider's OAuth app settings, depending on the provider.\n","code":"```c#\nvar signInUrl = supabase.Auth.SignIn(Provider.Github, 'repo gist notifications');\n\n// after user comes back from signin flow\nvar session = supabase.Auth.GetSessionFromUrl(REDIRECTED_URI);\n```\n"}]},{"id":"sign-out","title":"SignOut()","description":"Signs out the current user, if there is a logged in user.\n","notes":"- In order to use the `SignOut()` method, the user needs to be signed in first.\n","examples":[{"id":"sign-out","name":"Sign out","isSpotlight":true,"code":"```c#\nawait supabase.Auth.SignOut();\n```\n"}]},{"id":"verify-otp","title":"VerifyOtp()","notes":"- The `VerifyOtp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `signup`, `magiclink`, `recovery`, `invite` or `email_change`.\n- The verification type used should be determined based on the corresponding auth method called before `VerifyOtp` to sign up / sign-in a user.\n","examples":[{"id":"verify-sms-one-time-password(otp)","name":"Verify Sms One-Time Password (OTP)","isSpotlight":true,"code":"```c#\nvar session = await supabase.Auth.VerifyOTP(\"+13334445555\", TOKEN, MobileOtpType.SMS);\n```\n"}]},{"id":"get-session","title":"CurrentSession","description":"Returns the session data, if there is an active session.\n","examples":[{"id":"get-the-session-data","name":"Get the session data","isSpotlight":true,"code":"```c#\nvar session = supabase.Auth.CurrentSession;\n```\n"}]},{"id":"get-user","title":"CurrentUser","description":"Returns the user data, if there is a logged in user.\n","examples":[{"name":"Get the logged in user","isSpotlight":true,"code":"```c#\nvar user = supabase.Auth.CurrentUser;\n```\n"}]},{"id":"update-user","title":"UpdateUser()","description":"Updates user data, if there is a logged in user.\n","notes":"- In order to use the `UpdateUser()` method, the user needs to be signed in first.\n- By Default, email updates sends a confirmation link to both the user's current and new email.\nTo only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](https://supabase.com/dashboard/project/_/auth/settings).\n","examples":[{"id":"update-the-email-for-an-authenticated-user","name":"Update the email for an authenticated user","description":"Sends a \"Confirm Email Change\" email to the new email address.","isSpotlight":true,"code":"```c#\nvar attrs = new UserAttributes { Email = \"new-email@example.com\" };\nvar response = await supabase.Auth.Update(attrs);\n```\n"},{"id":"update-the-password-for-an-authenticated-user","name":"Update the password for an authenticated user","isSpotlight":false,"code":"```c#\nvar attrs = new UserAttributes { Password = \"***********\" };\nvar response = await supabase.Auth.Update(attrs);\n```\n"},{"id":"update-the-users-metadata","name":"Update the user's metadata","isSpotlight":true,"code":"```c#\nvar attrs = new UserAttributes\n{\n  Data = new Dictionary<string, string> { {\"example\", \"data\" } }\n};\nvar response = await supabase.Auth.Update(attrs);\n```\n"}]},{"id":"on-auth-state-change","title":"StateChanged","description":"Receive a notification every time an auth event happens.\n","notes":"- Types of auth events: `AuthState.SignedIn`, `AuthState.SignedOut`, `AuthState.UserUpdated`, `AuthState.PasswordRecovery`, `AuthState.TokenRefreshed`\n","examples":[{"id":"listen-to-auth-changes","name":"Listen to auth changes","isSpotlight":true,"code":"```c#\nsupabase.Auth.AddStateChangedListener((sender, changed) =>\n{\n    switch (changed)\n    {\n        case AuthState.SignedIn:\n            break;\n        case AuthState.SignedOut:\n            break;\n        case AuthState.UserUpdated:\n            break;\n        case AuthState.PasswordRecovery:\n            break;\n        case AuthState.TokenRefreshed:\n            break;\n    }\n});\n```\n"}]},{"id":"auth-reset-password-for-email","title":"ResetPasswordForEmail()","description":"Sends a reset request to an email address.\n","notes":"Sends a password reset request to an email address. When the user clicks the reset link in the email they are redirected back to your application. Prompt the user for a new password and call Auth.UpdateUser():\n","examples":[{"id":"reset-password","name":"Reset password for Flutter","isSpotlight":true,"code":"```c#\nawait supabase.Auth.ResetPasswordForEmail(\"joseph@supabase.io\");\n```\n"}]},{"id":"invoke","title":"invoke()","description":"Invokes a Supabase Function. See the [guide](/docs/guides/functions) for details on writing Functions.\n","notes":"- Requires an Authorization header.\n- Invoke params generally match the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) spec.\n","examples":[{"id":"basic-invocation","name":"Basic invocation.","isSpotlight":true,"code":"```c#\nvar options = new InvokeFunctionOptions\n{\n    Headers = new Dictionary<string, string> {{ \"Authorization\", \"Bearer 1234\" }},\n    Body = new Dictionary<string, object> { { \"foo\", \"bar\" } }\n};\n\nawait supabase.Functions.Invoke(\"hello\", options: options);\n```\n"},{"id":"modeled-invocation","name":"Modeled invocation","code":"``` c#\nclass HelloResponse\n{\n    [JsonProperty(\"name\")]\n    public string Name { get; set; }\n}\n\nawait supabase.Functions.Invoke<HelloResponse>(\"hello\");\n```\n"}]},{"id":"select","description":"Performs vertical filtering with SELECT.\n","title":"Fetch data: Select()","notes":"- **LINQ expressions do not currently support parsing embedded resource columns. For these cases, `string` will need to be used.**\n- **When using string Column Names to select, they must match names in database, not names specified on model properties.**\n- Additional information on modeling + querying Joins and Inner Joins can be found [in the `postgrest-csharp README`](https://github.com/supabase-community/postgrest-csharp/blob/master/README.md#foreign-keys-join-tables-and-relationships)\n- By default, Supabase projects will return a maximum of 1,000 rows. This setting can be changed in Project API Settings. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `From()` can be combined with [Modifiers](/docs/reference/csharp/using-modifiers)\n- `From()` can be combined with [Filters](/docs/reference/csharp/using-filters)\n- If using the Supabase hosted platform `apikey` is technically a reserved keyword, since the API gateway will pluck it out for authentication. [It should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n","examples":[{"id":"getting-your-data","name":"Getting your data","isSpotlight":true,"code":"```c#\n// Given the following Model (City.cs)\n[Table(\"cities\")]\nclass City : BaseModel\n{\n    [PrimaryKey(\"id\")]\n    public int Id { get; set; }\n\n    [Column(\"name\")]\n    public string Name { get; set; }\n\n    [Column(\"country_id\")]\n    public int CountryId { get; set; }\n\n    //... etc.\n}\n\n// A result can be fetched like so.\nvar result = await supabase.From<City>().Get();\nvar cities = result.Models\n```\n"},{"id":"selecting-specific-columns","name":"Selecting specific columns","description":"You can select specific fields from your tables.","code":"```c#\n// Given the following Model (Movie.cs)\n[Table(\"movies\")]\nclass Movie : BaseModel\n{\n    [PrimaryKey(\"id\")]\n    public int Id { get; set; }\n\n    [Column(\"name\")]\n    public string Name { get; set; }\n\n    [Column(\"created_at\")]\n    public DateTime CreatedAt { get; set; }\n\n    //... etc.\n}\n\n// A result can be fetched like so.\nvar result = await supabase\n  .From<Movie>()\n  .Select(x => new object[] {x.Name, x.CreatedAt})\n  .Get();\n```\n"},{"id":"query-foreign-tables","name":"Query foreign tables","description":"If your database has relationships, you can query related tables too.","code":"```c#\nvar data = await supabase\n  .From<Transactions>()\n  .Select(\"id, supplier:supplier_id(name), purchaser:purchaser_id(name)\")\n  .Get();\n```\n"},{"id":"filtering-with-inner-joins","name":"Filtering with inner joins","description":"If you want to filter a table based on a child table's values you can use the `!inner()` function. For example, if you wanted\nto select all rows in a `message` table which belong to a user with the `username` \"Jane\":\n","code":"```c#\nvar result = await supabase\n  .From<Movie>()\n  .Select(\"*, users!inner(*)\")\n  .Filter(\"user.username\", Operator.Equals, \"Jane\")\n  .Get();\n```\n"},{"id":"querying-with-count-option","name":"Querying with count option","description":"You can get the number of rows by using the count option.\nAllowed values for count option are [exact](https://postgrest.org/en/stable/api.html#exact-count), [planned](https://postgrest.org/en/stable/api.html#planned-count) and [estimated](https://postgrest.org/en/stable/api.html#estimated-count).\n","code":"```c#\nvar count = await supabase\n  .From<Movie>()\n  .Select(x => new object[] { x.Name })\n  .Count(CountType.Exact);\n```\n"},{"id":"querying-json-data","name":"Querying JSON data","description":"If you have data inside of a JSONB column, you can apply select\nand query filters to the data values. Postgres offers a\n[number of operators](https://www.postgresql.org/docs/current/functions-json.html)\nfor querying JSON data. Also see\n[PostgREST docs](http://postgrest.org/en/v7.0.0/api.html#json-columns) for more details.\n","code":"```c#\n var result = await supabase\n  .From<Users>()\n  .Select(\"id, name, address->street\")\n  .Filter(\"address->postcode\", Operator.Equals, 90210)\n  .Get();\n```\n"}]},{"id":"insert","description":"Performs an INSERT into the table.\n","title":"Create data: Insert()","examples":[{"id":"create-a-record","name":"Create a record","isSpotlight":true,"code":"```c#\n[Table(\"cities\")]\nclass City : BaseModel\n{\n    [PrimaryKey(\"id\", false)]\n    public int Id { get; set; }\n\n    [Column(\"name\")]\n    public string Name { get; set; }\n\n    [Column(\"country_id\")]\n    public int CountryId { get; set; }\n}\n\nvar model = new City\n{\n  Name = \"The Shire\",\n  CountryId = 554\n};\n\nawait supabase.From<City>().Insert(model);\n```\n"},{"id":"bulk-create","name":"Bulk create","code":"```c#\n[Table(\"cities\")]\nclass City : BaseModel\n{\n    [PrimaryKey(\"id\", false)]\n    public int Id { get; set; }\n\n    [Column(\"name\")]\n    public string Name { get; set; }\n\n    [Column(\"country_id\")]\n    public int CountryId { get; set; }\n}\n\nvar models = new List<City>\n{\n  new City { Name = \"The Shire\", CountryId = 554 },\n  new City { Name = \"Rohan\", CountryId = 553 },\n};\n\nawait supabase.From<City>().Insert(models);\n```\n"},{"id":"fetch-inserted-data","name":"Fetch inserted record","code":"```c#\nvar result = await supabase\n  .From<City>()\n  .Insert(models, new QueryOptions { Returning = ReturnType.Representation });\n```\n"}]},{"id":"update","description":"Performs an UPDATE on the table.\n","title":"Modify data: Update()","notes":"- `Update()` is typically called using a model as an argument or from a hydrated model.\n","examples":[{"id":"updating-your-data-with-filter","name":"Update your data using Filter","isSpotlight":true,"code":"```c#\nvar update = await supabase\n  .From<City>()\n  .Where(x => x.Name == \"Auckland\")\n  .Set(x => x.Name, \"Middle Earth\")\n  .Update();\n```\n"},{"id":"updating-your-data","name":"Update your data","code":"```c#\nvar model = await supabase\n  .From<City>()\n  .Where(x => x.Name == \"Auckland\")\n  .Single();\n\nmodel.Name = \"Middle Earth\";\n\nawait model.Update<City>();\n```\n"}]},{"id":"upsert","description":"Performs an UPSERT into the table.\n","title":"Upsert data: Upsert()","notes":"- Primary keys should be included in the data payload in order for an update to work correctly.\n- Primary keys must be natural, not surrogate. There are however, [workarounds](https://github.com/PostgREST/postgrest/issues/1118) for surrogate primary keys.\n","examples":[{"id":"upsert-your-data","name":"Upsert your data","isSpotlight":true,"code":"```c#\nvar model = new City\n{\n  Id = 554,\n  Name = \"Middle Earth\"\n};\n\nawait supabase.From<City>().Upsert(model);\n```\n"},{"id":"upserting-into-tables-with-constraints","name":"Upserting into tables with constraints","description":"Running the following will cause supabase to upsert data into the `users` table.\nIf the username 'supabot' already exists, the `onConflict` argument tells supabase to overwrite that row\nbased on the column passed into `onConflict`.\n","isSpotlight":true,"code":"```c#\nvar model = new City\n{\n  Id = 554,\n  Name = \"Middle Earth\"\n};\n\nawait supabase\n  .From<City>()\n  .OnConflict(x => x.Name)\n  .Upsert(model);\n```\n"},{"id":"return-the-exact-number-of-rows","name":"Return the exact number of rows","description":"Allowed values for count option are `exact`, `planned` and `estimated`.\n","code":"```c#\nvar model = new City\n{\n  Id = 554,\n  Name = \"Middle Earth\"\n};\n\nawait supabase\n  .From<City>()\n  .Upsert(model, new QueryOptions { Count = QueryOptions.CountType.Exact });\n```\n"}]},{"id":"delete","description":"Performs a DELETE on the table.\n","title":"Delete data: Delete()","notes":"- `Delete()` should always be combined with [Filters](/docs/reference/csharp/using-filters) to target the item(s) you wish to delete.\n","examples":[{"id":"delete-records","name":"Delete records","isSpotlight":true,"code":"```c#\nawait supabase\n  .From<City>()\n  .Where(x => x.Id == 342)\n  .Delete();\n```\n"}]},{"id":"rpc","title":"Stored Procedures: Rpc()","description":"You can call stored procedures as a \"Remote Procedure Call\".\n\nThat's a fancy way of saying that you can put some logic into your database then call it from anywhere.\nIt's especially useful when the logic rarely changes - like password resets and updates.\n","examples":[{"id":"call-a-stored-procedure","name":"Call a stored procedure","isSpotlight":true,"description":"This is an example invoking a stored procedure.","code":"```c#\nawait supabase.Rpc(\"hello_world\", null);\n```\n"},{"id":"with-parameters","name":"With Parameters","code":"```c#\nawait supabase.Rpc(\"hello_world\", new Dictionary<string, object> { { \"foo\", \"bar\"} });\n```\n"}]},{"id":"subscribe","title":"Realtime.Channel","description":"Subscribe to realtime changes in your database.\n","notes":"- Realtime is disabled by default for new Projects for better database performance and security. You can turn it on by [managing replication](/docs/guides/api#managing-realtime).\n- If you want to receive the \"previous\" data for updates and deletes, you will need to set `REPLICA IDENTITY` to `FULL`, like this: `ALTER TABLE your_table REPLICA IDENTITY FULL;`\n","examples":[{"id":"listen-to-broadcast","name":"Listen to broadcast messages","isSpotlight":true,"code":"```c#\nclass CursorBroadcast : BaseBroadcast\n{\n    [JsonProperty(\"cursorX\")]\n    public int CursorX {get; set;}\n\n    [JsonProperty(\"cursorY\")]\n    public int CursorY {get; set;}\n}\n\nvar channel = supabase.Realtime.Channel(\"any\");\nvar broadcast = channel.Register<CursorBroadcast>();\nbroadcast.AddBroadcastEventHandler((sender, baseBroadcast) =>\n{\n    var response = broadcast.Current();\n});\n\nawait channel.Subscribe();\n\n// Send a broadcast\nawait broadcast.Send(\"cursor\", new CursorBroadcast { CursorX = 123, CursorY = 456 });\n```\n"},{"id":"listen-to-presence-sync","name":"Listen to presence sync","isSpotlight":true,"code":"```c#\n  class UserPresence : BasePresence\n  {\n      [JsonProperty(\"cursorX\")]\n      public bool IsTyping {get; set;}\n\n      [JsonProperty(\"onlineAt\")]\n      public DateTime OnlineAt {get; set;}\n  }\n\n  var channel = supabase.Realtime.Channel(\"any\");\n  var presenceKey = Guid.NewGuid().ToString();\n  var presence = channel.Register<UserPresence>(presenceKey);\n  presence.AddPresenceEventHandler(EventType.Sync, (sender, type) =>\n  {\n      Debug.WriteLine($\"The Event Type: {type}\");\n      var state = presence.CurrentState;\n  });\n\n  await channel.Subscribe();\n\n  // Send a presence update\n  await presence.Track(new UserPresence { IsTyping = false, OnlineAt = DateTime.Now });\n```\n"},{"id":"listening-to-a-specific-table","name":"Listening to a specific table","isSpotlight":true,"code":"```c#\nawait supabase.From<City>().On(ListenType.All, (sender, change) =>\n{\n    Debug.WriteLine(change.Payload.Data);\n});\n```\n"},{"id":"listen-to-all-database-changes","name":"Listen to all database changes","code":"```c#\nvar channel = supabase.Realtime.Channel(\"realtime\", \"public\", \"*\");\n\nchannel.AddPostgresChangeHandler(ListenType.All, (sender, change) =>\n{\n    // The event type\n    Debug.WriteLine(change.Event);\n    // The changed record\n    Debug.WriteLine(change.Payload);\n});\n\nawait channel.Subscribe();\n```\n"},{"id":"listening-to-inserts","name":"Listening to inserts","code":"```c#\nawait supabase.From<City>().On(ListenType.Inserts, (sender, change) =>\n{\n    Debug.WriteLine(change.Payload.Data);\n});\n```\n"},{"id":"listening-to-updates","name":"Listening to updates","description":"By default, Supabase will send only the updated record. If you want to receive the previous values as well you can\nenable full replication for the table you are listening too:\n\n```sql\nalter table \"your_table\" replica identity full;\n```\n","code":"```c#\nawait supabase.From<City>().On(ListenType.Updates, (sender, change) =>\n{\n    Debug.WriteLine(change.Payload.Data);\n});\n```\n"},{"id":"listening-to-deletes","name":"Listening to deletes","description":"By default, Supabase does not send deleted records. If you want to receive the deleted record you can\nenable full replication for the table you are listening too:\n\n```sql\nalter table \"your_table\" replica identity full;\n```\n","code":"```c#\nawait supabase.From<City>().On(ListenType.Deletes, (sender, change) =>\n{\n    Debug.WriteLine(change.Payload.Data);\n});\n```\n"},{"id":"listening-to-row-level-changes","name":"Listening to row level changes","description":"You can listen to individual rows using the format `{table}:{col}=eq.{val}` - where `{col}` is the column name, and `{val}` is the value which you want to match.","code":"```c#\nvar channel = supabase.Realtime.Channel(\"realtime\", \"public\", \"countries\", \"id\", \"id=eq.200\");\n\nchannel.AddPostgresChangeHandler(ListenType.All, (sender, change) =>\n{\n    // The event type\n    Debug.WriteLine(change.Event);\n    // The changed record\n    Debug.WriteLine(change.Payload);\n});\n\nawait channel.Subscribe();\n```\n"}]},{"id":"remove-channel","description":"Unsubscribes and removes Realtime channel from Realtime client.\n","title":"Unsubscribe()","notes":"- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n","examples":[{"id":"removes-a-channel","name":"Remove a channel","isSpotlight":true,"code":"```c#\nvar channel = await supabase.From<City>().On(ChannelEventType.All, (sender, change) => { });\nchannel.Unsubscribe();\n\n// OR\n\nvar channel = supabase.Realtime.Channel(\"realtime\", \"public\", \"*\");\nchannel.Unsubscribe()\n```\n"}]},{"id":"get-channels","description":"Returns all Realtime channels.\n","title":"Subscriptions","examples":[{"id":"get-all-channels","name":"Get all channels","isSpotlight":true,"code":"```c#\nvar channels = supabase.Realtime.Subscriptions;\n```\n"}]},{"id":"list-buckets","description":"Retrieves the details of all Storage buckets within an existing product.\n","title":"ListBuckets()","notes":"- Policy permissions required:\n  - `buckets` permissions: `select`\n  - `objects` permissions: none\n","examples":[{"id":"list-buckets","name":"List buckets","isSpotlight":true,"code":"```c#\nvar buckets = await supabase.Storage.ListBuckets();\n```\n"}]},{"id":"get-bucket","description":"Retrieves the details of an existing Storage bucket.\n","title":"GetBucket()","notes":"- Policy permissions required:\n  - `buckets` permissions: `select`\n  - `objects` permissions: none\n","examples":[{"id":"get-bucket","name":"Get bucket","isSpotlight":true,"code":"```c#\nvar bucket = await supabase.Storage.GetBucket(\"avatars\");\n```\n"}]},{"id":"create-bucket","description":"Creates a new Storage bucket\n","title":"CreateBucket()","notes":"- Policy permissions required:\n  - `buckets` permissions: `insert`\n  - `objects` permissions: none\n","examples":[{"id":"create-bucket","name":"Create bucket","isSpotlight":true,"code":"```c#\nvar bucket = await supabase.Storage.CreateBucket(\"avatars\");\n```\n"}]},{"id":"empty-bucket","description":"Removes all objects inside a single bucket.\n","title":"EmptyBucket()","notes":"- Policy permissions required:\n  - `buckets` permissions: `select`\n  - `objects` permissions: `select` and `delete`\n","examples":[{"id":"empty-bucket","name":"Empty bucket","isSpotlight":true,"code":"```c#\nvar bucket = await supabase.Storage.EmptyBucket(\"avatars\");\n```\n"}]},{"id":"update-bucket","description":"Updates a new Storage bucket\n","title":"UpdateBucket()","notes":"- Policy permissions required:\n  - `buckets` permissions: `update`\n  - `objects` permissions: none\n","examples":[{"id":"update-bucket","name":"Update bucket","isSpotlight":true,"code":"```c#\nvar bucket = await supabase.Storage.UpdateBucket(\"avatars\", new BucketUpsertOptions { Public = false });\n```\n"}]},{"id":"delete-bucket","description":"Deletes an existing bucket. A bucket can't be deleted with existing objects inside it. You must first `empty()` the bucket.\n","title":"DeleteBucket()","notes":"- Policy permissions required:\n  - `buckets` permissions: `select` and `delete`\n  - `objects` permissions: none\n","examples":[{"id":"delete-bucket","name":"Delete bucket","isSpotlight":true,"code":"```dart\nvar result = await supabase.Storage.DeleteBucket(\"avatars\");\n```\n"}]},{"id":"from-upload","description":"Uploads a file to an existing bucket.\n","title":"From().Upload()","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `insert`\n","examples":[{"id":"upload-file","name":"Upload file","isSpotlight":true,"code":"```c#\nvar imagePath = Path.Combine(\"Assets\", \"fancy-avatar.png\");\n\nawait supabase.Storage\n  .From(\"avatars\")\n  .Upload(imagePath, \"fancy-avatar.png\", new FileOptions { CacheControl = \"3600\", Upsert = false });\n```\n"},{"id":"upload-file-with-progress","name":"Upload file with Progress","code":"```c#\nvar imagePath = Path.Combine(\"Assets\", \"fancy-avatar.png\");\n\nawait supabase.Storage\n  .From(\"avatars\")\n  .Upload(imagePath, \"fancy-avatar.png\", onProgress: (sender, progress) => Debug.WriteLine($\"{progress}%\"));\n```\n"}]},{"id":"from-update","description":"Replaces an existing file at the specified path with a new one.\n","title":"From().update()","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `update` and `select`\n","examples":[{"id":"update-file","name":"Update file","isSpotlight":true,"code":"```c#\nvar imagePath = Path.Combine(\"Assets\", \"fancy-avatar.png\");\nawait supabase.Storage.From(\"avatars\").Update(imagePath, \"fancy-avatar.png\");\n```\n"}]},{"id":"from-move","description":"Moves an existing file, optionally renaming it at the same time.\n","title":"From().Move()","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `update` and `select`\n","examples":[{"id":"move-file","name":"Move file","isSpotlight":true,"code":"```c#\nawait supabase.Storage.From(\"avatars\")\n  .Move(\"public/fancy-avatar.png\", \"private/fancy-avatar.png\");\n```\n"}]},{"id":"from-create-signed-url","description":"Create signed url to download file without requiring permissions. This URL can be valid for a set number of seconds.\n","title":"From().CreateSignedUrl()","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `select`\n","examples":[{"id":"create-signed-url","name":"Create Signed URL","isSpotlight":true,"code":"```c#\nvar url = await supabase.Storage.From(\"avatars\").CreateSignedUrl(\"public/fancy-avatar.png\", 60);\n```\n"}]},{"id":"from-get-public-url","description":"Retrieve URLs for assets in public buckets\n","title":"from.getPublicUrl()","notes":"- The bucket needs to be set to public, either via [UpdateBucket()](/docs/reference/csharp/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: none\n","examples":[{"id":"returns-the-url-for-an-asset-in-a-public-bucket","name":"Returns the URL for an asset in a public bucket","isSpotlight":true,"code":"```c#\nvar publicUrl = supabase.Storage.From(\"avatars\").GetPublicUrl(\"public/fancy-avatar.png\");\n```\n"}]},{"id":"from-download","description":"Downloads a file.\n","title":"From().Download()","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `select`\n","examples":[{"id":"download-file","name":"Download file","isSpotlight":true,"code":"```c#\nvar bytes = await supabase.Storage.From(\"avatars\").Download(\"public/fancy-avatar.png\");\n```\n"},{"id":"download-file-with-progress","name":"Download file with Progress","code":"```c#\nvar bytes = await supabase.Storage\n  .From(\"avatars\")\n  .Download(\"public/fancy-avatar.png\", (sender, progress) => Debug.WriteLine($\"{progress}%\"));\n```\n"}]},{"id":"from-remove","description":"Deletes files within the same bucket\n","title":"From().Remove()","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `delete` and `select`\n","examples":[{"id":"delete-file","name":"Delete file","isSpotlight":true,"code":"```c#\nawait supabase.Storage.From(\"avatars\").Remove(new List<string> { \"public/fancy-avatar.png\" });\n```\n"}]},{"id":"from-list","description":"Lists all the files within a bucket.\n","title":"From().list()","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `select`\n","examples":[{"id":"list-files-in-a-bucket","name":"List files in a bucket","isSpotlight":true,"code":"```c#\nvar objects = await supabase.Storage.From(\"avatars\").List();\n```\n"}]},{"id":"using-modifiers","title":"Using Modifiers","description":"Filters work on the row level—they allow you to return rows that\nonly match certain conditions without changing the shape of the rows.\nModifiers are everything that don't fit that definition—allowing you to\nchange the format of the response (e.g., setting a limit or offset).\n"},{"id":"limit","title":"Limit()","description":"Limits the result with the specified count.\n","examples":[{"id":"with-select","name":"With `Select()`","isSpotlight":true,"code":"```c#\nvar result = await supabase.From<City>()\n  .Select(x => new object[] { x.Name, x.CountryId })\n  .Limit(10)\n  .Get();\n```\n"},{"id":"with-embedded-resources","name":"With embedded resources","code":"```c#\nvar result = await supabase.From<Country>()\n  .Select(\"name, cities(name)\")\n  .Filter(\"name\", Operator.Equals, \"United States\")\n  .Limit(10, \"cities\")\n  .Get();\n```\n"}]},{"id":"order","title":"Order()","description":"Orders the result with the specified column.\n","examples":[{"id":"with-select","name":"With `Select()`","isSpotlight":true,"code":"```c#\nvar result = await supabase.From<City>()\n  .Select(x => new object[] { x.Name, x.CountryId })\n  .Order(x => x.Id, Ordering.Descending)\n  .Get();\n```\n"},{"id":"with-embedded-resources","name":"With embedded resources","code":"```c#\n var result = await supabase.From<Country>()\n  .Select(\"name, cities(name)\")\n  .Filter(x => x.Name == \"United States\")\n  .Order(\"cities\", \"name\", Ordering.Descending)\n  .Get();\n```\n"}]},{"id":"range","title":"Range()","description":"Limits the result to rows within the specified range, inclusive.\n","examples":[{"id":"with-select","name":"With `Select()`","isSpotlight":true,"code":"```c#\nvar result = await supabase.From<City>()\n  .Select(\"name, country_id\")\n  .Range(0, 3)\n  .Get();\n```\n"}]},{"id":"offset","title":"Offset()","description":"Specifies the offset of the queried rows to be returned (useful in pagination)\n","examples":[{"id":"with-select","name":"With `Select()`","isSpotlight":true,"code":"```c#\nvar result = await supabase.From<City>()\n  .Select(x => new object[] { x.Name, x.CountryId })\n  .Offset(25)\n  .Get();\n```\n"}]},{"id":"single","title":"Single()","description":"Retrieves only one row from the result. Result must be one row (e.g. using limit), otherwise this will result in an error.\n","examples":[{"id":"with-select","name":"With `Select()`","isSpotlight":true,"code":"```c#\nvar result = await supabase.From<City>()\n  .Select(x => new object[] { x.Name, x.CountryId })\n  .Single();\n```\n"}]},{"id":"using-filters","title":"Using Filters","description":"Filters allow you to only return rows that match certain conditions.\n\nFilters can be used on `Select()`, `Update()`, and `Delete()` queries.\n\n**Note: LINQ expressions do not currently support parsing embedded resource columns. For these cases, `string` will need to be used.**\n","examples":[{"id":"applying-filters","name":"Applying Filters","code":"```c#\nvar result = await supabase.From<City>()\n      .Select(x => new object[] { x.Name, x.CountryId })\n      .Where(x => x.Name == \"The Shire\")\n      .Single();\n```\n"},{"id":"filter-by-value-within-json-column","name":"Filter by values within a JSON column","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\ninsert into\n  users (id, name, address)\nvalues\n  (1, 'Michael', '{ \"postcode\": 90210 }'),\n  (2, 'Jane', null);\n```\n"},"code":"```c#\nvar result = await supabase.From<City>()\n  .Filter(\"address->postcode\", Operator.Equals, 90210)\n  .Get();\n```\n"},{"id":"filter-foreign-tables","name":"Filter Foreign Tables","code":"```c#\nvar results = await supabase.From<Country>()\n  .Select(\"name, cities!inner(name)\")\n  .Filter(\"cities.name\", Operator.Equals, \"Bali\")\n  .Get();\n```\n"}]},{"id":"or","title":"Or()","description":"Finds all rows satisfying at least one of the filters.\n","examples":[{"id":"with-select","name":"With `Select()`","isSpotlight":true,"code":"```c#\nvar result = await supabase.From<Country>()\n  .Where(x => x.Id == 20 || x.Id == 30)\n  .Get();\n```\n"},{"id":"use-or-with-and","name":"Use `or` with `and`","code":"```c#\nvar result = await supabase.From<Country>()\n  .Where(x => x.Population > 300000 || x.BirthRate < 0.6)\n  .Where(x => x.Name != \"Mordor\")\n  .Get();\n```\n"}]},{"id":"not","title":"Not()","description":"Finds all rows which doesn't satisfy the filter.\n","examples":[{"id":"with-select","name":"With `Select()`","isSpotlight":true,"code":"```c#\nvar result = await supabase.From<Country>()\n  .Select(x => new object[] { x.Name, x.CountryId })\n  .Where(x => x.Name != \"Paris\")\n  .Get();\n```\n"}]},{"id":"match","title":"Match()","description":"- Finds a model given a class (useful when hydrating models and correlating with database)\n- Finds all rows whose columns match the specified `Dictionary<string, string>` object.\n","examples":[{"id":"with-model","name":"With Model","isSpotlight":true,"code":"```c#\nvar city = new City\n{\n    Id = 224,\n    Name = \"Atlanta\"\n};\n\nvar model = supabase.From<City>().Match(city).Single();\n```\n"},{"id":"with-dictionary","name":"With Dictionary","code":"```c#\nvar opts = new Dictionary<string, string>\n{\n    {\"name\",\"Beijing\"},\n    {\"country_id\", \"156\"}\n};\n\nvar model = supabase.From<City>().Match(opts).Single();\n```\n"}]},{"id":"eq","title":"Operator.Equals","description":"Finds all rows whose value on the stated `column` exactly matches the specified `value`.\n","examples":[{"id":"with-select","name":"With `Select()`","isSpotlight":true,"code":"```c#\nvar result = await supabase.From<City>()\n  .Where(x => x.Name == \"Bali\")\n  .Get();\n```\n"}]},{"id":"neq","title":"Operator.NotEqual","description":"Finds all rows whose value on the stated `column` doesn't match the specified `value`.\n","examples":[{"id":"with-select","name":"With `Select()`","isSpotlight":true,"code":"```c#\nvar result = await supabase.From<City>()\n  .Select(x => new object[] { x.Name, x.CountryId })\n  .Where(x => x.Name != \"Bali\")\n  .Get();\n```\n"}]},{"id":"gt","title":"Operator.GreaterThan","description":"Finds all rows whose value on the stated `column` is greater than the specified `value`.\n","examples":[{"id":"with-select","name":"With `Select()`","isSpotlight":true,"code":"```c#\nvar result = await supabase.From<City>()\n  .Select(x => new object[] { x.Name, x.CountryId })\n  .Where(x => x.CountryId > 250)\n  .Get();\n```\n"}]},{"id":"gte","title":"Operator.GreaterThanOrEqual","description":"Finds all rows whose value on the stated `column` is greater than or equal to the specified `value`.\n","examples":[{"id":"with-select","name":"With `Select()`","isSpotlight":true,"code":"```c#\nvar result = await supabase.From<City>()\n  .Select(x => new object[] { x.Name, x.CountryId })\n  .Where(x => x.CountryId >= 250)\n  .Get();\n```\n"}]},{"id":"lt","title":"Operator.LessThan","description":"Finds all rows whose value on the stated `column` is less than the specified `value`.\n","examples":[{"id":"with-select","name":"With `Select()`","isSpotlight":true,"code":"```c#\nvar result = await supabase.From<City>()\n  .Select(\"name, country_id\")\n  .Where(x => x.CountryId < 250)\n  .Get();\n```\n"}]},{"id":"lte","title":"Operator.LessThanOrEqual","description":"Finds all rows whose value on the stated `column` is less than or equal to the specified `value`.\n","examples":[{"id":"with-select","name":"With `Select()`","isSpotlight":true,"code":"```c#\nvar result = await supabase.From<City>()\n  .Where(x => x.CountryId <= 250)\n  .Get();\n```\n"}]},{"id":"like","title":"Operator.Like","description":"Finds all rows whose value in the stated `column` matches the supplied `pattern` (case sensitive).\n","examples":[{"id":"with-select","name":"With `Select()`","isSpotlight":true,"code":"```c#\nvar result = await supabase.From<City>()\n  .Filter(x => x.Name, Operator.Like, \"%la%\")\n  .Get();\n```\n"}]},{"id":"ilike","title":"Operator.ILike","description":"Finds all rows whose value in the stated `column` matches the supplied `pattern` (case insensitive).\n","examples":[{"id":"with-select","name":"With `Select()`","isSpotlight":true,"code":"```c#\nawait supabase.From<City>()\n  .Filter(x => x.Name, Operator.ILike, \"%la%\")\n  .Get();\n```\n"}]},{"id":"is","title":"Operator.Is","description":"A check for exact equality (null, true, false), finds all rows whose value on the stated `column` exactly match the specified `value`.\n","examples":[{"id":"with-select","name":"With `Select()`","isSpotlight":true,"code":"```c#\nvar result = await supabase.From<City>()\n  .Where(x => x.Name == null\n  .Get();\n```\n"}]},{"id":"in","title":"Operator.In","description":"Finds all rows whose value on the stated `column` is found on the specified `values`.\n","examples":[{"id":"with-select","name":"With `Select()`","isSpotlight":true,"code":"```c#\nvar result = await supabase.From<City>()\n  .Filter(x => x.Name, Operator.In, new List<object> { \"Rio de Janiero\", \"San Francisco\" })\n  .Get();\n```\n"}]},{"id":"contains","title":"Operator.Contains","examples":[{"id":"with-select","name":"With `Select()`","isSpotlight":true,"code":"```c#\nvar result = await supabase.From<City>()\n  .Filter(x => x.MainExports, Operator.Contains, new List<object> { \"oil\", \"fish\" })\n  .Get();\n```\n"}]},{"id":"contained-by","title":"Operator.ContainedIn","examples":[{"id":"with-select","name":"With `Select()`","isSpotlight":true,"code":"```c#\nvar result = await supabase.From<City>()\n  .Filter(x => x.MainExports, Operator.ContainedIn, new List<object> { \"oil\", \"fish\" })\n  .Get();\n```\n"}]},{"id":"text-search","title":"Operator.[FTS,PLFTS,PHFTS,WFTS] (Full Text Search)","description":"Finds all rows whose tsvector value on the stated `column` matches to_tsquery(query).\n","examples":[{"id":"text-search","name":"Text search","code":"```c#\nvar result = await supabase.From<Quote>()\n  .Select(x => x.Catchphrase)\n  .Filter(x => x.Catchphrase, Operator.FTS, new FullTextSearchConfig(\"'fat' & 'cat\", \"english\"))\n  .Get();\n```\n"},{"id":"basic-normalization","name":"Basic normalization","description":"Uses PostgreSQL's `plainto_tsquery` function.","code":"```c#\nvar result = await supabase.From<Quote>()\n  .Select(x => x.Catchphrase)\n  .Filter(x => x.Catchphrase, Operator.PLFTS, new FullTextSearchConfig(\"'fat' & 'cat\", \"english\"))\n  .Get();\n```\n"},{"id":"full-normalization","name":"Full normalization","description":"Uses PostgreSQL's `phraseto_tsquery` function.","code":"```c#\nvar result = await supabase.From<Quote>()\n  .Select(x => x.Catchphrase)\n  .Filter(x => x.Catchphrase, Operator.PHFTS, new FullTextSearchConfig(\"'fat' & 'cat\", \"english\"))\n  .Get();\n```\n"},{"id":"web-search","name":"Websearch","description":"Uses PostgreSQL's `websearch_to_tsquery` function.\nThis function will never raise syntax errors, which makes it possible to use raw user-supplied input for search, and can be used\nwith advanced operators.\n\n- `unquoted text`: text not inside quote marks will be converted to terms separated by & operators, as if processed by plainto_tsquery.\n- `\"quoted text\"`: text inside quote marks will be converted to terms separated by `<->` operators, as if processed by phraseto_tsquery.\n- `OR`: the word “or” will be converted to the | operator.\n- `-`: a dash will be converted to the ! operator.\n","code":"```c#\nvar result = await supabase.From<Quote>()\n  .Select(x => x.Catchphrase)\n  .Filter(x => x.Catchphrase, Operator.WFTS, new FullTextSearchConfig(\"'fat' & 'cat\", \"english\"))\n  .Get();\n```\n"}]}]