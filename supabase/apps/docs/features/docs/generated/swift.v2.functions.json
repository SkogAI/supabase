[{"id":"initializing","title":"Initializing","description":"You can initialize Supabase with the `SupabaseClient` by passing your `Project URL` and `Project Key`. You can find these under your `Project Settings` â†’ `API Settings`\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.\n","examples":[{"id":"initialize-client","name":"Initialize Client","code":"```swift\nimport Supabase\n\nlet client = SupabaseClient(supabaseURL: URL(string: \"https://xyzcompany.supabase.co\")!, supabaseKey: \"publishable-or-anon-key\")\n```\n"},{"id":"initialize-client-custom-options","name":"Initialize Client with custom options","code":"```swift\nimport Supabase\n\nlet supabase = SupabaseClient(\n  supabaseURL: URL(string: \"https://xyzcompany.supabase.co\")!,\n  supabaseKey: \"publishable-or-anon-key\",\n  options: SupabaseClientOptions(\n    db: .init(\n      schema: \"public\"\n    ),\n    auth: .init(\n      storage: MyCustomLocalStorage(),\n      flowType: .pkce\n    ),\n    global: .init(\n      headers: [\"x-my-custom-header\": \"my-app-name\"],\n      session: URLSession.myCustomSession\n    )\n  )\n)\n```\n"},{"id":"initialize-client-with-logging","name":"Initialize Client with Logging","code":"```swift\nimport Supabase\n\nstruct AppLogger: SupabaseLogger {\n  func log(message: SupabaseLogMessage) {\n    print(message.description)\n  }\n}\n\nlet supabase = SupabaseClient(\n  supabaseURL: URL(string: \"https://xyzcompany.supabase.co\")!,\n  supabaseKey: \"publishable-or-anon-key\",\n  options: SupabaseClientOptions(\n    global: SupabaseClientOptions.GlobalOptions(\n      logger: AppLogger()\n    )\n  )\n)\n```\n"},{"id":"api-schemas","name":"With custom schemas","code":"```swift\nimport Supabase\n\nlet supabase = SupabaseClient(\n  supabaseURL: URL(string: \"https://xyzcompany.supabase.co\")!,\n  supabaseKey: \"publishable-or-anon-key\",\n  options: SupabaseClientOptions(\n    db: .init(\n      // Provide a custom schema. Defaults to \"public\".\n      schema: \"other_schema\"\n    )\n  )\n)\n```\n","description":"By default the API server points to the `public` schema. You can enable other database schemas within the Dashboard.\nGo to [Settings > API > Exposed schemas](/dashboard/project/_/settings/api) and add the schema which you want to expose to the API.\n\nNote: each client connection can only access a single schema, so the code above can access the `other_schema` schema but cannot access the `public` schema.\n"}]},{"id":"auth-api","title":"Overview","notes":"The auth methods can be accessed via the `supabase.auth` namespace.\n\n### Handling deep links\n\n#### UIKit app lifecycle\n\n```swift\npublic func application(\n  _ application: UIApplication,\n  didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?\n) -> Bool {\n  if let url = launchOptions?[.url] as? URL {\n    supabase.auth.handle(url)\n  }\n\n  return true\n}\n\nfunc application(\n  _ app: UIApplication,\n  open url: URL,\n  options: [UIApplication.OpenURLOptionsKey: Any]\n) -> Bool {\n  supabase.auth.handle(url)\n  return true\n}\n\n#### UIKit app lifecycle with scenes\n\nIn your `SceneDelegate.swift`:\n\n```swift\nfunc scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>) {\n  guard let url = URLContexts.first?.url else { return }\n  supabase.auth.handle(url)\n}\n```\n\n#### SwiftUI app lifecycle\n\nIn your `AppDelegate.swift`:\n\n```swift\nSomeView()\n  .onOpenURL { url in\n    supabase.auth.handle(url)\n  }\n```\n","examples":[{"id":"create-auth-client","name":"Create auth client","isSpotlight":true,"code":"```swift\nlet supabase = SupabaseClient(supabaseURL: URL(string: \"https://xyzcompany.supabase.co\")!, supabaseKey: \"publishable-or-anon-key\")\nlet auth = supabase.auth\n```\n"},{"id":"create-auth-client-with-custom-storage","name":"Create auth client with custom storage","isSpotlight":true,"code":"```swift\nlet supabase = SupabaseClient(\n  supabaseURL: URL(string: \"https://xyzcompany.supabase.co\")!,\n  supabaseKey: \"publishable-or-anon-key\",\n  options: .init(\n    auth: .init(\n      MyCustomLocalStorage()\n    )\n  )\n)\nlet auth = supabase.auth\n```\n"}]},{"id":"sign-up","title":"signUp()","notes":"- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- When the user confirms their email address, they are redirected to the [`SITE_URL`](/docs/guides/auth/redirect-urls) by default. You can modify your `SITE_URL` or add additional redirect URLs in [your project](/dashboard/project/_/auth/url-configuration).\n- If signUp() is called for an existing confirmed user:\n  - When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n  - When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n- To fetch the currently logged-in user, refer to [`getUser()`](/docs/reference/swift/get-user).\n","overwriteParams":[{"name":"email","isOptional":true,"type":"String","description":"One of `email` or `phone` must be provided."},{"name":"phone","isOptional":true,"type":"String","description":"One of `email` or `phone` must be provided."},{"name":"password","type":"String"},{"name":"data","isOptional":true,"type":"JSONObject","description":"A custom data object to store additional user metadata.\n"},{"name":"redirectTo","isOptional":true,"type":"URL","description":"Only for email signups. The redirect URL embedded in the email link. Must be a configured redirect URL for your Supabase instance.\n"},{"name":"captchaToken","isOptional":true,"type":"String"}],"examples":[{"id":"sign-up","name":"Sign up with email and password","isSpotlight":true,"code":"```swift\ntry await supabase.auth.signUp(\n  email: \"example@email.com\",\n  password: \"example-password\"\n)\n```\n"},{"id":"sign-up-phone","name":"Sign up with a phone number and password (SMS)","isSpotlight":true,"code":"```swift\ntry await supabase.auth.signUp(\n  phone: \"123456789\",\n  password: \"example-password\",\n  channel: \"sms\"\n)\n```\n"},{"id":"sign-up-phone-whatsapp","name":"Sign up with a phone number and password (whatsapp)","isSpotlight":true,"description":"The user will be sent a WhatsApp message which contains a OTP. By default, a given user can only request a OTP once every 60 seconds. Note that a user will need to have a valid WhatsApp account that is linked to Twilio in order to use this feature.\n","code":"```swift\ntry await supabase.auth.signUp(\n  phone: \"123456789\",\n  password: \"example-password\",\n  channel: \"whatsapp\"\n)\n```\n"},{"id":"sign-up-with-additional-user-metadata","name":"Sign up with additional user metadata","isSpotlight":false,"description":"The custom data is defined as `[String: AnyJSON]`, where `AnyJSON` is a helper type defined in the library.\n","code":"```swift\ntry await supabase.auth.signUp(\n  email: \"example@email.com\",\n  password: \"example-password\",\n  data: [\n    \"first_name\": .string(\"John\"),\n    \"age\": .number(24)\n  ]\n)\n```\n"},{"id":"sign-up-with-redirect","name":"Sign up with a redirect URL","description":"- You can provide a default redirect URL when initializing the client.\n- See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n","code":"```swift\ntry await supabase.auth.signUp(\n  email:  \"example@email.com\",\n  password: \"example-password\",\n  redirectTo: URL(string: \"https://example.com/welcome\")!\n)\n```\n"}]},{"id":"on-auth-state-change","title":"onAuthStateChange()","notes":"- Subscribes to important events occurring on the user's session.\n- Emitted events:\n  - `INITIAL_SESSION`\n    - Emitted right after the Supabase client is constructed and the initial session from storage is loaded.\n  - `SIGNED_IN`\n    - Emitted each time a user session is confirmed or re-established, including on user sign in.\n    - Avoid making assumptions as to when this event is fired, this may occur even when the user is already signed in. Instead, check the user object attached to the event to see if a new user has signed in and update your application's UI.\n  - `SIGNED_OUT`\n    - Emitted when the user signs out. This can be after:\n      - A call to `supabase.auth.signOut()`.\n      - After the user's session has expired for any reason:\n        - User has signed out on another device.\n        - The session has reached its timebox limit or inactivity timeout.\n        - User has signed in on another device with single session per user enabled.\n        - Check the [User Sessions](/docs/guides/auth/sessions) docs for more information.\n    - Use this to clean up any local storage your application has associated with the user.\n  - `TOKEN_REFRESHED`\n    - Emitted each time a new access and refresh token are fetched for the signed in user.\n    - It's best practice and highly recommended to extract the access token (JWT) and store it in memory for further use in your application.\n      - Avoid frequent calls to `supabase.auth.session` for the same purpose.\n    - There is a background process that keeps track of when the session should be refreshed so you will always receive valid tokens by listening to this event.\n    - The frequency of this event is related to the JWT expiry limit configured on your project.\n  - `USER_UPDATED`\n    - Emitted each time the `supabase.auth.update(user:)` method finishes successfully. Listen to it to update your application's UI based on new profile information.\n  - `PASSWORD_RECOVERY`\n    - Emitted instead of the `SIGNED_IN` event when the user lands on a page that includes a password recovery link in the URL.\n    - Use it to show a UI to the user where they can [reset their password](/docs/guides/auth/passwords#resetting-a-users-password-forgot-password).\n","examples":[{"id":"listen-to-auth-changes","name":"Listen to auth changes","isSpotlight":true,"code":"```swift\n\n// Using AsyncStream\nfor await (event, session) in await supabase.auth.authStateChanges {\n  print(event, session)\n}\n\n// Using Closure\nlet subscription = await supabase.auth.onAuthStateChange { event, session in\n  print(event, session)\n}\n\n// call remove() to remove subscription\nsubscription.remove()\n```\n","description":"- When using closure based, remember to call `remove()` on the returned subscription.\n- When using AsyncStream, it automatically removes the subscription when AsyncStream is canceled, or finishes.\n"},{"id":"list-to-a-specific-event","name":"Listen to a specific event","code":"```swift\nfor await (_, session) in await supabase.auth.authStateChanges\n  .filter({ $0.event == .signedIn }) {\n  // handle signIn event.\n}\n```\n"}]},{"id":"sign-in-anonymously","title":"signInAnonymously()","notes":"- Returns an anonymous user\n- It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.\n","examples":[{"id":"sign-in-anonymously","name":"Create an anonymous user","isSpotlight":true,"code":"```swift\nlet session = try await supabase.auth.signInAnonymously(captchaToken: captchaToken)\n```\n"},{"id":"sign-in-anonymously-with-user-metadata","name":"Create an anonymous user with custom user metadata","isSpotlight":false,"code":"```swift\nlet session = try await supabase.auth.signInAnonymously(\n  data: customData,\n  captchaToken: captchaToken\n)\n```\n"}]},{"id":"sign-in-with-password","title":"signInWithPassword()","notes":"- Requires either an email and password or a phone number and password.\n","overwriteParams":[{"name":"email","isOptional":true,"type":"String","description":"One of `email` or `phone` must be provided."},{"name":"phone","isOptional":true,"type":"String","description":"One of `email` or `phone` must be provided."},{"name":"password","type":"String"},{"name":"captchaToken","isOptional":true,"type":"String"}],"examples":[{"id":"sign-in-with-email-and-password","name":"Sign in with email and password","isSpotlight":true,"code":"```swift\ntry await supabase.auth.signIn(\n  email: \"example@email.com\",\n  password: \"example-password\"\n)\n```\n"},{"id":"sign-in-with-phone-and-password","name":"Sign in with phone and password","isSpotlight":false,"code":"```swift\ntry await supabase.auth.signIn(\n  phone: \"+13334445555\",\n  password: \"same-password\"\n)\n\n// After receiving a SMS with a OTP.\ntry await supabase.auth.verifyOTP(\n  phone: \"+13334445555\",\n  token: \"123456\",\n  type: .sms\n)\n```\n"}]},{"id":"sign-in-with-otp","title":"signInWithOTP()","overwriteParams":[{"name":"email","isOptional":true,"type":"String","description":"One of `email` or `phone` must be provided."},{"name":"phone","isOptional":true,"type":"String","description":"One of `email` or `phone` must be provided."},{"name":"redirectTo","isOptional":true,"type":"String","description":"Only for email signups. The redirect URL embedded in the email link. Must be a configured redirect URL for your Supabase instance.\n"},{"name":"channel","isOptional":true,"type":"MessagingChannel","description":"The channel to use for sending messages. Only for phone signups.\n"},{"name":"shouldCreateUser","isOptional":true,"type":"Bool","description":"Whether to create the user if they don't already exist. Defaults to true.\n"},{"name":"data","isOptional":true,"type":"JSONObject","description":"A custom data object to store additional user metadata.\n"},{"name":"captchaToken","isOptional":true,"type":"String"}],"notes":"- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If the user doesn't exist, `signInWithOTP()` will signup the user instead. To restrict this behavior, you can set `shouldCreateUser` to `false``.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls).\n- See [redirect URLs and wildcards](/docs/guides/auth#redirect-urls-and-wildcards) to add additional redirect URLs to your project.\n- Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](/dashboard/project/_/auth/templates) to include `{{ .Token }}` instead of `{{ .ConfirmationURL }}`.\n- See our [Twilio Phone Auth Guide](/docs/guides/auth/phone-login/twilio) for details about configuring WhatsApp sign in.\n","examples":[{"id":"sign-in-with-email","name":"Sign in with email","isSpotlight":true,"description":"The user will be sent an email which contains either a magiclink or a OTP or both. By default, a given user can only request a OTP once every 60 seconds.","code":"```swift\ntry await supabase.auth.signInWithOTP(\n  email: \"example@email.com\",\n  redirectTo: URL(string: \"my-app-scheme://\")!\n)\n```\n"},{"id":"sign-in-with-sms-otp","name":"Sign in with SMS OTP","isSpotlight":false,"description":"The user will be sent a SMS which contains a OTP. By default, a given user can only request a OTP once every 60 seconds.","code":"```swift\ntry await supabase.auth.signInWithOTP(phone: \"+13334445555\")\n```\n"},{"id":"sign-in-with-whatsapp-otp","name":"Sign in with WhatsApp OTP","isSpotlight":false,"description":"The user will be sent a WhatsApp message which contains a OTP. By default, a given user can only request a OTP once every 60 seconds. Note that a user will need to have a valid WhatsApp account that is linked to Twilio in order to use this feature.","code":"```swift\ntry await supabase.auth.signInWithOTP(\n  phone: \"+13334445555\",\n  channel: \"whatsapp\"\n)\n```\n"}]},{"id":"sign-in-with-oauth","title":"signInWithOAuth()","overwriteParams":[{"name":"provider","type":"Provider","description":"The third-party provider.\n"},{"name":"redirectTo","type":"URL","isOptional":true,"description":"A URL to send the user to after they are confirmed.\n"},{"name":"scopes","type":"String","isOptional":true,"description":"A space-separated list of scopes granted to the OAuth application.\n"},{"name":"queryParams","type":"[(name: String, value: String?)]","isOptional":true,"description":"Additional query params.\n"},{"name":"configure","type":"Callback","isOptional":true,"description":"A custom configuration callback for opening the OAuth flow externally.\n"}],"notes":"- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](https://supabase.com/docs/guides/auth#providers).\n","examples":[{"id":"sign-in-using-ASWebAuthenticationSession","name":"Sign in with OAuth using ASWebAuthenticationSession","isSpotlight":true,"description":"- Use `configure` parameter to customize the `ASWebAuthenticationSession`\n","code":"```swift\nlet session = try await supabase.auth.signInWithOAuth(\n  provider: .github\n) { (session: ASWebAuthenticationSession) in\n  // customize session\n}\n```\n"},{"id":"sign-in-using-generic-flow","name":"Sign in with OAuth and customize flow","isSpotlight":true,"description":"- Use `launchFlow` parameter to customize the flow.\n","code":"```swift\nlet session = try await supabase.auth.signInWithOAuth(\n  provider: .github\n) { url in\n  // use url to start OAuth flow\n  // and return a result url that contains the OAuth token.\n  // ...\n  return resultURL\n}\n```\n"},{"id":"sign-in-using-manual-implementation","name":"Sign in using a third-party provider","isSpotlight":true,"description":"- getOAuthSignInURL() provides the URL which needs to be opened preferably in a [ASWebAuthenticationSession](ASWebAuthenticationSession) instance..\n- The redirectTo URL, or `callbackURLScheme` needs to be setup correctly in your project under Authentication -> URL Configuration -> Redirect URLs.\n- When using `ASWebAuthenticationSession` or any other implementation, use the returning URL as input to `session(from:)` method.\n","code":"```swift\nlet url = try await supabase.auth.getOAuthSignInURL(provider: .github, redirectTo: URL(string: \"my-app-scheme://\"))\n\nlet session = ASWebAuthenticationSession(url: url, callbackURLScheme: \"my-app-scheme\") { url, error in\n  guard let url else { return }\n\n  Task {\n    try await supabase.auth.session(from: url)\n  }\n}\n\nsession.presentationContextProvider = self // yours ASWebAuthenticationPresentationContextProviding implementation.\n\nsession.start()\n```\n"},{"id":"sign-in-with-scopes","name":"Sign in with scopes","isSpotlight":false,"description":"If you need additional data from an OAuth provider, you can include a space-separated list of scopes in your request to get back an OAuth provider token.\nYou may also need to specify the scopes in the provider's OAuth app settings, depending on the provider. The list of scopes will be documented by the third-party provider you are using and specifying scopes will enable you to use the OAuth provider token to call additional APIs supported by the third-party provider to get more information.\n","code":"```swift\nlet url = try await supabase.auth.signInWithOAuth(\n  provider: .github,\n  scopes: \"repo gist notifications\"\n)\n```\n"}]},{"id":"sign-in-with-id-token","title":"signInWithIdToken()","examples":[{"id":"sign-in-with-id-token","name":"Sign In using ID Token","description":"Use this method to implement native Sign In With Apple.","code":"```swift\nlet session = try await supabase.auth.signInWithIdToken(\n  credentials: OpenIDConnectCredentials(\n    provider: .apple,\n    idToken: \"your-id-token\",\n    nonce: \"your nonce\"\n  )\n)\n```\n"}]},{"id":"sign-in-with-sso","title":"signInWithSSO()","overwriteParams":[{"name":"providerId","isOptional":true,"type":"String","description":"UUID of the SSO provider. One of `providerId` or `domain` is required.\n"},{"name":"domain","isOptional":true,"type":"String","description":"Domain name of the organization to use SSO with. One of `providerId` or `domain` is required.\n"},{"name":"redirectTo","type":"String","description":"The URL to redirect the user to after they have signed in. Must be a configured redirect URL for your Supabase instance.\n"},{"name":"captchaToken","type":"String"}],"notes":"- Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections) to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso) to do this.\n- If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n- In case you need to use a different way to start the authentication flow with an identity provider, you can use the `providerId` property. For example:\n    - Mapping specific user email addresses with an identity provider.\n    - Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.\n","examples":[{"id":"sign-in-with-domain","name":"Sign in with email domain","isSpotlight":true,"code":"```swift\n  // You can extract the user's email domain and use it to trigger the\n  // authentication flow with the correct identity provider.\n\n  let url = try await await supabase.auth.signInWithSSO{\n    domain: \"company.com\"\n  }\n\n  // Open the URL using your preferred method to complete sign-in process.\n  UIApplication.shared.open(url)\n```\n"},{"id":"sign-in-with-provider-uuid","name":"Sign in with provider UUID","isSpotlight":true,"code":"```swift\n  // Useful when you need to map a user's sign in request according\n  // to different rules that can't use email domains.\n\n  let url = try await supabase.auth.signInWithSSO{\n    providerId: \"21648a9d-8d5a-4555-a9d1-d6375dc14e92\"\n  }\n\n  // Open the URL using your preferred method to complete sign-in process.\n  UIApplication.shared.open(url)\n```\n"}]},{"id":"sign-out","title":"signOut()","notes":"- In order to use the `signOut()` method, the user needs to be signed in first.\n","examples":[{"id":"sign-out","name":"Sign out","isSpotlight":true,"code":"```swift\ntry await supabase.auth.signOut()\n```\n"}]},{"id":"verify-otp","title":"verifyOTP()","overwriteParams":[{"name":"email","isOptional":true,"type":"String","description":"One of `phone`, `email`, or `token_hash` must be provided."},{"name":"phone","isOptional":true,"type":"String","description":"One of `phone`, `email`, or `token_hash` must be provided."},{"name":"token_hash","isOptional":true,"type":"String","description":"The token hash from the user's email link. One of `phone`, `email`, or `token_hash` must be provided.\n"},{"name":"type","type":"EmailOTPType | MobileOTPType"},{"name":"token","isOptional":true,"type":"String","description":"The OTP sent to the user. Required if using `phone` or `email`."},{"name":"redirectTo","isOptional":true,"type":"URL","description":"A URL to redirect the user to after they are confirmed. Must be in your configured redirect URLs.\n"},{"name":"captchaToken","isOptional":true,"type":"String","description":"Deprecated."}],"notes":"- The `verifyOTP` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `signup`, `magiclink`, `recovery`, `invite`, `email_change`, or `email`.\n- The verification type used should be determined based on the corresponding auth method called before `verifyOTP` to sign up / sign-in a user.\n","examples":[{"id":"verify-sms-one-time-password(otp)","name":"Verify Sms One-Time Password (OTP)","isSpotlight":true,"code":"```swift\ntry await supabase.auth.verifyOTP(\n  phone: \"+13334445555\",\n  token: \"123456\",\n  type: .sms\n)\n```\n"},{"id":"verify-signup-one-time-password(otp)","name":"Verify Signup One-Time Password (OTP)","isSpotlight":false,"code":"```swift\n   try await supabase.auth.verifyOTP(\n    email: \"example@example-email.com\",\n    token: \"123456\",\n    type: .signup\n  )\n```\n"}]},{"id":"get-session","title":"session","description":"- Returns the session, refreshing it if necessary. If no session can be found, a `GoTrueError.sessionNotFound` error is thrown.\n","examples":[{"id":"get-the-session-data","name":"Get the session data","isSpotlight":true,"code":"```swift\ntry await supabase.auth.session\n```\n"},{"id":"get-current-session-no-validation","name":"Get the current session without validation","isSpotlight":true,"description":"The session returned by this property may be expired.","code":"```swift\nlet session = supabase.auth.currentSession\n```\n"}]},{"id":"get-user","title":"user()","description":"- This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.\n- Fetches the user object from the database instead of local session.\n- Should be used only when you require the most current user data. For faster results, `session.user` is recommended.\n","examples":[{"id":"get-the-logged-in-user-with-the-current-existing-session","name":"Get the logged in user with the current existing session","isSpotlight":true,"code":"```swift\nlet user = try await supabase.auth.user()\n```\n"},{"id":"get-the-logged-in-user-with-a-custom-access-token-jwt","name":"Get the logged in user with a custom access token jwt","isSpotlight":false,"code":"```swift\nlet user = try await supabase.auth.user(jwt: \"custom-jwt\")\n```\n"},{"id":"get-current-user","name":"Get current user","isSpotlight":true,"description":"The user returned by this property may be outdated.","code":"```swift\nlet user = supabase.auth.currentUser\n```\n"}]},{"id":"update-user","title":"updateUser()","notes":"- In order to use the `updateUser()` method, the user needs to be signed in first.\n- By default, email updates sends a confirmation link to both the user's current and new email.\nTo only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](https://supabase.com/dashboard/project/_/auth/providers).\n","examples":[{"id":"update-the-email-for-an-authenticated-user","name":"Update the email for an authenticated user","description":"Sends a \"Confirm Email Change\" email to the new email address.","isSpotlight":false,"code":"```swift\ntry await supabase.auth.update(user: UserAttributes(email: \"new@email.com\"))\n```\n","response":"```json\n{\n  \"user\": {\n    \"id\": \"11111111-1111-1111-1111-111111111111\",\n    \"aud\": \"authenticated\",\n    \"role\": \"authenticated\",\n    \"email\": \"example@email.com\",\n    \"email_confirmed_at\": \"2024-01-01T00:00:00Z\",\n    \"phone\": \"\",\n    \"confirmed_at\": \"2024-01-01T00:00:00Z\",\n    \"new_email\": \"new@email.com\",\n    \"email_change_sent_at\": \"2024-01-01T00:00:00Z\",\n    \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",\n    \"app_metadata\": {\n      \"provider\": \"email\",\n      \"providers\": [\n        \"email\"\n      ]\n    },\n    \"user_metadata\": {\n      \"email\": \"example@email.com\",\n      \"email_verified\": false,\n      \"phone_verified\": false,\n      \"sub\": \"11111111-1111-1111-1111-111111111111\"\n    },\n    \"identities\": [\n      {\n        \"identity_id\": \"22222222-2222-2222-2222-222222222222\",\n        \"id\": \"11111111-1111-1111-1111-111111111111\",\n        \"user_id\": \"11111111-1111-1111-1111-111111111111\",\n        \"identity_data\": {\n          \"email\": \"example@email.com\",\n          \"email_verified\": false,\n          \"phone_verified\": false,\n          \"sub\": \"11111111-1111-1111-1111-111111111111\"\n        },\n        \"provider\": \"email\",\n        \"last_sign_in_at\": \"2024-01-01T00:00:00Z\",\n        \"created_at\": \"2024-01-01T00:00:00Z\",\n        \"updated_at\": \"2024-01-01T00:00:00Z\",\n        \"email\": \"example@email.com\"\n      }\n    ],\n    \"created_at\": \"2024-01-01T00:00:00Z\",\n    \"updated_at\": \"2024-01-01T00:00:00Z\",\n    \"is_anonymous\": false\n  }\n}\n```\n"},{"id":"update-the-phone-for-an-authenticated-user","name":"Update the phone number for an authenticated user","description":"Sends a one-time password (OTP) to the new phone number.","isSpotlight":false,"code":"```swift\ntry await supabase.auth.update(\n  user: UserAttributes(\n    phone: \"123456789\"\n  )\n)\n```\n"},{"id":"update-the-password-for-an-authenticated-user","name":"Update the password for an authenticated user","isSpotlight":false,"code":"```swift\ntry await supabase.auth.update(user: UserAttributes(password: \"newPassw0rd?\"))\n```\n"},{"id":"update-the-users-metadata","name":"Update the user's metadata","isSpotlight":true,"code":"```swift\ntry await supabase.auth.update(\n  user: UserAttributes(\n    data: [\n      \"hello\": .string(\"world\")\n    ]\n  )\n)\n```\n"},{"id":"update-password-with-reauthentication","name":"Update the user's password with a nonce","description":"If **Secure password change** is enabled in your [project's email provider settings](/dashboard/project/_/auth/providers), updating the user's password would require a nonce if the user **hasn't recently signed in**. The nonce is sent to the user's email or phone number. A user is deemed recently signed in if the session was created in the last 24 hours.\n","isSpotlight":true,"code":"```swift\ntry await supabase.auth.update(\n  user: UserAttributes(\n    password: \"new password\",\n    nonce: \"123456\"\n  )\n)\n```\n"}]},{"id":"get-user-identities","title":"userIdentities()","notes":"- The user needs to be signed in to call `userIdentities()`.\n","examples":[{"id":"get-user-identities","name":"Returns a list of identities linked to the user","isSpotlight":true,"code":"```swift\nlet identities = try await supabase.auth.userIdentities()\n```\n"}]},{"id":"link-identity","title":"linkIdentity()","notes":"- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `linkIdentity()`.\n- If the candidate identity is already linked to the existing user or another user, `linkIdentity()` will fail.\n","examples":[{"id":"link-identity","name":"Link an identity to a user","isSpotlight":true,"code":"```swift\ntry await supabase.auth.linkIdentity(provider: provider)\n```\n","description":"Uses:\n  - `NSWorkspace.shared.open` in macOS\n  - `UIApplication.shared.open` in iOS, tvOS, visionOS, and macOS Catalyst\n  - `WKExtension.shared().openSystemURL` in watchOS\n"},{"id":"link-identity-custom-urlopener","name":"Link an identity to a user with custom URL opening logic","isSpotlight":true,"code":"```swift\ntry await supabase.auth.linkIdentity(provider: provider) { url in\n  // custom URL opening logic\n}\n```\n"}]},{"id":"link-identity-with-id-token","title":"linkIdentityWithIdToken()","notes":"- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `linkIdentityWithIdToken()`.\n- If the candidate identity is already linked to the existing user or another user, `linkIdentityWithIdToken()` will fail.\n- This method allows you to link an OIDC identity using an ID token obtained from a provider like Apple, Google, etc.\n","examples":[{"id":"link-identity-with-id-token","name":"Link an OIDC identity using an ID token","isSpotlight":true,"code":"```swift\ntry await supabase.auth.linkIdentityWithIdToken(\n  credentials: OpenIDConnectCredentials(\n    provider: .apple,\n    idToken: idToken\n  )\n)\n```\n","description":"Link an OpenID Connect identity to the current user using an ID token. This is useful when you've obtained an ID token from a provider's SDK (like Sign in with Apple) and want to link it to the current user's account.\n"},{"id":"link-identity-with-id-token-and-nonce","name":"Link an OIDC identity with nonce","code":"```swift\ntry await supabase.auth.linkIdentityWithIdToken(\n  credentials: OpenIDConnectCredentials(\n    provider: .apple,\n    idToken: idToken,\n    nonce: nonce\n  )\n)\n```\n","description":"For providers that support nonce verification (like Apple), you can include the nonce used during authentication.\n"}]},{"id":"unlink-identity","title":"unlinkIdentity()","notes":"- The **Enable Manual Linking** option must be enabled from your [project's authentication settings](/dashboard/project/_/settings/auth).\n- The user needs to be signed in to call `unlinkIdentity()`.\n- The user must have at least 2 identities in order to unlink an identity.\n- The identity to be unlinked must belong to the user.\n","examples":[{"id":"unlink-identity","name":"Unlink an identity","isSpotlight":true,"code":"```swift\n// retrieve all identities linked to a user\nlet identities = try await supabase.auth.userIdentities()\n\n// find the google identity\nlet googleIdentity = identities.first {\n  $0.provider == .google\n}\n\n// unlink the google identity\ntry await supabase.auth.unlinkIdentity(googleIdentity)\n```\n"}]},{"id":"send-password-reauthentication","title":"reauthenticate()","notes":"- This method is used together with `update(user:)` when a user's password needs to be updated.\n- If you require your user to reauthenticate before updating their password, you need to enable the **Secure password change** option in your [project's email provider settings](/dashboard/project/_/auth/providers).\n- A user is only require to reauthenticate before updating their password if **Secure password change** is enabled and the user **hasn't recently signed in**. A user is deemed recently signed in if the session was created in the last 24 hours.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n","examples":[{"id":"send-reauthentication-nonce","name":"Send reauthentication nonce","description":"Sends a reauthentication nonce to the user's email or phone number.","isSpotlight":true,"code":"```swift\ntry await supabase.auth.reauthenticate()\n```\n"}]},{"id":"resend-email-or-phone-otps","title":"resend()","notes":"- Resends a signup confirmation, email change, or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `signInWithOTP()` method again.\n- Password recovery emails can be resent by calling the `resetPasswordForEmail()` method again.\n- This method only resends an email or phone OTP to the user if there an initial signup, email change, or phone change request was made.\n- You can specify a redirect URL when you resend an email link using the `emailRedirectTo` option.\n","examples":[{"id":"resend-email-signup-confirmation","name":"Resend an email signup confirmation","description":"Resends the email signup confirmation to the user","isSpotlight":true,"code":"```swift\ntry await supabase.auth.resend(\n  email: \"email@example.com\",\n  type: .signup,\n  emailRedirectTo: URL(string: \"my-app-scheme://\")\n)\n```\n"},{"id":"resend-phone-signup-confirmation","name":"Resend a phone signup confirmation","description":"Resends the phone signup confirmation email to the user","code":"```swift\ntry await supabase.auth.resend(\n  phone: \"1234567890\",\n  type: .sms\n)\n```\n"},{"id":"resend-email-change-email","name":"Resend email change email","description":"Resends the email change email to the user","code":"```swift\ntry await supabase.auth.resend(\n  email: \"email@example.com\",\n  type: .emailChange\n)\n```\n"},{"id":"resend-phone-change","name":"Resend phone change OTP","description":"Resends the phone change OTP to the user","code":"```swift\ntry await supabase.auth.resend(\n  phone: \"1234567890\",\n  type: .phoneChange\n)\n```\n"}]},{"id":"set-session","title":"setSession()","notes":"- `setSession()` takes in a refresh token and uses it to get a new session.\n- The refresh token can only be used once to obtain a new session.\n- [Refresh token rotation](/docs/reference/auth/config#refresh_token_rotation_enabled) is enabled by default on all projects to guard against replay attacks.\n- You can configure the [`REFRESH_TOKEN_REUSE_INTERVAL`](https://supabase.com/docs/reference/auth/config#refresh_token_reuse_interval) which provides a short window in which the same refresh token can be used multiple times in the event of concurrency or offline issues.\n","examples":[{"id":"refresh-the-session","name":"Refresh the session","description":"Sets the session data from refresh_token and returns current session or an error if the refresh_token is invalid.","isSpotlight":true,"code":"```swift\n  try await supabase.auth.setSession(accessToken: \"access_token\", refreshToken: \"refresh_token\")\n```\n"}]},{"id":"refresh-session","title":"refreshSession()","notes":"- This method will refresh the session whether the current one is expired or not.\n","examples":[{"id":"refresh-session-using-the-current-session","name":"Refresh session using the current session","isSpotlight":true,"code":"```swift\nlet session = try await supabase.auth.refreshSession()\n```\n"},{"id":"refresh-session-using-a-passed-in-session","name":"Refresh session using a refresh token","isSpotlight":false,"code":"```swift\nlet session = try await supabase.auth.refreshSession(refreshToken: \"custom-refresh-token\")\n```\n"}]},{"id":"get-claims","title":"getClaims()","notes":"- Verifies a JWT and extracts its claims.\n- For symmetric JWTs (HS256), verification is performed server-side via the `getUser()` API.\n- For asymmetric JWTs (RS256), verification is performed client-side using Apple Security framework.\n- Uses a global JWKS cache shared across all clients with the same storage key for optimal performance.\n- Automatically handles key rotation by falling back to server-side verification when a JWK is not found.\n- The JWKS cache has a 10-minute TTL (time-to-live).\n","overwriteParams":[{"name":"jwt","isOptional":true,"type":"String","description":"The JWT to verify. If not provided, uses the access token from the current session.\n"},{"name":"options","isOptional":true,"type":"GetClaimsOptions","description":"Options for JWT verification. Can specify `allowExpired` to skip expiration check and `jwks` to provide custom JSON Web Key Set.\n"}],"examples":[{"id":"get-claims-current-session","name":"Verify and get claims from current session","isSpotlight":true,"code":"```swift\nlet response = try await supabase.auth.getClaims()\nprint(\"User ID: \\(response.claims.sub ?? \"N/A\")\")\nprint(\"Email: \\(response.claims.email ?? \"N/A\")\")\nprint(\"Role: \\(response.claims.role ?? \"N/A\")\")\n```\n"},{"id":"get-claims-custom-jwt","name":"Verify and get claims from a specific JWT","isSpotlight":false,"code":"```swift\nlet customToken = \"eyJhbGci...\"\nlet response = try await supabase.auth.getClaims(jwt: customToken)\n```\n"},{"id":"get-claims-allow-expired","name":"Get claims from an expired JWT","description":"Useful for testing or extracting information from expired tokens.","isSpotlight":false,"code":"```swift\nlet response = try await supabase.auth.getClaims(\n  options: GetClaimsOptions(allowExpired: true)\n)\n```\n"},{"id":"get-claims-custom-jwks","name":"Verify JWT with custom JWKS","description":"Provide a custom JSON Web Key Set for verification.","isSpotlight":false,"code":"```swift\nlet customJWKS = JWKS(keys: [...])\nlet response = try await supabase.auth.getClaims(\n  options: GetClaimsOptions(jwks: customJWKS)\n)\n```\n"}]},{"id":"start-auto-refresh","title":"startAutoRefresh()","description":"Starts the automatic session refresh process.\n","examples":[{"id":"start-auto-refresh","name":"Start automatic session refresh","isSpotlight":true,"code":"```swift\nsupabase.auth.startAutoRefresh()\n```\n"}]},{"id":"stop-auto-refresh","title":"stopAutoRefresh()","description":"Stops the automatic session refresh process.\n","examples":[{"id":"stop-auto-refresh","name":"Stop automatic session refresh","isSpotlight":true,"code":"```swift\nsupabase.auth.stopAutoRefresh()\n```\n"}]},{"id":"exchange-code-for-session","title":"exchangeCodeForSession()","notes":"- Used when `flowType` is set to `pkce` in client options.\n","examples":[{"id":"exchange-auth-code","name":"Exchange Auth Code","isSpotlight":true,"code":"```swift\ntry await supabase.auth.exchangeCodeForSession(authCode: \"34e770dd-9ff9-416c-87fa-43b31d7ef225\")\n```\n"}]},{"id":"auth-mfa-api","title":"Overview","notes":"This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n"},{"id":"mfa-enroll","title":"mfa.enroll()","notes":"- Currently, `totp` is the only supported `factorType`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/swift/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/swift/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challengeAndVerify()`](/docs/reference/swift/auth-mfa-challengeandverify).\n","examples":[{"id":"enroll-totp-factor","name":"Enroll a time-based, one-time password (TOTP) factor","isSpotlight":true,"code":"```swift\nlet response = try await supabase.auth.mfa.enroll(\n  params: MFAEnrollParams(\n    issuer: \"optional issuer\",\n    friendlyName: \"optional friendly name\"\n  )\n)\n\n// Use the id to create a challenge.\n// The challenge can be verified by entering the code generated from the authenticator app.\n// The code will be generated upon scanning the qrCode or entering the secret into the authenticator app.\nlet id = response.id\nlet type = response.type\nlet qrCode = response.totp?.qrCode\nlet secret = response.totp?.secret\nlet uri = response.totp?.uri\n```\n"}]},{"id":"mfa-challenge","title":"mfa.challenge()","notes":"- An [enrolled factor](/docs/reference/swift/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/swift/auth-mfa-verify).\n","examples":[{"id":"create-mfa-challenge","name":"Create a challenge for a factor","isSpotlight":true,"code":"```swift\nlet response = try await supabase.auth.mfa.challenge(\n  params: MFAChallengeParams(\n    factorId: \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"\n  )\n)\n```\n"}]},{"id":"mfa-verify","title":"mfa.verify()","notes":"- To verify a challenge, please [create a challenge](/docs/reference/swift/auth-mfa-challenge) first.\n","examples":[{"id":"verify-challenge","name":"Verify a challenge for a factor","isSpotlight":true,"code":"```swift\nlet session = try await supabase.auth.mfa.verify(\n  params: MFAVerifyParams(\n    factorId: \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n    challengeId: \"4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15\",\n    code: \"123456\"\n  )\n)\n```\n"}]},{"id":"mfa-challenge-and-verify","title":"mfa.challengeAndVerify()","notes":"- An [enrolled factor](/docs/swift/javascript/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/swift/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/swift/auth-mfa-verify) in a single step.\n","examples":[{"id":"challenge-and-verify","name":"Create and verify a challenge for a factor","isSpotlight":true,"code":"```swift\nlet session = try await supabase.auth.mfa.challengeAndVerify(\n  params: MFAChallengeAndVerifyParams(\n    factorId: \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n    code: \"123456\"\n  )\n)\n```\n"}]},{"id":"mfa-unenroll","title":"mfa.unenroll()","examples":[{"id":"unenroll-a-factor","name":"Unenroll a factor","isSpotlight":true,"code":"```swift\nlet response = try await supabase.auth.mfa.unenroll(\n  params: MFAUnenrollParams(\n    factorId: \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"\n  )\n)\n```\n"}]},{"id":"mfa-get-authenticator-assurance-level","title":"mfa.getAuthenticatorAssuranceLevel()","notes":"- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `nextLevel` field will return `aal2`, else, it will return `aal1`.\n","examples":[{"id":"get-aal","name":"Get the AAL details of a session","isSpotlight":true,"code":"```swift\nlet aal = try await supabase.auth.mfa.getAuthenticatorAssuranceLevel()\nlet currentLevel = aal.currentLevel\nlet nextLevel = aal.nextLevel\nlet currentAuthenticationMethods = aal.currentAuthenticationMethods\n```\n"}]},{"id":"mfa-list-factors","title":"mfa.listFactors()","examples":[{"id":"list-factors","name":"List all factors for a user","isSpotlight":true,"code":"```swift\nlet factors = try await supabase.auth.mfa.listFactors()\n```\n"}]},{"id":"admin-api","title":"Overview","notes":"- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the browser.\n","examples":[{"id":"create-auth-admin-client","name":"Create server-side auth client","isSpotlight":true,"code":"```swift\nimport Supabase\n\nlet supabase = SupabaseClient(\n  supabaseURL: supabaseURL,\n  supabaseKey: serviceRoleKey\n)\n\n// Access auth admin api\nlet adminAuthClient = supabase.auth.admin\n```\n"}]},{"id":"delete-user","title":"deleteUser()","notes":"- The `deleteUser()` method requires the user's ID, which maps to the `auth.users.id` column.\n","examples":[{"id":"removes-a-user","name":"Removes a user","isSpotlight":true,"code":"```swift\ntry await supabase.auth.admin.deleteUser(\n  id: \"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n)\n```\n"}]},{"id":"get-user-by-id","title":"getUserById()","description":"Get user by ID.\n","notes":"- The `getUserById()` method requires a user's ID.\n","examples":[{"id":"get-user-by-id","name":"Get user by ID","isSpotlight":true,"code":"```swift\nlet user = try await supabase.auth.admin.getUserById(\n  \"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n)\n```\n"}]},{"id":"list-users","title":"listUsers()","description":"List all users in the system.\n","examples":[{"id":"list-users","name":"List users","isSpotlight":true,"code":"```swift\nlet users = try await supabase.auth.admin.listUsers()\n```\n"},{"id":"list-users-with-pagination","name":"List users with pagination","code":"```swift\nlet users = try await supabase.auth.admin.listUsers(\n  params: PageParams(\n    page: 2,\n    perPage: 10\n  )\n)\n```\n"}]},{"id":"create-user","title":"createUser()","description":"Create a new user.\n","examples":[{"id":"create-user","name":"Create user","isSpotlight":true,"code":"```swift\nlet user = try await supabase.auth.admin.createUser(\n  attributes: AdminUserAttributes(\n    email: \"user@email.com\",\n    password: \"password\",\n    emailConfirm: true\n  )\n)\n```\n"}]},{"id":"update-user-by-id","title":"updateUserById()","description":"Update user by ID.\n","examples":[{"id":"update-user-by-id","name":"Update user by ID","isSpotlight":true,"code":"```swift\nlet user = try await supabase.auth.admin.updateUserById(\n  \"715ed5db-f090-4b8c-a067-640ecee36aa0\",\n  attributes: AdminUserAttributes(\n    email: \"newemail@email.com\"\n  )\n)\n```\n"}]},{"id":"invite-user-by-email","title":"inviteUserByEmail()","description":"Send an invite link to the user's email address.\n","examples":[{"id":"invite-user-by-email","name":"Invite user by email","isSpotlight":true,"code":"```swift\nlet user = try await supabase.auth.admin.inviteUserByEmail(\n  \"user@email.com\",\n  data: [\"role\": \"admin\"],\n  redirectTo: URL(string: \"https://example.com/welcome\")\n)\n```\n"}]},{"id":"admin-oauth-list-clients","title":"admin.oauth.listClients()","description":"List all OAuth clients with optional pagination.\n","notes":"- Requires `service_role` key.\n- This method is part of the OAuth 2.1 server administration API.\n- Only works when the OAuth 2.1 server is enabled in your Supabase Auth configuration.\n","overwriteParams":[{"name":"params","isOptional":true,"type":"PageParams","description":"Pagination parameters with `page` and `perPage` options.\n"}],"examples":[{"id":"list-oauth-clients","name":"List all OAuth clients","isSpotlight":true,"code":"```swift\nlet response = try await supabase.auth.admin.oauth.listClients()\n```\n"},{"id":"list-oauth-clients-paginated","name":"List OAuth clients with pagination","isSpotlight":false,"code":"```swift\nlet response = try await supabase.auth.admin.oauth.listClients(\n  params: PageParams(page: 1, perPage: 10)\n)\n```\n"}]},{"id":"admin-oauth-create-client","title":"admin.oauth.createClient()","description":"Create a new OAuth client.\n","notes":"- Requires `service_role` key.\n- This method is part of the OAuth 2.1 server administration API.\n- Only works when the OAuth 2.1 server is enabled in your Supabase Auth configuration.\n","overwriteParams":[{"name":"params","type":"CreateOAuthClientParams","description":"Parameters for creating the OAuth client including name, redirect URIs, and client type.\n"}],"examples":[{"id":"create-oauth-client","name":"Create a new OAuth client","isSpotlight":true,"code":"```swift\nlet client = try await supabase.auth.admin.oauth.createClient(\n  params: CreateOAuthClientParams(\n    name: \"My OAuth App\",\n    redirectUris: [\"https://example.com/callback\"],\n    clientType: .confidential\n  )\n)\n```\n"}]},{"id":"admin-oauth-get-client","title":"admin.oauth.getClient()","description":"Get details of a specific OAuth client.\n","notes":"- Requires `service_role` key.\n- This method is part of the OAuth 2.1 server administration API.\n","overwriteParams":[{"name":"clientId","type":"String","description":"The UUID of the OAuth client to retrieve.\n"}],"examples":[{"id":"get-oauth-client","name":"Get OAuth client by ID","isSpotlight":true,"code":"```swift\nlet client = try await supabase.auth.admin.oauth.getClient(\n  clientId: \"12345678-1234-1234-1234-123456789012\"\n)\n```\n"}]},{"id":"admin-oauth-delete-client","title":"admin.oauth.deleteClient()","description":"Delete an OAuth client.\n","notes":"- Requires `service_role` key.\n- This method is part of the OAuth 2.1 server administration API.\n- This action cannot be undone.\n","overwriteParams":[{"name":"clientId","type":"String","description":"The UUID of the OAuth client to delete.\n"}],"examples":[{"id":"delete-oauth-client","name":"Delete an OAuth client","isSpotlight":true,"code":"```swift\ntry await supabase.auth.admin.oauth.deleteClient(\n  clientId: \"12345678-1234-1234-1234-123456789012\"\n)\n```\n"}]},{"id":"admin-oauth-regenerate-client-secret","title":"admin.oauth.regenerateClientSecret()","description":"Regenerate the secret for an OAuth client.\n","notes":"- Requires `service_role` key.\n- This method is part of the OAuth 2.1 server administration API.\n- The old secret will be immediately invalidated.\n- Make sure to update your application with the new secret.\n","overwriteParams":[{"name":"clientId","type":"String","description":"The UUID of the OAuth client whose secret should be regenerated.\n"}],"examples":[{"id":"regenerate-oauth-client-secret","name":"Regenerate OAuth client secret","isSpotlight":true,"code":"```swift\nlet client = try await supabase.auth.admin.oauth.regenerateClientSecret(\n  clientId: \"12345678-1234-1234-1234-123456789012\"\n)\n// The response contains the new secret\nprint(\"New secret: \\(client.secret ?? \"\")\")\n```\n"}]},{"id":"select","title":"Fetch data: select()","notes":"- By default, Supabase projects will return a maximum of 1,000 rows. This setting can be changed in Project API Settings. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Modifiers](/docs/reference/swift/using-modifiers)\n- `select()` can be combined with [Filters](/docs/reference/swift/using-filters)\n- If using the Supabase hosted platform `apikey` is technically a reserved keyword, since the API gateway will pluck it out for authentication. [It should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n- The recommended solution for getting data is to use the value property which will return a decoded model. Create a `Codable` to easily decode your database responses.\n","examples":[{"id":"getting-your-data","name":"Getting your data","isSpotlight":true,"code":"```swift\nstruct Instrument: Decodable {\n  let id: Int\n  let name: String\n}\n\nlet instruments: [Instrument] = try await supabase\n  .from(\"instruments\")\n  .select()\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"violin\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"viola\"\n    },\n    {\n      \"id\": 3,\n      \"name\": \"cello\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n"},{"id":"selecting-specific-columns","name":"Selecting specific columns","code":"```swift\nstruct Instrument: Decodable {\n  let name: String\n}\n\nlet instruments: [Instrument] = try await supabase\n  .from(\"instruments\")\n  .select(\"name\")\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"violin\"\n    },\n    {\n      \"name\": \"viola\"\n    },\n    {\n      \"name\": \"cello\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n"},{"id":"query-foreign-tables","name":"Query foreign tables","description":"If your database has foreign key relationships, you can query related tables too.\n","code":"```swift\nstruct OrchestralSection: Decodable {\n  let name: String\n  let instruments: [Instrument]\n}\n\nstruct Instrument: Decodable {\n  let name: String\n}\n\nlet orchestralSections: [OrchestralSection] = try await supabase\n  .from(\"orchestral_sections\")\n  .select(\n    \"\"\"\n      name,\n      instruments (\n        name\n      )\n    \"\"\"\n  )\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"cities\": [\n        {\n          \"name\": \"violin\"\n        }\n      ]\n    },\n    {\n      \"name\": \"woodwinds\",\n      \"cities\": [\n        {\n          \"name\": \"flute\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n"},{"id":"query-foreign-tables-through-a-join-table","name":"Query foreign tables through a join table","code":"```swift\n  struct User: Decodable {\n    let name: String\n    let teams: [Team]\n  }\n\n  struct Team: Decodable {\n    let name: String\n  }\n\n  let users: [User] = try await supabase\n    .from(\"users\")\n    .select(\n      \"\"\"\n        name,\n        teams (\n          name\n        )\n      \"\"\"\n    )\n    .execute()\n    .value\n  ```\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 primary key,\n    name text\n  );\ncreate table\n  teams (\n    id int8 primary key,\n    name text\n  );\n-- join table\ncreate table\n  users_teams (\n    user_id int8 not null references users,\n    team_id int8 not null references teams,\n    -- both foreign keys must be part of a composite primary key\n    primary key (user_id, team_id)\n  );\n\ninsert into\n  users (id, name)\nvalues\n  (1, 'Kiran'),\n  (2, 'Evan');\ninsert into\n  teams (id, name)\nvalues\n  (1, 'Green'),\n  (2, 'Blue');\ninsert into\n  users_teams (user_id, team_id)\nvalues\n  (1, 1),\n  (1, 2),\n  (2, 2);\n```\n"},"response":"```json\n  {\n    \"data\": [\n      {\n        \"name\": \"Kiran\",\n        \"teams\": [\n          {\n            \"name\": \"Green\"\n          },\n          {\n            \"name\": \"Blue\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Evan\",\n        \"teams\": [\n          {\n            \"name\": \"Blue\"\n          }\n        ]\n      }\n    ],\n    \"status\": 200,\n    \"statusText\": \"OK\"\n  }\n  ```\n","description":"If you're in a situation where your tables are **NOT** directly\nrelated, but instead are joined by a _join table_, you can still use\nthe `select()` method to query the related data. The join table needs\nto have the foreign keys as part of its composite primary key.\n","hideCodeBlock":true},{"id":"query-the-same-foreign-table-multiple-times","name":"Query the same foreign table multiple times","code":"```swift\nstruct Message: Decodable {\n  let content: String\n  let from: User\n  let to: User\n}\n\nstruct User: Decodable {\n  let name: String\n}\n\nlet messages: [Message] = try await supabase\n  .from(\"messages\")\n  .select(\n    \"\"\"\n      content,\n      from:sender_id(name),\n      to:sended_id(name)\n    \"\"\"\n  )\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\n create table\n users (id int8 primary key, name text);\n\n create table\n   messages (\n     sender_id int8 not null references users,\n     receiver_id int8 not null references users,\n     content text\n   );\n\n insert into\n   users (id, name)\n values\n   (1, 'Kiran'),\n   (2, 'Evan');\n\n insert into\n   messages (sender_id, receiver_id, content)\n values\n   (1, 2, 'ðŸ‘‹');\n ```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"content\": \"ðŸ‘‹\",\n      \"from\": {\n        \"name\": \"Kiran\"\n      },\n      \"to\": {\n        \"name\": \"Evan\"\n      }\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"If you need to query the same foreign table twice, use the name of the\njoined column to identify which join to use. You can also give each\ncolumn an alias.\n","hideCodeBlock":true},{"id":"filtering-through-foreign-tables","name":"Filtering through foreign tables","code":"```swift\nstruct Instrument: Decodable {\n  let name: String\n  let orchestralSections: [OrchestralSection]?\n}\n\nstruct OrchestralSection: Decodable {\n  let name: String\n}\n\nlet instruments: [Instrument] = try await supabase\n  .from(\"instruments\")\n  .select(\"name, orchestral_sections(*)\")\n  .eq(\"orchestral_sections.name\", value: \"percussion\")\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"flute\",\n      \"orchestral_sections\": null\n    },\n    {\n      \"name\": \"violin\",\n      \"orchestral_sections\": null\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"If the filter on a foreign table's column is not satisfied, the foreign\ntable returns `[]` or `null` but the parent table is not filtered out.\nIf you want to filter out the parent table rows, use the `!inner` hint\n","hideCodeBlock":true},{"id":"querying-foreign-table-with-count","name":"Querying foreign table with count","code":"```swift\nstruct OrchestralSection: Decodable {\n  let id: UUID\n  let name: String\n  let instruments: [Instrument]\n}\n\nstruct Instrument: Decodable {\n  let count: Int\n}\n\nlet orchestralSections: [OrchestralSection] = try await supabase\n  .from(\"orchestral_sections\")\n  .select(\"*, instruments(count)\")\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table orchestral_sections (\n  \"id\" \"uuid\" primary key default \"extensions\".\"uuid_generate_v4\"() not null,\n  \"name\" text\n);\n\ncreate table instruments (\n  \"id\" \"uuid\" primary key default \"extensions\".\"uuid_generate_v4\"() not null,\n  \"name\" text,\n  \"section_id\" \"uuid\" references public.orchestral_sections on delete cascade\n);\n\nwith section as (\n  insert into orchestral_sections (name)\n  values ('strings') returning id\n)\ninsert into instruments (name, section_id) values\n('violin', (select id from section)),\n('viola', (select id from section)),\n('cello', (select id from section)),\n('double bass', (select id from section));\n```\n"},"response":"```json\n[\n  {\n    \"id\": \"693694e7-d993-4360-a6d7-6294e325d9b6\",\n    \"name\": \"strings\",\n    \"instruments\": [\n      {\n        \"count\": 4\n      }\n    ]\n  }\n]\n```\n","description":"You can get the number of rows in a related table by using the\n**count** property.\n","hideCodeBlock":true},{"id":"querying-with-count-option","name":"Querying with count option","code":"```swift\nlet count = try await supabase\n  .from(\"instruments\")\n  .select(\"*\", head: true, count: .exact)\n  .execute()\n  .count\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'dulcimer'),\n  (2, 'harp'),\n  (3, 'tuba');\n```\n"},"response":"```json\n{\n  \"count\": 3,\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"You can get the number of rows by using the\n[count](/docs/reference/swift/select#parameters) option.\n","hideCodeBlock":true},{"id":"querying-json-data","name":"Querying JSON data","code":"```swift\nstruct User: Decodable {\n  let id: Int\n  let name: String\n  let city: String\n}\n\nlet users: [User] = try await supabase\n  .from(\"users\")\n  .select(\n    \"\"\"\n      id, name,\n      address->city\n    \"\"\"\n  )\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\ninsert into\n  users (id, name, address)\nvalues\n  (1, 'Frodo', '{\"city\":\"Hobbiton\"}');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Frodo\",\n      \"city\": \"Hobbiton\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"You can select and filter data inside of\n[JSON](/docs/guides/database/json) columns. Postgres offers some\n[operators](/docs/guides/database/json#query-the-jsonb-data) for\nquerying JSON data.\n","hideCodeBlock":true},{"id":"querying-foreign-table-with-inner-join","name":"Querying foreign table with inner join","code":"```swift\nstruct Instrument: Decodable {\n  let name: String\n}\n\nstruct OrchestralSection: Decodable {\n  let name: String\n  let instruments: [Instrument]\n}\n\nlet orchestralSections: [OrchestralSection] = try await supabase\n  .from(\"orchestral_sections\")\n  .select(\"name, instruments!inner(name)\")\n  .eq(\"name\", value: \"strings\")\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table orchestral_sections (\n  \"id\" \"uuid\" primary key default \"extensions\".\"uuid_generate_v4\"() not null,\n  \"name\" text\n);\n\ncreate table instruments (\n  \"id\" \"uuid\" primary key default \"extensions\".\"uuid_generate_v4\"() not null,\n  \"name\" text,\n  \"section_id\" \"uuid\" references public.orchestral_sections on delete cascade\n);\n\nwith section as (\n  insert into orchestral_sections (name)\n  values ('strings') returning id\n)\ninsert into instruments (name, section_id) values\n('violin', (select id from section)),\n('viola', (select id from section)),\n('cello', (select id from section)),\n('double bass', (select id from section));\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"instruments\": [\n        {\n          \"name\": \"violin\"\n        },\n        {\n          \"name\": \"viola\"\n        },\n        {\n          \"name\": \"cello\"\n        },\n        {\n          \"name\": \"double bass\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"If you don't want to return the foreign table contents, you can leave the parenthesis empty.\nLike `.select('name, instruments!inner()')`.\n","hideCodeBlock":true},{"id":"switching-schemas-per-query","name":"Switching schemas per query","code":"```swift\ntry await supabase\n  .schema(\"myschema\")\n  .from(\"mytable\")\n  .select()\n```\n","data":{"sql":"```sql\ncreate schema myschema;\n\ncreate table myschema.mytable (\n  id uuid primary key default gen_random_uuid(),\n  data text\n);\n\ninsert into myschema.mytable (data) values ('mydata');\n```\n"},"response":"```json\n[\n  {\n    \"id\": \"4162e008-27b0-4c0f-82dc-ccaeee9a624d\",\n    \"data\": \"mydata\"\n  }\n]\n```\n","description":"In addition to setting the schema during initialization, you can also switch schemas on a per-query basis.\nMake sure you've set up your [database privileges and API settings](/docs/guides/api/using-custom-schemas).\n","hideCodeBlock":true}]},{"id":"insert","title":"Create data: insert()","examples":[{"id":"create-a-record","name":"Create a record","code":"```swift\nstruct Instrument: Encodable {\n  let id: Int\n  let name: String\n}\n\nlet instrument = Instrument(id: 1, name: \"ukelele\")\n\ntry await supabase\n  .from(\"instruments\")\n  .insert(instrument)\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n```\n"},"response":"```json\n{\n  \"status\": 201,\n  \"statusText\": \"Created\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"create-a-record-and-return-it","name":"Create a record and return it","code":"```swift\nstruct Instrument: Codable {\n  let id: Int\n  let name: String\n}\n\nlet instrument: Instrument = try await supabase\n  .from(\"instruments\")\n  .insert(Instrument(id: 1, name: \"banjo\"))\n  .select()\n  // specify you want a single value returned, otherwise it returns a list.\n  .single()\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"banjo\"\n    }\n  ],\n  \"status\": 201,\n  \"statusText\": \"Created\"\n}\n```\n","hideCodeBlock":true},{"id":"bulk-create","name":"Bulk create","code":"```swift\nstruct Instrument: Encodable {\n  let id: Int\n  let name: String\n}\n\nlet instruments = [\n  Instrument(id: 1, name: \"xylophone\"),\n  Instrument(id: 1, name: \"tuba\"),\n]\n\ntry await supabase\n  .from(\"instruments\")\n  .insert(instruments)\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n```\n"},"response":"```json\n{\n  \"error\": {\n    \"code\": \"23505\",\n    \"details\": \"Key (id)=(1) already exists.\",\n    \"hint\": null,\n    \"message\": \"duplicate key value violates unique constraint \\\"instruments_pkey\\\"\"\n  },\n  \"status\": 409,\n  \"statusText\": \"Conflict\"\n}\n```\n","description":"A bulk create operation is handled in a single transaction.\nIf any of the inserts fail, none of the rows are inserted.\n","hideCodeBlock":true}]},{"id":"update","title":"Modify data: update()","notes":"- `update()` should always be combined with [Filters](/docs/reference/swift/using-filters) to target the item(s) you wish to update.\n","examples":[{"id":"updating-your-data","name":"Updating your data","code":"```swift\ntry await supabase\n  .from(\"instruments\")\n  .update([\"name\": \"piano\"])\n  .eq(\"id\", value: 1)\n  .execute()\n```\n","notes":"Not always you need to create a `Encodable`` struct to define\nthe object being updated, in this example we use a `[String: String]`\ntype directly, since it conforms to `Encodable``.\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'harpsichord');\n```\n"},"response":"```json\n{\n  \"status\": 204,\n  \"statusText\": \"No Content\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"update-a-record-and-return-it","name":"Update a record and return it","code":"```swift\nstruct Instrument: Decodable {\n  let id: Int\n  let name: String\n}\n\nlet instrument: Instrument = try await supabase\n  .from(\"instruments\")\n  .update([\"name\": \"piano\"])\n  .eq(\"id\", value: 1)\n  .select()\n   // If you know this query should return a single object, append a `single()` modifier to it.\n  .single()\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'harpsichord');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"piano\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true},{"id":"updating-json-data","name":"Updating JSON data","code":"```swift\nstruct User: Decodable {\n  let id: Int\n  let name: String\n  let address: Address\n\n  struct Address: Codable {\n    let street: String\n    let postcode: String\n  }\n}\n\nstruct UpdateUser: Encodable {\n  let address: User.Address\n}\n\nlet users: [User] = try await supabase\n  .from(\"users\")\n  .update(\n    UpdateUser(\n      address: .init(\n        street: \"Melrose Place\",\n        postcode: \"90210\"\n      )\n    )\n  )\n  .eq(\"address->postcode\", value: \"90210\")\n  .select()\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\ninsert into\n  users (id, name, address)\nvalues\n  (1, 'Michael', '{ \"postcode\": \"90210\" }');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Michael\",\n      \"address\": {\n        \"street\": \"Melrose Place\",\n        \"postcode\": \"90210\"\n      }\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"Postgres offers some\n[operators](/docs/guides/database/json#query-the-jsonb-data) for\nworking with JSON data. Currently, it is only possible to update the entire JSON document.\n","hideCodeBlock":true}]},{"id":"upsert","title":"Upsert data: upsert()","notes":"- Primary keys must be included in `values` to use upsert.\n","examples":[{"id":"upsert-your-data","name":"Upsert your data","code":"```swift\nstruct Instrument: Encodable {\n  let id: Int\n  let name: String\n}\ntry await supabase\n  .from(\"instruments\")\n  .upsert(Instrument(id: 1, name: \"piano\"))\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'harpsichord');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"piano\"\n    }\n  ],\n  \"status\": 201,\n  \"statusText\": \"Created\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"bulk-upsert-your-data","name":"Bulk Upsert your data","code":"```swift\nstruct Instrument: Encodable {\n  let id: Int\n  let name: String\n}\ntry await supabase\n  .from(\"instruments\")\n  .upsert([\n    Instrument(id: 1, name: \"piano\"),\n    Instrument(id: 2, name: \"harp\"),\n  ])\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'harpsichord');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"piano\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"harp\"\n    }\n  ],\n  \"status\": 201,\n  \"statusText\": \"Created\"\n}\n```\n","hideCodeBlock":true},{"id":"upserting-into-tables-with-constraints","name":"Upserting into tables with constraints","code":"```swift\nstruct User: Encodable {\n  let id: Int\n  let handle: String\n  let displayName: String\n\n  enum CodingKeys: String, CodingKey {\n    case id\n    case handle\n    case displayName = \"display_name\"\n  }\n}\n\ntry await supabase\n  .from(\"users\")\n  .upsert(\n    User(id: 42, handle: \"saoirse\", displayName: \"Saoirse\"),\n    onConflict: \"handle\"\n  )\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 generated by default as identity primary key,\n    handle text not null unique,\n    display_name text\n  );\n\ninsert into\n  users (id, handle, display_name)\nvalues\n  (1, 'saoirse', null);\n```\n"},"response":"```json\n{\n  \"error\": {\n    \"code\": \"23505\",\n    \"details\": \"Key (handle)=(saoirse) already exists.\",\n    \"hint\": null,\n    \"message\": \"duplicate key value violates unique constraint \\\"users_handle_key\\\"\"\n  },\n  \"status\": 409,\n  \"statusText\": \"Conflict\"\n}\n```\n","description":"In the following query, `upsert()` implicitly uses the `id`\n(primary key) column to determine conflicts. If there is no existing\nrow with the same `id`, `upsert()` inserts a new row, which\nwill fail in this case as there is already a row with `handle` `\"saoirse\"`.\nUsing the `onConflict` option, you can instruct `upsert()` to use\nanother column with a unique constraint to determine conflicts.\n","hideCodeBlock":true}]},{"id":"delete","title":"Delete data: delete()","notes":"- `delete()` should always be combined with [filters](/docs/reference/swift/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have\n  [RLS](/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only\n  rows visible through `SELECT` policies are deleted. Note that by default\n  no rows are visible, so you need at least one `SELECT`/`ALL` policy that\n  makes the rows visible.\n","examples":[{"id":"delete-records","name":"Delete records","code":"```swift\ntry await supabase\n  .from(\"instruments\")\n  .delete()\n  .eq(\"id\", value: 1)\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'mandolin');\n```\n"},"response":"```json\n{\n  \"status\": 204,\n  \"statusText\": \"No Content\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"rpc","title":"Postgres functions: rpc()","description":"You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere.\nFunctions are useful when the logic rarely changesâ€”like for password resets and updates.\n\n```sql\ncreate or replace function hello_world() returns text as $$\n  select 'Hello world';\n$$ language sql;\n```\n","examples":[{"id":"call-a-postgres-function-without-arguments","name":"Call a Postgres function without arguments","code":"```swift\nlet value: String = try await supabase\n  .rpc(\"hello_world\")\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate function hello_world() returns text as $$\n  select 'Hello world';\n$$ language sql;\n```\n"},"response":"```json\n{\n  \"data\": \"Hello world\",\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"call-a-postgres-function-with-arguments","name":"Call a Postgres function with arguments","code":"```swift\nlet response: String = try await supabase\n  .rpc(\"echo\", params: [\"say\": \"ðŸ‘‹\"])\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate function echo(say text) returns text as $$\n  select say;\n$$ language sql;\n```\n"},"response":"```json\n  {\n    \"data\": \"ðŸ‘‹\",\n    \"status\": 200,\n    \"statusText\": \"OK\"\n  }\n  ```\n","hideCodeBlock":true},{"id":"bulk-processing","name":"Bulk processing","code":"```swift\nlet response: [Int] = try await supabase\n  .rpc(\"add_one_each\", params: [\"arr\": [1, 2, 3]])\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate function add_one_each(arr int[]) returns int[] as $$\n  select array_agg(n + 1) from unnest(arr) as n;\n$$ language sql;\n```\n"},"response":"```json\n{\n  \"data\": [\n    2,\n    3,\n    4\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"You can process large payloads by passing in an array as an argument.\n","hideCodeBlock":true},{"id":"call-a-postgres-function-with-filters","name":"Call a Postgres function with filters","code":"```swift\nstruct Instrument: Decodable {\n  let id: Int\n  let name: String\n}\n\nlet instrument: Instrument = await supabase\n  .rpc(\"list_stored_instruments\")\n  .eq(\"id\", value: 1)\n  .single()\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'klaxon'),\n  (2, 'marimba');\n\ncreate function list_stored_countries() returns setof countries as $$\n  select * from countries;\n$$ language sql;\n```\n"},"response":"```json\n{\n  \"data\": {\n    \"id\": 1,\n    \"name\": \"klaxon\"\n  },\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"Postgres functions that return tables can also be combined with\n[Filters](/docs/reference/javascript/using-filters) and\n[Modifiers](/docs/reference/javascript/using-modifiers).\n","hideCodeBlock":true}]},{"id":"using-filters","title":"Using Filters","description":"Filters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\nImplement `URLQueryRepresentable` protocol in your own types to be able to use them as filter value.\n\nSupported filtes are: `eq`, `neq`, `gt`, `gte`, `lt`, `lte`, `like`, `ilike`, `is`, `in`, `cs`, `cd`, `sl`, `sr`, `nxl`, `nxr`, `adj`, `ov`, `fts`, `plfts`, `phfts`, `wfts`. Check available operators in [PostgREST](https://postgrest.org/en/stable/references/api/tables_views.html#operators).\n","examples":[{"id":"applying-filters","name":"Applying Filters","description":"Filters must be applied after any of `select()`, `update()`, `upsert()`,\n`delete()`, and `rpc()` and before\n[modifiers](/docs/reference/swift/using-modifiers).\n","code":"```swift\ntry await supabase\n  .from(\"cities\")\n  .select(\"name, country_id\")\n  .eq(\"name\", value: \"The Shire\")    // Correct\n\ntry await supabase\n  .from(\"citites\")\n  .eq(\"name\", value: \"The Shire\")    // Incorrect\n  .select(\"name, country_id\")\n```\n"},{"id":"chaining-filters","name":"Chaining","description":"Filters can be chained together to produce advanced queries. For example,\nto query cities with population between 1,000 and 10,000:\n","code":"```swift\ntry await supabase\n  .from(\"cities\")\n  .select(\"name, country_id\")\n  .gte(\"population\", value: 1000)\n  .lt(\"population\", value: 10000)\n```\n"},{"id":"conditional-chaining","name":"Conditional Chaining","description":"Filters can be built up one step at a time and then executed.\n","code":"```swift\nlet filterByName: String? = nil\nlet filterPopLow: Int? = 1000\nlet filterPopHigh: Int? = 10000\n\nvar query = await supabase\n  .from(\"cities\")\n  .select(\"name, country_id\")\n\nif let filterByName {\n  query = query.eq(\"name\", value: filterByName)\n}\nif let filterPopLow {\n  query = query.gte(\"population\", value: filterPopLow)\n}\nif let filterPopHigh {\n  query = query.lt(\"population\", value: filterPopHigh)\n}\n\nstruct Response: Decodable {\n  // expected fields\n}\nlet result: Response = try await query.execute().value\n```\n"},{"id":"filter-by-value-within-json-column","name":"Filter by values within a JSON column","code":"```swift\ntry await supabase\n  .from(\"users\")\n  .select()\n  .eq(\"address->postcode\", value: 90210)\n```\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\ninsert into\n  users (id, name, address)\nvalues\n  (1, 'Michael', '{ \"postcode\": 90210 }'),\n  (2, 'Jane', null);\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Michael\",\n      \"address\": {\n        \"postcode\": 90210\n      }\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n"},{"id":"filter-foreign-tables","name":"Filter Foreign Tables","code":"```swift\ntry await supabase\n  .from(\"orchestral_sections\")\n  .select(\n    \"\"\"\n      name,\n      instruments!inner (\n        name\n      )\n    \"\"\"\n  )\n  .eq(\"instruments.name\", value: \"flute\")\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n","response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"woodwinds\",\n      \"instruments\": [\n        {\n          \"name\": \"flute\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n"},"description":"You can filter on foreign tables in your `select()` query using dot\nnotation.\n"}]},{"id":"or","title":"or()","notes":"or() expects you to use the raw PostgREST syntax for the filter names and values.\n\n```swift\n.or(#\"id.in.(5,6,7), arraycol.cs.{\"a\",\"b\"}\"#)  // Use `()` for `in` filter, `{}` for array values and `cs` for `contains()`.\n.or(#\"id.in.(5,6,7), arraycol.cd.{\"a\",\"b\"}\"#)  // Use `cd` for `containedBy()`\n```\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"instruments\")\n  .select(\"name\")\n  .or(\"id.eq.2,name.eq.cello\")\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"viola\"\n    },\n    {\n      \"name\": \"cello\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"use-or-with-and","name":"Use `or` with `and`","code":"```swift\ntry await supabase\n  .from(\"instruments\")\n  .select(\"name\")\n  .or(\"id.gt.3,and(id.eq.1,name.eq.violin)\")\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"reponse":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"violin\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true}]},{"id":"not","title":"not()","description":"Finds all rows that don't satisfy the filter.\n","notes":"- `.not()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for the filter names and values.\n\n  ```swift\n  .not(\"name\", operator: .eq, value: \"violin\")\n  .not(\"arraycol\", operator: .cs, value: #\"{\"a\",\"b\"}\"#) // Use Postgres array {} for array column and 'cs' for contains.\n  .not(\"rangecol\", operator: .cs, value: \"(1,2]\") // Use Postgres range syntax for range column.\n  .not(\"id\", operator: .in, value: \"(6,7)\")  // Use Postgres list () and 'in' for in_ filter.\n  .not(\"id\", operator: .in, value: \"(\\(mylist.join(separator: \",\")))\")  // You can insert a Swift list array.\n  ```\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```swift\ntry await supabase\n  .from(\"instruments\")\n  .select()\n  .not(\"name\", operator: .is, value: \"\")\n  .execute()\n```\n"}]},{"id":"match","title":"match()","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"instruments\")\n  .select(\"name\")\n  .match([\"id\": 2, \"name\": \"viola\"])\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"viola\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"filter","title":"filter()","notes":"filter() expects you to use the raw PostgREST syntax for the filter values.\n\n```swift\n.filter(\"id\", operator: \"in\", value: \"(5,6,7)\")  // Use `()` for `in` filter\n.filter(\"arraycol\", operator: \"cs\", value: #\"{\"a\",\"b\"}\"#)  // Use `cs` for `contains()`, `{}` for array values\n```\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"instruments\")\n  .select()\n  .filter(\"name\", operator: \"in\", value: #\"(\"cello\",\"guzheng\")\"#)\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 3,\n      \"name\": \"cello\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-a-foreign-table","name":"On a foreign table","code":"```swift\ntry await supabase\n  .from(\"orchestral_sections\")\n  .select(\n    \"\"\"\n      name,\n      instruments!inner (\n        name\n      )\n    \"\"\"\n  )\n  .filter(\"instruments.name\", operator: \"eq\", value: \"flute\")\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"woodwinds\",\n      \"cities\": [\n        {\n          \"name\": \"flute\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true}]},{"id":"eq","title":"eq()","description":"Match only rows where `column` is equal to `value`.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"cities\")\n  .select(\"name, country_id\")\n  .eq(\"name\", value: \"The shire\")\n```\n","response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"The shire\",\n      \"country_id\": 554\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n"}]},{"id":"neq","title":"neq()","description":"Match only rows where `column` is not equal to `value`.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"cities\")\n  .select(\"name, country_id\")\n  .neq(\"name\", value: \"Paris\")\n```\n"}]},{"id":"gt","title":"gt()","description":"Match only rows where `column` is greater than `value`.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"cities\")\n  .select(\"name, country_id\")\n  .gt(\"country_id\", value: 250)\n```\n"}]},{"id":"gte","title":"gte()","description":"Match only rows where `column` is greater than or equal to `value`.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"cities\")\n  .select(\"name, country_id\")\n  .gte(\"country_id\", value: 250)\n```\n"}]},{"id":"lt","title":"lt()","description":"Match only rows where `column` is less than `value`.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"cities\")\n  .select(\"name, country_id\")\n  .lt(\"country_id\", value: 250)\n```\n"}]},{"id":"lte","title":"lte()","description":"Match only rows where `column` is less than or equal to `value`.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"cities\")\n  .select(\"name, country_id\")\n  .lte(\"country_id\", value: 250)\n```\n"}]},{"id":"like","title":"like()","description":"Match only rows where `column` matches `pattern` case-sensitively.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"cities\")\n  .select(\"name, country_id\")\n  .like(\"name\", pattern: \"%la%\")\n```\n"}]},{"id":"ilike","title":"ilike()","description":"Match only rows where `column` matches `pattern` case-insensitively.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"cities\")\n  .select(\"name, country_id\")\n  .ilike(\"name\", pattern: \"%la%\")\n```\n"}]},{"id":"is","title":"is()","description":"Match only rows where `column` IS `value`. For non-null values, this is equivalent to the `eq` filter. For null values, use this instead of `eq`.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"cities\")\n  .select(\"name, country_id\")\n  .is(\"name\", value: nil)\n```\n"}]},{"id":"in","title":"in()","description":"Match only rows where `column` is included in the `values` array.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"cities\")\n  .select(\"name, country_id\")\n  .in(\"name\", values: [\"Rio de Janeiro\", \"San Francisco\"])\n```\n"}]},{"id":"contains","title":"contains()","description":"Match only rows where `column` contains every element appearing in `value`.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"cities\")\n  .select(\"name, main_exports\")\n  .contains(\"main_exports\", value: [\"oil\"])\n```\n"}]},{"id":"containedBy","title":"containedBy()","description":"Match only rows where every element in `column` appears in `value`.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"cities\")\n  .select(\"name, main_exports\")\n  .containedBy(\"main_exports\", value: [\"cars\", \"food\", \"machine\"])\n```\n"}]},{"id":"overlaps","title":"overlaps()","description":"Match only rows where `column` and `value` have an element in common.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"cities\")\n  .select(\"name, main_exports\")\n  .overlaps(\"main_exports\", value: [\"exports\", \"tourism\"])\n```\n"}]},{"id":"rangeLt","title":"rangeLt()","description":"Match only rows where every element in `column` is less than any element in `value`.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"reservations\")\n  .select()\n  .rangeLt(\"during\", value: \"[2000-01-02 08:30, 2000-01-02 09:30)\")\n```\n"}]},{"id":"rangeGt","title":"rangeGt()","description":"Match only rows where every element in `column` is greater than any element in `value`.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"reservations\")\n  .select()\n  .rangeGt(\"during\", value: \"[2000-01-02 08:30, 2000-01-02 09:30)\")\n```\n"}]},{"id":"rangeGte","title":"rangeGte()","description":"Match only rows where every element in `column` is either contained in `value` or greater than any element in `value`.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"reservations\")\n  .select()\n  .rangeGte(\"during\", value: \"[2000-01-02 08:30, 2000-01-02 09:30)\")\n```\n"}]},{"id":"rangeLte","title":"rangeLte()","description":"Match only rows where every element in `column` is either contained in `value` or less than any element in `value`.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"reservations\")\n  .select()\n  .rangeLte(\"during\", value: \"[2000-01-02 08:30, 2000-01-02 09:30)\")\n```\n"}]},{"id":"rangeAdjacent","title":"rangeAdjacent()","description":"Match only rows where `column` is adjacent to the `value` range.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"reservations\")\n  .select()\n  .rangeAdjacent(\"during\", value: \"[2000-01-02 08:30, 2000-01-02 09:30)\")\n```\n"}]},{"id":"textSearch","title":"textSearch()","description":"Match only rows where `column` matches the query string in `query`.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"quotes\")\n  .select(\"catchphrase\")\n  .textSearch(\"catchphrase\", query: \"'fat' & 'cat'\", config: \"english\")\n```\n"}]},{"id":"using-modifiers","title":"Using Modifiers","description":"Filters work on the row levelâ€”they allow you to return rows that\nonly match certain conditions without changing the shape of the rows.\nModifiers are everything that don't fit that definitionâ€”allowing you to\nchange the format of the response (e.g. returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for\nqueries that return rows (e.g., `select()` or `rpc()` on a function that\nreturns a table response).\n"},{"id":"db-modifiers-select","title":"select()","description":"Perform a SELECT on the query result.\n","examples":[{"id":"with-upsert","name":"With `upsert()`","code":"```swift\n  try await supabase\n    .from(\"instruments\")\n    .upsert(InstrumentModel(id: 1, name: \"piano\"))\n    .select()\n    .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'harpsichord');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"piano\"\n    }\n  ],\n  \"status\": 201,\n  \"statusText\": \"Created\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"order","title":"order()","description":"Order the query result by column.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"instruments\")\n  .select(\"id, name\")\n  .order(\"id\", ascending: false)\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```swifton\n{\n  \"data\": [\n    {\n      \"id\": 3,\n      \"name\": \"cello\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"viola\"\n    },\n    {\n      \"id\": 1,\n      \"name\": \"viola\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-a-foreign-table","name":"On a foreign table","code":"```swift\n  try await supabase\n    .from(\"orchestral_sections\")\n    .select(\n      \"\"\"\n        name,\n        instruments (\n          name\n        )\n      \"\"\"\n    )\n    .order(\"name\", ascending: false, referencedTable: \"instruments\")\n    .execute()\n  ```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 1, 'harp'),\n  (2, 1, 'violin');\n```\n"},"response":"```swifton\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"cities\": [\n        {\n          \"name\": \"violin\"\n        },\n        {\n          \"name\": \"harp\"\n        }\n      ]\n    },\n    {\n      \"name\": \"woodwinds\",\n      \"cities\": []\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"Ordering on foreign tables doesn't affect the ordering of\nthe parent table.\n","hideCodeBlock":true},{"id":"order-parent-table-by-a-referenced-table","name":"Order parent table by a referenced table","code":"```swift\n  try await supabase\n    .from(\"instruments\")\n    .select(\n      \"\"\"\n        name,\n        section:orchestral_sections (\n          name\n        )\n      \"\"\"\n    )\n    .order(\"section(name)\", ascending: true)\n  ```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 1, 'violin'),\n  (2, 2, 'flute');\n```\n"},"response":"```swifton\n{\n  \"data\": [\n    {\n      \"name\": \"violin\",\n      \"country\": { \"name\": \"strings\" }\n    },\n    {\n      \"name\": \"flute\",\n      \"country\": { \"name\": \"woodwinds\" }\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"Ordering with `referenced_table(col)` affects the ordering of the\nparent table.\n","hideCodeBlock":true}]},{"id":"limit","title":"limit()","description":"Limit the query result by count.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"instruments\")\n  .select(\"id, name\")\n  .limit(1)\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"violin\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true},{"id":"on-a-foreign-table","name":"On a foreign table","code":"```swift\ntry await supabase\n  .from(\"orchestral_sections\")\n  .select(\n    \"\"\"\n    name,\n    instruments (\n      name\n    )\n    \"\"\"\n  )\n  .limit(1, referencedTable: \"instruments\")\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 1, 'flute'),\n  (2, 1, 'oboe');\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"woodwinds\",\n      \"cities\": [\n        {\n          \"name\": \"flute\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true}]},{"id":"range","title":"range()","description":"Limit the query result by from and to inclusively.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"instruments\")\n  .select(\"name\")\n  .range(from: 0, to: 1)\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```swifton\n{\n  \"data\": [\n    {\n      \"name\": \"violin\"\n    },\n    {\n      \"name\": \"viola\"\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"max-affected","title":"maxAffected()","description":"Set the maximum number of rows that can be affected by the query.\n\nOnly available in PostgREST v13+ and only works with PATCH, DELETE methods and RPC calls.\n","notes":"- This method sets `handling=strict` and `max-affected=<value>` headers for row limit enforcement.\n- Only use with UPDATE (PATCH), DELETE operations, or RPC calls that modify data.\n- If the query would affect more rows than specified, PostgREST will return an error.\n- This is useful for preventing accidental bulk updates or deletes.\n","examples":[{"id":"with-update","name":"With `update()`","code":"```swift\ntry await supabase\n  .from(\"users\")\n  .update([\"status\": \"active\"])\n  .eq(\"id\", value: 1)\n  .maxAffected(1)\n  .execute()\n```\n","description":"Ensure that only one row is updated. If the query would update more than one row, an error is returned.\n","isSpotlight":true},{"id":"with-delete","name":"With `delete()`","code":"```swift\ntry await supabase\n  .from(\"users\")\n  .delete()\n  .in(\"id\", values: [1, 2, 3])\n  .maxAffected(3)\n  .execute()\n```\n","description":"Ensure that only three rows are deleted. If the query would delete more than three rows, an error is returned.\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```swift\ntry await supabase\n  .rpc(\"delete_inactive_users\")\n  .maxAffected(10)\n  .execute()\n```\n","description":"Ensure that the RPC call affects at most 10 rows. Useful for limiting the impact of stored procedures.\n"}]},{"id":"single","title":"single()","description":"By default PostgREST returns all JSON results in an array, even when there is only one item, use `single()` to return the first object unenclosed by an array.\n","examples":[{"id":"with-select","name":"With `select()`","code":"```swift\ntry await supabase\n  .from(\"instruments\")\n  .select(\"name\")\n  .limit(1)\n  .single()\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```json\n{\n  \"data\": {\n    \"name\": \"violin\"\n  },\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"csv","title":"csv()","examples":[{"id":"return-data-as-csv","name":"Return data as CSV","code":"```swift\ntry await supabase\n  .from(\"instruments\")\n  .select()\n  .csv()\n  .execute()\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```json\n{\n  \"data\": \"id,name\\n1,violin\\n2,viola\\n3,cello\",\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","description":"By default, the data is returned in JSON format, but can also be returned as Comma Separated Values.\n","hideCodeBlock":true,"isSpotlight":true}]},{"id":"explain","title":"Using Explain","description":"For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query\nusing the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database.\nIt's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n","examples":[{"id":"get-execution-plan","name":"Get the execution plan","code":"```swift\ntry await supabase\n  .from(\"instruments\")\n  .select()\n  .explain()\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```\nAggregate  (cost=33.34..33.36 rows=1 width=112)\n  ->  Limit  (cost=0.00..18.33 rows=1000 width=40)\n        ->  Seq Scan on instruments  (cost=0.00..22.00 rows=1200 width=40)\n```\n","description":"By default, the data is returned in TEXT format, but can also be returned as JSON by using the `format` parameter.\n","hideCodeBlock":true,"isSpotlight":true},{"id":"get-execution-plan-with-analyze-and-verbose","name":"Get the execution plan with analyze and verbose","code":"```swift\ntry await supabase\n  .from(\"instruments\")\n  .select()\n  .explain(\n    analyze: true,\n    verbose: true\n  )\n  .execute()\n  .value\n```\n","data":{"sql":"```sql\ncreate table\n  instruments (id int8 primary key, name text);\n\ninsert into\n  instruments (id, name)\nvalues\n  (1, 'violin'),\n  (2, 'viola'),\n  (3, 'cello');\n```\n"},"response":"```\nAggregate  (cost=33.34..33.36 rows=1 width=112) (actual time=0.041..0.041 rows=1 loops=1)\n  Output: NULL::bigint, count(ROW(instruments.id, instruments.name)), COALESCE(json_agg(ROW(instruments.id, instruments.name)), '[]'::json), NULLIF(current_setting('response.headers'::text, true), ''::text), NULLIF(current_setting('response.status'::text, true), ''::text)\n  ->  Limit  (cost=0.00..18.33 rows=1000 width=40) (actual time=0.005..0.006 rows=3 loops=1)\n        Output: instruments.id, instruments.name\n        ->  Seq Scan on public.instruments  (cost=0.00..22.00 rows=1200 width=40) (actual time=0.004..0.005 rows=3 loops=1)\n              Output: instruments.id, instruments.name\nQuery Identifier: -4730654291623321173\nPlanning Time: 0.407 ms\nExecution Time: 0.119 ms\n```\n","description":"By default, the data is returned in TEXT format, but can also be returned as JSON by using the `format` parameter.\n","hideCodeBlock":true,"isSpotlight":false}]},{"id":"invoke","title":"invoke()","description":"Invoke a Supabase Edge Function.\n","notes":"- Requires an Authorization header.\n- When you pass in a body to your function, we automatically attach the Content-Type header for `String`, and `Data`. If it doesn't match any of these types we assume the payload is `json`, serialize it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.\n- When a region is specified, both the `x-region` header and `forceFunctionRegion` query parameter are set to ensure proper function routing.\n","examples":[{"id":"invocation-with-decodable","name":"Invocation with `Decodable` response","isSpotlight":true,"code":"```swift\nstruct Response: Decodable {\n  // Expected response definition\n}\n\nlet response: Response = try await supabase.functions\n  .invoke(\n    \"hello\",\n    options: FunctionInvokeOptions(\n      body: [\"foo\": \"bar\"]\n    )\n  )\n```\n"},{"id":"invocation-with-custom-response","name":"Invocation with custom response","isSpotlight":true,"code":"```swift\nlet response = try await supabase.functions\n  .invoke(\n    \"hello\",\n    options: FunctionInvokeOptions(\n      body: [\"foo\": \"bar\"]\n    ),\n    decode: { data, response in\n      String(data: data, encoding: .utf8)\n    }\n  )\n\nprint(type(of: response)) // String?\n```\n"},{"id":"invocation-with-streamed-response","name":"Invocation with streamed response","description":"- Use this method to return an `AsyncStream<Data>` when the function returns `Content-Type` = `text/event-stream`.\n","isSpotlight":true,"code":"```swift\nvar response = Data()\nfor try await data try await supabase.functions._invokeWithStreamedResponse(\"hello\") {\n  response.append(data)\n}\n```\n"},{"id":"error-handling","name":"Error handling","description":"A `FunctionsError` error is returned if your function throws an error, `FunctionsRelayError` if the Supabase Relay has an error processing your function and `FunctionsFetchError` if there is a network error in calling your function.\n  - `httpError(code: Int, data: Data)` in case a non-2xx status code is returned by the edge function.\n  - `relayError` in case the Supabase Relay has an error processing your function.\n","isSpotlight":true,"code":"```swift\n\ndo {\n  let response = try await supabase.functions\n    .invoke(\n      \"hello\",\n      options: FunctionInvokeOptions(\n        body: [\"foo\": \"bar\"]\n      )\n    )\n} catch FunctionsError.httpError(let code, let data) {\n  print(\"Function returned code \\(code) with response \\(String(data: data, encoding: .utf8) ?? \"\")\")\n} catch FunctionsError.relayError {\n  print(\"Relay error\")\n} catch {\n  print(\"Other error: \\(error.localizedDescription)\")\n}\n```\n"},{"id":"passing-custom-headers","name":"Passing custom headers","description":"You can pass custom headers to your function. Note: supabase-js automatically passes the `Authorization` header with the signed in user's JWT.\n","isSpotlight":true,"code":"```swift\nlet response = try await supabase.functions\n  .invoke(\n    \"hello\",\n    options: FunctionInvokeOptions(\n      headers: [\n        \"my-custom-header\": \"my-custom-header-value\"\n      ]\n    )\n  )\n```\n"},{"id":"regional-invocation","name":"Invoking a Function in the UsEast1 region","description":"Here are the available regions:\n- `FunctionRegion.any`\n- `FunctionRegion.apNortheast1`\n- `FunctionRegion.apNortheast2`\n- `FunctionRegion.apSouth1`\n- `FunctionRegion.apSoutheast1`\n- `FunctionRegion.apSoutheast2`\n- `FunctionRegion.caCentral1`\n- `FunctionRegion.euCentral1`\n- `FunctionRegion.euWest1`\n- `FunctionRegion.euWest2`\n- `FunctionRegion.euWest3`\n- `FunctionRegion.saEast1`\n- `FunctionRegion.usEast1`\n- `FunctionRegion.usWest1`\n- `FunctionRegion.usWest2`\n","isSpotlight":true,"code":"```swift\nlet response = try await supabase.functions\n  .invoke(\n    \"hello\",\n    options: FunctionInvokeOptions(\n      body: [\"foo\": \"bar\"],\n      region: .usEast1\n    )\n  )\n```\n"},{"id":"calling-with-delete-verb","name":"Calling with DELETE HTTP verb","description":"You can also set the HTTP verb to `DELETE` when calling your Edge Function.\n","isSpotlight":true,"code":"```swift\nlet response = try await supabase.functions\n  .invoke(\n    \"hello\",\n    options: FunctionInvokeOptions(\n      method: .delete,\n      headers: [\n        \"my-custom-header\": \"my-custom-header-value\"\n      ],\n      body: [\"foo\": \"bar\"]\n    )\n  )\n```\n"},{"id":"calling-with-get-verb","name":"Calling with GET HTTP verb","description":"You can also set the HTTP verb to `GET` when calling your Edge Function.\n","isSpotlight":true,"code":"```swift\nlet response = try await supabase.functions\n  .invoke(\n    \"hello\",\n    options: FunctionInvokeOptions(\n      method: .get,\n      headers: [\n        \"my-custom-header\": \"my-custom-header-value\"\n      ]\n    )\n  )\n```\n"},{"id":"additional-query-params","name":"Pass additional query params","description":"You can pass additional query params when invoking a function.\n","isSpotlight":true,"code":"```swift\nlet response = try await supabase.functions\n  .invoke(\n    \"hello\",\n    options: FunctionInvokeOptions(\n      query: [URLQueryItem(name: \"key\", value: \"value\")]\n    )\n  )\n```\n"}]},{"id":"subscribe","title":"on().subscribe()","notes":"- By default, Broadcast and Presence are enabled for all projects.\n- By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's [replication](/docs/guides/api#realtime-api-overview).\n- You can receive the \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL` (e.g., `ALTER TABLE your_table REPLICA IDENTITY FULL;`).\n- Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n- Use AsyncStream or callbacks for listening to changes.\n","examples":[{"id":"listen-to-broadcast","name":"Listen to broadcast messages","isSpotlight":true,"code":"```swift\nlet channel = supabase.channel(\"room1\")\n\nlet broadcastStream = channel.broadcastStream(event: \"cursor-pos\")\n\nawait channel.subscribe()\n\nTask {\n  for await message in broadcastStream {\n    print(\"Cursor position received\", message)\n  }\n}\n\nawait channel.broadcast(\n  event: \"cursor-pos\",\n  message: [\n    \"x\": .double(.random(in: 0...1)),\n    \"y\": .double(.random(in: 0...1))\n  ]\n)\n```\n"},{"id":"listen-to-broadcast-callback","name":"Listen to broadcast messages using callback","isSpotlight":true,"code":"```swift\nlet channel = supabase.channel(\"room1\")\n\nlet subscription = channel.onBroadcast(event: \"cursor-pos\") { message in\n  print(\"Cursor position received\", message)\n}\n\nawait channel.subscribe()\n\nawait channel.broadcast(\n  event: \"cursor-pos\",\n  message: [\n    \"x\": .double(.random(in: 0...1)),\n    \"y\": .double(.random(in: 0...1))\n  ]\n)\n\n// remove subscription some time later\nsubscription.cancel()\n```\n"},{"id":"broadcast-with-replay","name":"Configure broadcast with replay","description":"Replay allows you to receive messages that were broadcast since a specific timestamp. The `meta` field in the message payload will indicate if a message is being replayed.\n","isSpotlight":false,"code":"```swift\nlet config = RealtimeJoinConfig(\n  broadcast: BroadcastJoinConfig(\n    acknowledgeBroadcasts: true,\n    receiveOwnBroadcasts: true,\n    replay: ReplayOption(\n      since: 1234567890,\n      limit: 100\n    )\n  )\n)\n\nlet channel = supabase.channel(\"my-channel\", config: config)\n\nchannel.onBroadcast { message in\n  if let meta = message.payload[\"meta\"] as? [String: Any],\n     let replayed = meta[\"replayed\"] as? Bool,\n     replayed {\n    print(\"Replayed message: \\(meta[\"id\"] ?? \"\")\")\n  }\n}\n\nawait channel.subscribe()\n```\n"},{"id":"listen-to-presence-updates","name":"Listen to presence updates","code":"```swift\nstruct PresenceState: Codable {\n  let username: String\n}\n\nlet channel = supabase.channel(\"channelId\")\n\nlet presenceChange = channel.presenceChange()\n\nawait channel.subscribe()\n\nTask {\n  for await presence in presenceChange {\n    let joins = try presence.decodeJoins(as: PresenceState.self)\n    let leaves = try presence.decodeLeaves(as: PresenceState.self)\n  }\n}\n\n// Send your own state\ntry await channel.track(PresenceState(username: \"John\"))\n"},{"id":"listen-to-presence-updates-callback","name":"Listen to presence updates using callback","code":"```swift\nstruct PresenceState: Codable {\n  let username: String\n}\n\nlet channel = supabase.channel(\"channelId\")\n\nlet subscription = channel.onPresenceChange() { presence in\n  do {\n    let joins = try presence.decodeJoins(as: PresenceState.self)\n    let leaves = try presence.decodeLeaves(as: PresenceState.self)\n  } catch {\n    // Handle decoding error\n  }\n}\n\nawait channel.subscribe()\n\n// Send your own state\ntry await channel.track(PresenceState(username: \"John\"))\n\n// remove subscription some time later\nsubscription.cancel()\n```\n"},{"id":"listen-to-all-database-changes","name":"Listen to all database changes","code":"```swift\nlet channel = supabase.channel(\"channelId\")\n\nlet changeStream = channel.postgresChange(AnyAction.self, schema: \"public\")\n\nawait channel.subscribe()\n\nfor await change in changeStream {\n  switch change {\n  case .delete(let action): print(\"Deleted: \\(action.oldRecord)\")\n  case .insert(let action): print(\"Inserted: \\(action.record)\")\n  case .select(let action): print(\"Selected: \\(action.record)\")\n  case .update(let action): print(\"Updated: \\(action.oldRecord) with \\(action.record)\")\n  }\n}\n```\n"},{"id":"listen-to-all-database-changes-callback","name":"Listen to all database changes using callback","code":"```swift\nlet channel = supabase.channel(\"channelId\")\n\nlet subscription = channel.onPostgresChange(AnyAction.self, schema: \"public\") { change in\n  switch change {\n  case .delete(let action): print(\"Deleted: \\(action.oldRecord)\")\n  case .insert(let action): print(\"Inserted: \\(action.record)\")\n  case .select(let action): print(\"Selected: \\(action.record)\")\n  case .update(let action): print(\"Updated: \\(action.oldRecord) with \\(action.record)\")\n  }\n}\n\nawait channel.subscribe()\n\n// remove subscription some time later\nsubscription.cancel()\n```\n"},{"id":"listen-to-a-specific-table","name":"Listen to a specific table","code":"```swift\nlet channel = supabase.channel(\"channelId\")\n\nlet changeStream = channel.postgresChange(\n  AnyAction.self,\n  schema: \"public\",\n  table: \"users\"\n)\n\nawait channel.subscribe()\n\nfor await change in changeStream {\n  switch change {\n    case .delete(let action): print(\"Deleted: \\(action.oldRecord)\")\n    case .insert(let action): print(\"Inserted: \\(action.record)\")\n    case .select(let action): print(\"Selected: \\(action.record)\")\n    case .update(let action): print(\"Updated: \\(action.oldRecord) with \\(action.record)\")\n  }\n}\n```\n"},{"id":"listen-to-a-specific-table-callback","name":"Listen to a specific table using callback","code":"```swift\nlet channel = supabase.channel(\"channelId\")\n\nlet subscription = channel.onPostgresChange(\n  AnyAction.self,\n  schema: \"public\",\n  table: \"users\"\n) { change in\n  switch change {\n  case .delete(let action): print(\"Deleted: \\(action.oldRecord)\")\n  case .insert(let action): print(\"Inserted: \\(action.record)\")\n  case .select(let action): print(\"Selected: \\(action.record)\")\n  case .update(let action): print(\"Updated: \\(action.oldRecord) with \\(action.record)\")\n  }\n}\n\nawait channel.subscribe()\n\n// remove subscription some time later\nsubscription.cancel()\n```\n"},{"id":"listen-to-inserts","name":"Listen to inserts","code":"```swift\nlet channel = supabase.channel(\"channelId\")\n\nlet insertions = channel.postgresChange(\n  InsertAction.self,\n  schema: \"public\",\n  table: \"users\"\n)\n\nawait channel.subscribe()\n\nfor await insert in insertions {\n  print(\"Inserted: \\(insert.record)\")\n}\n```\n"},{"id":"listen-to-inserts-callback","name":"Listen to inserts using callback","code":"```swift\nlet channel = supabase.channel(\"channelId\")\n\nlet subscription = channel.onPostgresChange(\n  InsertAction.self,\n  schema: \"public\",\n  table: \"users\"\n) { insert in\n  print(\"Inserted: \\(insert.record)\")\n}\n\nawait channel.subscribe()\n\n// remove subscription some time later\nsubscription.cancel()\n```\n"},{"id":"listen-to-updates","name":"Listen to updates","description":"By default, Supabase will send only the updated record. If you want to receive the previous values as well you can\nenable full replication for the table you are listening too:\n\n```sql\nalter table \"your_table\" replica identity full;\n```\n","code":"```swift\n let channel = supabase.channel(\"channelId\")\n\n let updates = channel.postgresChange(\n   UpdateAction.self,\n   schema: \"public\",\n   table: \"users\"\n )\n\n await channel.subscribe()\n\n for await update in updates {\n   print(\"Updated: \\(update.oldRecord) with \\(update.record)\")\n }\n ```\n"},{"id":"listen-to-updates-callback","name":"Listen to updates using callback","description":"By default, Supabase will send only the updated record. If you want to receive the previous values as well you can\nenable full replication for the table you are listening too:\n\n```sql\nalter table \"your_table\" replica identity full;\n```\n","code":"```swift\n let channel = supabase.channel(\"channelId\")\n\n let subscription = channel.onPostgresChange(\n   UpdateAction.self,\n   schema: \"public\",\n   table: \"users\"\n ) { update in\n  print(\"Updated: \\(update.oldRecord) with \\(update.record)\")\n }\n\n await channel.subscribe()\n\n // remove subscription some time later\nsubscription.cancel()\n ```\n"},{"id":"listen-to-deletes","name":"Listen to deletes","description":"By default, Supabase does not send deleted records. If you want to receive the deleted record you can\nenable full replication for the table you are listening too:\n\n```sql\nalter table \"your_table\" replica identity full;\n```\n","code":"```swift\nlet channel = supabase.channel(\"channelId\")\n\nlet deletions = channel.postgresChange(\n  DeleteAction.self,\n  schema: \"public\",\n  table: \"users\"\n)\n\nawait channel.subscribe()\n\nfor await deletion in deletions {\n  print(\"Deleted: \\(deletion.oldRecord)\")\n}\n```\n"},{"id":"listen-to-deletes-callback","name":"Listen to deletes using callback","description":"By default, Supabase does not send deleted records. If you want to receive the deleted record you can\nenable full replication for the table you are listening too:\n\n```sql\nalter table \"your_table\" replica identity full;\n```\n","code":"```swift\nlet channel = supabase.channel(\"channelId\")\n\nlet subscription = channel.onPostgresChange(\n  DeleteAction.self,\n  schema: \"public\",\n  table: \"users\"\n) { deletion in\n  print(\"Deleted: \\(deletion.oldRecord)\")\n}\n\nawait channel.subscribe()\n\n// remove subscription some time later\nsubscription.cancel()\n```\n"},{"id":"listening-to-row-level-changes","name":"Listen to row level changes","code":"```swift\nlet channel = supabase.channel(\"channelId\")\n\nlet deletions = channel.postgresChange(\n  DeleteAction.self,\n  schema: \"public\",\n  table: \"users\",\n  filter: .eq(id, value: 1)\n)\n\nawait channel.subscribe()\n\nfor await deletion in deletions {\n  print(\"Deleted: \\(deletion.oldRecord)\")\n}\n```\n"},{"id":"listening-to-row-level-changes-callback","name":"Listen to row level changes using callback","code":"```swift\nlet channel = supabase.channel(\"channelId\")\n\nlet subscription = channel.onPostgresChange(\n  DeleteAction.self,\n  schema: \"public\",\n  table: \"users\",\n  filter: .eq(id, value: 1)\n) { deletion in\n  print(\"Deleted: \\(deletion.oldRecord)\")\n}\n\nawait channel.subscribe()\n\n// remove subscription some time later\nsubscription.cancel()\n```\n"}]},{"id":"remove-channel","description":"Unsubscribes and removes Realtime channel from Realtime client.\n","title":"removeChannel()","notes":"- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes.\n- Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n- If you removed all channels, the client automatically disconnects from the Realtime websocket. This can be disabled in the Realtime config by setting `disconnectOnNoSubscriptions` to false.\n","examples":[{"id":"removes-a-channel","name":"Remove a channel","isSpotlight":true,"code":"```swift\nlet channel = supabase.channel(\"channelId\")\n\n//...\nawait supabase.removeChannel(channel)\n```\n"},{"id":"unsubscribe-channel","name":"Unsubscribe from a channel","isSpotlight":true,"code":"```swift\nlet channel = supabase.channel(\"channelId\")\n\n//...\nawait channel.unsubscribe()\n```\n"}]},{"id":"remove-all-channels","title":"removeAllChannels()","$ref":"@supabase/supabase-js.index.SupabaseClient.removeAllChannels","notes":"Unsubscribes and removes all Realtime channels from Realtime client.\n- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n- If you removed all channels, the client automatically disconnects from the Realtime websocket. This can be disabled in the Realtime config by setting `disconnectOnNoSubscriptions` to false.\n","examples":[{"id":"remove-all-channels","name":"Remove all channels","isSpotlight":true,"code":"```swift\nawait supabase.removeAllChannels()\n```\n"}]},{"id":"get-channels","title":"getChannels()","$ref":"@supabase/supabase-js.index.SupabaseClient.getChannels","notes":"Returns all Realtime channels.\n","examples":[{"id":"get-all-channels","name":"Get all channels","isSpotlight":true,"code":"```swift\nlet channels = supabase.channels\n```\n"}]},{"id":"list-buckets","title":"listBuckets()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"list-buckets","name":"List buckets","isSpotlight":true,"code":"```swift\ntry await supabase.storage\n  .listBuckets()\n```\n"}]},{"id":"get-bucket","title":"getBucket()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"get-bucket","name":"Get bucket","isSpotlight":true,"code":"```swift\nlet bucket = try await supabase.storage\n  .getBucket(\"avatars\")\n```\n"}]},{"id":"create-bucket","title":"createBucket()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `insert`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"create-bucket","name":"Create bucket","isSpotlight":true,"code":"```swift\ntry await supabase.storage\n  .createBucket(\n    \"avatars\",\n    options: BucketOptions(\n      public: false,\n      allowedMimeTypes: [\"image/png\"],\n      fileSizeLimit: 1024\n    )\n  )\n```\n"}]},{"id":"empty-bucket","title":"emptyBucket()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select`\n  - `objects` table permissions: `select` and `delete`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"empty-bucket","name":"Empty bucket","isSpotlight":true,"code":"```swift\ntry await supabase.storage\n  .emptyBucket(\"avatars\")\n```\n"}]},{"id":"update-bucket","title":"updateBucket()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `update`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"update-bucket","name":"Update bucket","isSpotlight":true,"code":"```swift\ntry await supabase.storage\n  .updateBucket(\n    \"avatars\",\n    options: BucketOptions(\n      public: false,\n      fileSizeLimit: 1024,\n      allowedMimeTypes: [\"image/png\"]\n    )\n  )\n```\n"}]},{"id":"delete-bucket","title":"deleteBucket()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: `select` and `delete`\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"delete-bucket","name":"Delete bucket","isSpotlight":true,"code":"```swift\ntry await supabase.storage\n  .deleteBucket(\"avatars\")\n```\n"}]},{"id":"from-upload","title":"from.upload()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: only `insert` when you are uploading new files and `select`, `insert` and `update` when you are upserting files\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"upload-file","name":"Upload file","isSpotlight":true,"code":"```swift\nlet fileName = \"avatar1.png\"\n\ntry await supabase.storage\n  .from(\"avatars\")\n  .upload(\n    path: \"public/\\(fileName)\",\n    file: fileData,\n    options: FileOptions(\n      cacheControl: \"3600\",\n      contentType: \"image/png\",\n      upsert: false\n    )\n  )\n```\n"}]},{"id":"from-update","title":"from.update()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"update-file","name":"Update file","isSpotlight":true,"code":"```swift\nlet fileName = \"avatar1.png\"\n\ntry await supabase.storage\n  .from(\"avatars\")\n  .update(\n    path: \"public/\\(fileName)\",\n    file: fileData,\n    options: FileOptions(\n      cacheControl: \"3600\",\n      contentType: \"image/png\",\n      upsert: true\n    )\n  )\n```\n"}]},{"id":"from-move","title":"from.move()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `update` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"move-file","name":"Move file","isSpotlight":true,"code":"```swift\ntry await supabase\n  .storage\n  .from(\"avatars\")\n  .move(from: \"public/avatar1.png\", to: \"private/avatar2.png\")\n```\n"}]},{"id":"from-copy","title":"from.copy()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"copy-file","name":"Copy file","isSpotlight":true,"code":"```swift\ntry await supabase\n  .storage\n  .from(\"avatars\")\n  .copy(from: \"public/avatar1.png\", to: \"private/avatar2.png\")\n```\n"}]},{"id":"from-create-signed-url","title":"from.createSignedUrl()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"create-signed-url","name":"Create Signed URL","isSpotlight":true,"code":"```swift\nlet signedURL = try await supabase.storage\n  .from(\"avatars\")\n  .createSignedURL(path: \"folder/avatar1.png\", expiresIn: 60)\n```\n"},{"id":"create-signed-url-with-transformations","name":"Create a signed URL for an asset with transformations","isSpotlight":true,"code":"```swift\nlet signedURL = try await supabase.storage\n  .from(\"avatars\")\n  .createSignedURL(\n    path: \"folder/avatar1.png\",\n    expiresIn: 60,\n    transform: TransformOptions(\n      width: 100,\n      height: 100\n    )\n  )\n```\n"},{"id":"create-signed-url-with-download","name":"Create a signed URL which triggers the download of the asset","isSpotlight":true,"code":"```swift\nlet signedURL = try await supabase.storage\n  .from(\"avatars\")\n  .createSignedURL(\n    path: \"folder/avatar1.png\", expiresIn: 60,\n    download: true\n  )\n```\n","note":"You can also sepcify a `String` in the `download` parameter to define the file name for the downloaded asset.\n"}]},{"id":"from-create-signed-urls","title":"from.createSignedUrls()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"create-signed-urls","name":"Create Signed URLs","isSpotlight":true,"code":"```swift\nlet urls = try await supabase\n  .storage\n  .from(\"avatars\")\n  .createSignedURLs(paths: [\"folder/avatar1.png\", \"folder/avatar2.png\"], expiresIn: 60)\n```\n"}]},{"id":"from-create-signed-upload-url","title":"from.createSignedUploadURL()","description":"Create a signed upload URL that can be used to upload files to a bucket.\n","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `insert`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"create-signed-upload-url","name":"Create signed upload URL","isSpotlight":true,"code":"```swift\nlet signedUploadUrl = try await supabase.storage\n  .from(\"avatars\")\n  .createSignedUploadURL(path: \"folder/avatar1.png\")\n```\n"},{"id":"create-signed-upload-url-with-options","name":"Create signed upload URL with options","code":"```swift\nlet signedUploadUrl = try await supabase.storage\n  .from(\"avatars\")\n  .createSignedUploadURL(\n    path: \"folder/avatar1.png\",\n    options: CreateSignedUploadURLOptions(\n      upsert: true\n    )\n  )\n```\n"}]},{"id":"from-upload-to-signed-url","title":"from.uploadToSignedUrl()","description":"Upload a file to a bucket using a signed URL.\n","notes":"- Use this method to upload files using a signed upload URL created with `createSignedUploadURL()`.\n","examples":[{"id":"upload-to-signed-url","name":"Upload to signed URL","isSpotlight":true,"code":"```swift\nlet fileData = \"Hello World\".data(using: .utf8)!\n\ntry await supabase.storage\n  .from(\"avatars\")\n  .uploadToSignedURL(\n    \"folder/avatar1.png\",\n    token: \"your-signed-token\",\n    data: fileData,\n    options: FileOptions(\n      contentType: \"text/plain\"\n    )\n  )\n```\n"},{"id":"upload-file-to-signed-url","name":"Upload file from URL to signed URL","code":"```swift\nlet fileURL = URL(fileURLWithPath: \"/path/to/file.txt\")\n\ntry await supabase.storage\n  .from(\"avatars\")\n  .uploadToSignedURL(\n    \"folder/avatar1.png\",\n    token: \"your-signed-token\",\n    fileURL: fileURL,\n    options: FileOptions(\n      contentType: \"text/plain\"\n    )\n  )\n```\n"}]},{"id":"from-get-public-url","title":"from.getPublicUrl()","notes":"- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/javascript/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: none\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"returns-the-url-for-an-asset-in-a-public-bucket","name":"Returns the URL for an asset in a public bucket","isSpotlight":true,"code":"```swift\nlet publicURL = try supabase.storage\n  .from(\"public-bucket\")\n  .getPublicURL(path: \"folder/avatar1.png\")\n```\n"},{"id":"transform-asset-in-public-bucket","name":"Returns the URL for an asset in a public bucket with transformations","isSpotlight":true,"code":"```swift\nlet publicURL = try supabase.storage\n  .from(\"public-bucket\")\n  .getPublicURL(\n    path: \"folder/avatar1.png\",\n    options: TransformOptions(\n      width: 100,\n      height: 100\n    )\n  )\n```\n"},{"id":"download-asset-in-public-bucket","name":"Returns the URL which triggers the download of an asset in a public bucket","isSpotlight":true,"code":"```swift\nlet publicURL = try supabase.storage\n  .from(\"public-bucket\")\n  .getPublicURL(\n    path: \"folder/avatar1.png\",\n    download: true\n  )\n```\n","note":"You can also sepcify a `String` in the `download` parameter to define the file name for the downloaded asset.\n"}]},{"id":"from-download","title":"from.download()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"download-file","name":"Download file","isSpotlight":true,"code":"```swift\nlet data = try await supabase.storage\n  .from(\"avatars\")\n  .download(path: \"folder/avatar1.png\")\n```\n"},{"id":"download-file-with-transformations","name":"Download file with transformations","isSpotlight":true,"code":"```swift\nlet data = try await supabase.storage\n  .from(\"avatars\")\n  .download(\n    path: \"folder/avatar1.png\",\n    options: TransformOptions(\n      width: 100,\n      height: 100,\n      quality: 80\n    )\n  )\n```\n"}]},{"id":"from-remove","title":"from.remove()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `delete` and `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"delete-file","name":"Delete file","isSpotlight":true,"code":"```swift\ntry await supabase.storage\n  .from(\"avatars\")\n  .remove(paths: [\"folder/avatar1.png\"])\n```\n"}]},{"id":"from-list","title":"from.list()","notes":"- RLS policy permissions required:\n  - `buckets` table permissions: none\n  - `objects` table permissions: `select`\n- Refer to the [Storage guide](/docs/guides/storage/security/access-control) on how access control works\n","examples":[{"id":"list-files-in-a-bucket","name":"List files in a bucket","isSpotlight":true,"code":"```swift\nlet files = try await supabase.storage\n  .from(\"avatars\")\n  .list(\n    path: \"folder\",\n    options: SearchOptions(\n      limit: 100,\n      offset: 0,\n      sortBy: SortBy(column: \"name\", order: \"asc\")\n    )\n  )\n```\n"},{"id":"search-files-in-a-bucket","name":"Search files in a bucket","code":"```swift\nlet files = try await supabase.storage\n  .from(\"avatars\")\n  .list(\n    path: \"folder\",\n    options: SearchOptions(\n      limit: 100,\n      offset: 0,\n      sortBy: SortBy(column: \"name\", order: \"asc\"),\n      search: \"jon\"\n    )\n  )\n```\n"}]}]