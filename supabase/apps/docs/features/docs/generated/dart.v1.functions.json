[{"id":"initializing","title":"Initializing","$ref":"@supabase/supabase-js.index.SupabaseClient.constructor","description":"You can initialize Supabase with the static `initialize()` method of `Supabase` class.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality\nand is the easiest way to interact with everything we offer within the Supabase ecosystem.\n","examples":[{"id":"flutter-initialize","name":"For Flutter","code":"```dart\nFuture<void> main() async {\n  await Supabase.initialize(\n    url: 'https://xyzcompany.supabase.co',\n    anonKey: 'publishable-or-anon-key',\n  );\n\n  runApp(MyApp());\n}\n\n// Get a reference your Supabase client\nfinal supabase = Supabase.instance.client;\n```\n"},{"id":"for-other-dart-projects","name":"For other Dart projects","code":"```dart\nfinal supabase = SupabaseClient(\n  'https://xyzcompany.supabase.co',\n  'publishable-or-anon-key',\n);\n```\n"}]},{"id":"sign-up","title":"signUp()","description":"Creates a new user.\n","notes":"- By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers).\n- **Confirm email** determines if users need to confirm their email address after signing up.\n  - If **Confirm email** is enabled, a `user` is returned but `session` is null.\n  - If **Confirm email** is disabled, both a `user` and a `session` are returned.\n- When the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls) by default. You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n- If signUp() is called for an existing confirmed user:\n    - If **Confirm email** is enabled in [your project](https://supabase.com/dashboard/project/_/auth/providers), an obfuscated/fake user object is returned.\n    - If **Confirm email** is disabled, the error message, `User already registered` is returned.\n","examples":[{"id":"sign-up","name":"Sign up.","isSpotlight":true,"code":"```dart\nfinal AuthResponse res = await supabase.auth.signUp(\n  email: 'example@email.com',\n  password: 'example-password',\n);\nfinal Session? session = res.session;\nfinal User? user = res.user;\n```\n"},{"id":"sign-up-with-metadata","name":"Sign up with additional metadata","isSpotlight":true,"code":"```dart\nfinal AuthResponse res = await supabase.auth.signUp(\n  email: 'example@email.com',\n  password: 'example-password',\n  data: {'username': 'my_user_name'},\n);\nfinal Session? session = res.session;\nfinal User? user = res.user;\n```\n"},{"id":"sign-up-with-redirect-url","name":"Sign up with redirect URL","isSpotlight":true,"code":"```dart\nfinal AuthResponse res = await supabase.auth.signUp(\n  email: 'example@email.com',\n  password: 'example-password',\n  emailRedirectTo: 'com.supabase.myapp://callback',\n);\nfinal Session? session = res.session;\nfinal User? user = res.user;\n```\n"}]},{"id":"sign-in-with-password","title":"signInWithPassword()","description":"Log in an existing user using email or phone number with password.\n","notes":"- Requires either an email and password or a phone number and password.\n","examples":[{"id":"sign-in-with-email-and-password","name":"Sign in with email and password","isSpotlight":true,"code":"```dart\nfinal AuthResponse res = await supabase.auth.signInWithPassword(\n  email: 'example@email.com',\n  password: 'example-password',\n);\nfinal Session? session = res.session;\nfinal User? user = res.user;\n```\n"},{"id":"sign-in-with-phone-and-password","name":"Sign in with phone and password","code":"```dart\nfinal AuthResponse res = await supabase.auth.signInWithPassword(\n  phone: '+13334445555',\n  password: 'example-password',\n);\nfinal Session? session = res.session;\nfinal User? user = res.user;\n```\n"}]},{"id":"sign-in-with-otp","title":"signInWithOtp()","notes":"- Requires either an email or phone number.\n- This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n- If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n- If you're using phone, you can configure whether you want the user to receive a OTP.\n- The magic link's destination URL is determined by the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls). You can modify the `SITE_URL` or add additional redirect urls in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration).\n","examples":[{"id":"sign-in-with-email","name":"Sign in with email.","isSpotlight":true,"description":"The user will be sent an email which contains either a magiclink or a OTP or both. By default, a given user can only request a OTP once every 60 seconds.\nYou can pass `emailRedirectTo` with dynamic link to bring the users back to your app after they click on the magic link.\n","code":"```dart\nawait supabase.auth.signInWithOtp(\n  email: 'example@email.com',\n  emailRedirectTo: kIsWeb ? null : 'io.supabase.flutter://signin-callback/',\n);\n```\n"},{"id":"sign-in-with-sms-otp","name":"Sign in with SMS OTP.","description":"The user will be sent a SMS which contains a OTP. By default, a given user can only request a OTP once every 60 seconds.","code":"```dart\nawait supabase.auth.signInWithOtp(\n  phone: '+13334445555',\n);\n```\n"},{"id":"sign-in-with-whatsapp-otp","name":"Sign in with WhatsApp OTP","isSpotlight":false,"description":"The user will be sent a WhatsApp message which contains a OTP. By default, a given user can only request a OTP once every 60 seconds. Note that a user will need to have a valid WhatsApp account that is linked to Twilio in order to use this feature.","code":"```dart\nawait supabase.auth.signInWithOtp(\n  phone: '+13334445555',\n  channel: OtpChannel.whatsapp,\n);\n```\n"}]},{"id":"sign-in-with-apple","title":"signInWithApple()","description":"Signs in a user using native Apple login.\n","notes":"- You need to [register your bundle ID](https://developer.apple.com/help/account/manage-identifiers/register-an-app-id/) and add it to Supabase dashboard.\n- This method is only available in iOS and macOS\n- For other platforms, [signInWithOAuth()](https://supabase.com/docs/reference/dart/auth-signinwithoauth) should be used.\n","examples":[{"id":"sign-in-with-apple","name":"Sign in with Apple","isSpotlight":true,"code":"```dart\nfinal AuthResponse res = await supabase.auth.signInWithApple();\n```\n"}]},{"id":"sign-in-with-oauth","title":"signInWithOAuth()","description":"Signs the user in using third party OAuth providers.\n","notes":"- This method is used for signing in using a third-party provider.\n- Supabase supports many different [third-party providers](https://supabase.com/docs/guides/auth#providers).\n","examples":[{"id":"sign-in-using-a-third-party-provider","name":"Sign in using a third-party provider","isSpotlight":true,"code":"```dart\nawait supabase.auth.signInWithOAuth(Provider.github);\n```\n"},{"id":"sign-in-using-a-third-party-provider-with-redirect","name":"With `redirectTo`","description":"Specify the redirect link to bring back the user via deeplink.\nNote that `redirectTo` should be null for Flutter Web.\n","code":"```dart\nawait supabase.auth.signInWithOAuth(\n  Provider.github,\n  redirectTo: kIsWeb ? null : 'io.supabase.flutter://reset-callback/',\n);\n```\n"},{"id":"sign-in-with-scopes","name":"With scopes","description":"If you need additional data from an OAuth provider, you can include a space-separated list of scopes in your request to get back an OAuth provider token.\nYou may also need to specify the scopes in the provider's OAuth app settings, depending on the provider.\n","code":"```dart\nawait supabase.auth.signInWithOAuth(\n  Provider.github,\n  scopes: 'repo gist notifications'\n);\n...\n// after user comes back from signin flow\n\nfinal Session? session = supabase.auth.currentSession;\nfinal String? oAuthToken = session?.providerToken;\n```\n"}]},{"id":"sign-out","title":"signOut()","description":"Signs out the current user, if there is a logged in user.\n","notes":"- In order to use the `signOut()` method, the user needs to be signed in first.\n","examples":[{"id":"sign-out","name":"Sign out","isSpotlight":true,"code":"```dart\nawait supabase.auth.signOut();\n```\n"}]},{"id":"verify-otp","title":"verifyOtp()","notes":"- The `verifyOtp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `signup`, `magiclink`, `recovery`, `invite` or `email_change`.\n- The verification type used should be determined based on the corresponding auth method called before `verifyOtp` to sign up / sign-in a user.\n","examples":[{"id":"verify-sms-one-time-password(otp)","name":"Verify Sms One-Time Password (OTP)","isSpotlight":true,"code":"```dart\nfinal AuthResponse res = await supabase.auth.verifyOTP(\n  type: OtpType.sms,\n  token: '111111',\n  phone: '+13334445555',\n);\nfinal Session? session = res.session;\nfinal User? user = res.user;\n```\n"},{"id":"verify-signup-one-time-password(otp)","name":"Verify Signup One-Time Password (OTP)","isSpotlight":false,"code":"```dart\nfinal AuthResponse res = await supabase.auth.verifyOTP(\n  type: OtpType.signup,\n  token: token,\n  phone: '+13334445555',\n);\nfinal Session? session = res.session;\nfinal User? user = res.user;\n```\n"}]},{"id":"get-session","title":"currentSession","description":"Returns the session data, if there is an active session.\n","examples":[{"id":"get-the-session-data","name":"Get the session data","isSpotlight":true,"code":"```dart\nfinal Session? session = supabase.auth.currentSession;\n```\n"}]},{"id":"get-user","title":"currentUser","description":"Returns the user data, if there is a logged in user.\n","examples":[{"name":"Get the logged in user","isSpotlight":true,"code":"```dart\nfinal User? user = supabase.auth.currentUser;\n```\n"}]},{"id":"update-user","title":"updateUser()","description":"Updates user data for a logged in user.\n","notes":"- In order to use the `updateUser()` method, the user needs to be signed in first.\n- By Default, email updates sends a confirmation link to both the user's current and new email.\nTo only send a confirmation link to the user's new email, disable **Secure email change** in your project's [email auth provider settings](https://supabase.com/dashboard/project/_/auth/providers).\n","examples":[{"id":"update-the-email-for-an-authenticated-user","name":"Update the email for an authenticated user","description":"Sends a \"Confirm Email Change\" email to the new email address.","isSpotlight":true,"code":"```dart\nfinal UserResponse res = await supabase.auth.updateUser(\n  UserAttributes(\n    email: 'example@email.com',\n  ),\n);\nfinal User? updatedUser = res.user;\n```\n"},{"id":"update-the-password-for-an-authenticated-user","name":"Update the password for an authenticated user","isSpotlight":false,"code":"```dart\nfinal UserResponse res = await supabase.auth.updateUser(\n  UserAttributes(\n    password: 'new password',\n  ),\n);\nfinal User? updatedUser = res.user;\n```\n"},{"id":"update-the-users-metadata","name":"Update the user's metadata","isSpotlight":true,"code":"```dart\nfinal UserResponse res = await supabase.auth.updateUser(\n  UserAttributes(\n    data: { 'hello': 'world' },\n  ),\n);\nfinal User? updatedUser = res.user;\n```\n"},{"id":"update-password-with-reauthentication","name":"Update the user's password with a nonce","description":"If \"Secure password change\" is enabled, updating the user's password would require a nonce. The nonce is sent to the user's email or phone number.","isSpotlight":true,"code":"```dart\nsupabase.auth.updateUser(UserAttributes(\n  email: 'example@email.com',\n  nonce: '123456',\n));\n```\n"}]},{"id":"send-password-reauthentication","title":"reauthenticate()","notes":"- This method is used together with `updateUser()` when a user's password needs to be updated.\n- This method will send a nonce to the user's email. If the user doesn't have a confirmed email address, the method will send the nonce to the user's confirmed phone number instead.\n","examples":[{"id":"send-reauthentication-nonce","name":"Send reauthentication nonce","description":"Sends a reauthentication nonce to the user's email or phone number.","isSpotlight":true,"code":"```dart\nawait supabase.auth.reauthenticate();\n```\n"}]},{"id":"resend-email-or-phone-otps","title":"resend()","notes":"- Resends a signup confirmation, email change or phone change email to the user.\n- Passwordless sign-ins can be resent by calling the `signInWithOtp()` method again.\n- Password recovery emails can be resent by calling the `resetPasswordForEmail()` method again.\n- This method will only resend an email or phone OTP to the user if there was an initial signup, email change or phone change request being made.\n","examples":[{"id":"resend-email-signup-confirmation","name":"Resend an email signup confirmation","description":"Resends the email signup confirmation to the user","isSpotlight":true,"code":"```dart\nfinal ResendResponse res = await supabase.auth.resend(\n  type: OtpType.email,\n  email: 'email@example.com',\n);\n```\n"}]},{"id":"on-auth-state-change","title":"onAuthStateChange()","description":"Receive a notification every time an auth event happens.\n","notes":"- Types of auth events: `AuthChangeEvent.passwordRecovery`, `AuthChangeEvent.signedIn`, `AuthChangeEvent.signedOut`, `AuthChangeEvent.tokenRefreshed`, `AuthChangeEvent.userUpdated`and `AuthChangeEvent.userDeleted`\n","examples":[{"id":"listen-to-auth-changes","name":"Listen to auth changes","isSpotlight":true,"code":"```dart\nfinal authSubscription = supabase.auth.onAuthStateChange.listen((data) {\n  final AuthChangeEvent event = data.event;\n  final Session? session = data.session;\n});\n```\n"},{"id":"list-to-a-specific-event","name":"Listen to a specific event","code":"```dart\nfinal authSubscription = supabase.auth.onAuthStateChange.listen((data) {\n  final AuthChangeEvent event = data.event;\n  if (event == AuthChangeEvent.signedIn) {\n    // handle signIn\n  }\n});\n```\n"},{"id":"unsubscribe-from-auth-subscription","name":"Unsubscribe from auth subscription","code":"```dart\nfinal authSubscription = supabase.auth.onAuthStateChange((event, session) {});\n\nauthSubscription.cancel();\n```\n"}]},{"id":"auth-reset-password-for-email","title":"resetPasswordForEmail()","description":"Sends a reset request to an email address.\n","notes":"Sends a password reset request to an email address. When the user clicks the reset link in the email they are redirected back to your application. Prompt the user for a new password and call auth.updateUser():\n\n```dart\nawait supabase.auth.resetPasswordForEmail(\n  'sample@email.com',\n  redirectTo: kIsWeb ? null : 'io.supabase.flutter://reset-callback/',\n);\n```\n","examples":[{"id":"reset-password","name":"Reset password for Flutter","isSpotlight":true,"code":"`redirectTo` is used to open the app via deeplink when user opens the password reset email.\n```dart\nawait supabase.auth.resetPasswordForEmail(\n  'sample@email.com',\n  redirectTo: kIsWeb ? null : 'io.supabase.flutter://reset-callback/',\n);\n```\n"}]},{"id":"auth-mfa-api","title":"Overview","notes":"This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the `supabase.auth.mfa` namespace.\n\nCurrently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.\n\nHaving a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.\n"},{"id":"mfa-enroll","title":"mfa.enroll()","notes":"Starts the enrollment process for a new Multi-Factor Authentication (MFA) factor. This method creates a new `unverified` factor.\nTo verify a factor, present the QR code or secret to the user and ask them to add it to their authenticator app.\nThe user has to enter the code from their authenticator app to verify it.\n- Currently, `totp` is the only supported `factorType`. The returned `id` should be used to create a challenge.\n- To create a challenge, see [`mfa.challenge()`](/docs/reference/dart/auth-mfa-challenge).\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/dart/auth-mfa-verify).\n- To create and verify a challenge in a single step, see [`mfa.challengeAndVerify()`](/docs/reference/dart/auth-mfa-challengeandverify).\n","examples":[{"id":"enroll-totp-factor","name":"Enroll a time-based, one-time password (TOTP) factor","isSpotlight":true,"code":"```dart\nfinal res = await supabase.auth.mfa.enroll(factorType: FactorType.totp);\n\nfinal qrCodeUrl = res.totp.qrCode;\n```\n"}]},{"id":"mfa-challenge","title":"mfa.challenge()","notes":"Prepares a challenge used to verify that a user has access to a MFA factor.\n- An [enrolled factor](/docs/reference/dart/auth-mfa-enroll) is required before creating a challenge.\n- To verify a challenge, see [`mfa.verify()`](/docs/reference/dart/auth-mfa-verify).\n","examples":[{"id":"create-mfa-challenge","name":"Create a challenge for a factor","isSpotlight":true,"code":"```dart\nfinal res = await supabase.auth.mfa.challenge(\n  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n);\n```\n"}]},{"id":"mfa-verify","title":"mfa.verify()","notes":"Verifies a code against a challenge. The verification code is provided by the user by entering a code seen in their authenticator app.\n- To verify a challenge, please [create a challenge](/docs/reference/dart/auth-mfa-challenge) first.\n","examples":[{"id":"verify-challenge","name":"Verify a challenge for a factor","isSpotlight":true,"code":"```dart\nfinal res = await supabase.auth.mfa.verify(\n  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n  challengeId: '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',\n  code: '123456',\n);\n```\n"}]},{"id":"mfa-challenge-and-verify","title":"mfa.challengeAndVerify()","notes":"Helper method which creates a challenge and immediately uses the given code to verify against it thereafter. The verification code is provided by the user by entering a code seen in their authenticator app.\n- An [enrolled factor](/docs/reference/dart/auth-mfa-enroll) is required before invoking `challengeAndVerify()`.\n- Executes [`mfa.challenge()`](/docs/reference/dart/auth-mfa-challenge) and [`mfa.verify()`](/docs/reference/dart/auth-mfa-verify) in a single step.\n","examples":[{"id":"challenge-and-verify","name":"Create and verify a challenge for a factor","isSpotlight":true,"code":"```dart\nfinal res = await supabase.auth.mfa.challengeAndVerify(\n  factorId: '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n  code: '123456',\n);\n```\n"}]},{"id":"mfa-unenroll","title":"mfa.unenroll()","notes":"Unenroll removes a MFA factor. A user has to have an aal2 authenticator level in order to unenroll a verified factor.\n","examples":[{"id":"unenroll-a-factor","name":"Unenroll a factor","isSpotlight":true,"code":"```dart\nfinal res = await supabase.auth.mfa.unenroll(\n  '34e770dd-9ff9-416c-87fa-43b31d7ef225',\n);\n```\n"}]},{"id":"mfa-get-authenticator-assurance-level","title":"mfa.getAuthenticatorAssuranceLevel()","notes":"Returns the Authenticator Assurance Level (AAL) for the active session.\n- Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.\n- In Supabase, having an AAL of `aal1` refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while `aal2` refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).\n- If the user has a verified factor, the `nextLevel` field will return `aal2`, else, it will return `aal1`.\n","examples":[{"id":"get-aal","name":"Get the AAL details of a session","isSpotlight":true,"code":"```dart\nfinal res = supabase.auth.mfa.getAuthenticatorAssuranceLevel();\nfinal currentLevel = res.currentLevel;\nfinal nextLevel = res.nextLevel;\nfinal currentAuthenticationMethods = res.currentAuthenticationMethods;\n```\n"}]},{"id":"admin-api","title":"Overview","notes":"- Any method under the `supabase.auth.admin` namespace requires a `service_role` key.\n- These methods are considered admin methods and should be called on a trusted server. Never expose your `service_role` key in the Flutter app.\n","examples":[{"id":"create-auth-admin-client","name":"Create server-side auth client","isSpotlight":true,"code":"```dart\nfinal supabase = SupabaseClient(supabaseUrl, serviceRoleKey);\n```\n"}]},{"id":"get-user-by-id","title":"getUserById()","notes":"Get user by id.\n- Fetches the user object from the database based on the user's id.\n- The `getUserById()` method requires the user's id which maps to the `auth.users.id` column.\n","examples":[{"id":"fetch-the-user-object-using-the-access-token-jwt","name":"Fetch the user object using the access_token jwt","isSpotlight":true,"code":"```dart\nfinal res = await supabase.auth.admin.getUserById(userId);\nfinal user = res.user;\n```\n"}]},{"id":"list-users","title":"listUsers()","notes":"Get a list of users.\n- Defaults to return 50 users per page.\n","examples":[{"id":"get-a-full-list-of-users","name":"Get a page of users","isSpotlight":true,"code":"```dart\nfinal List<User> users = await supabase.auth.admin.listUsers();\n```\n"},{"id":"get-paginated-list-of-users","name":"Paginated list of users","isSpotlight":false,"code":"```dart\nfinal List<User> res = await supabase.auth.admin.listUsers(\n  page: 1,\n  perPage: 100,\n);\n```\n"}]},{"id":"create-user","title":"createUser()","notes":"Creates a new user.\n- To confirm the user's email address or phone number, set `email_confirm` or `phone_confirm` to true. Both arguments default to false.\n- `createUser()` will not send a confirmation email to the user. You can use [`inviteUserByEmail()`](/docs/reference/dart/auth-admin-inviteuserbyemail) if you want to send them an email invite instead.\n- If you are sure that the created user's email or phone number is legitimate and verified, you can set the `email_confirm` or `phone_confirm` param to `true`.\n","examples":[{"id":"create-a-new-user-with-custom-user-metadata","name":"With custom user metadata","isSpotlight":true,"code":"```dart\nfinal res = await supabase.auth.admin.createUser(AdminUserAttributes(\n  email: 'user@email.com',\n  password: 'password',\n  userMetadata: {'name': 'Yoda'},\n));\n```\n"},{"id":"auto-confirm-the-users-email","name":"Auto-confirm the user's email","code":"```dart\nfinal res = await supabase.auth.admin.createUser(AdminUserAttributes(\n  email: 'user@email.com',\n  emailConfirm: true,\n));\n```\n"},{"id":"auto-confirm-the-users-phone-number","name":"Auto-confirm the user's phone number","code":"```dart\nfinal res = await supabase.auth.admin.createUser(AdminUserAttributes(\n  phone: '1234567890',\n  phoneConfirm: true,\n));\n```\n"}]},{"id":"delete-user","title":"deleteUser()","notes":"Delete a user.\n- The `deleteUser()` method requires the user's ID, which maps to the `auth.users.id` column.\n","examples":[{"id":"removes-a-user","name":"Removes a user","isSpotlight":true,"code":"```dart\nawait supabase.auth.admin\n    .deleteUser('715ed5db-f090-4b8c-a067-640ecee36aa0');\n```\n"}]},{"id":"invite-user-by-email","title":"inviteUserByEmail()","notes":"Sends an invite link to the user's email address.\n","examples":[{"id":"invite-a-user","name":"Invite a user","isSpotlight":true,"code":"```dart\nfinal UserResponse res = await supabase.auth.admin\n    .inviteUserByEmail('email@example.com');\nfinal User? user = res.user;\n```\n"}]},{"id":"generate-link","title":"generateLink()","notes":"Generates email links and OTPs to be sent via a custom email provider.\n- The following types can be passed into `generateLink()`: `signup`, `magiclink`, `invite`, `recovery`, `emailChangeCurrent`, `emailChangeNew`, `phoneChange`.\n- `generateLink()` only generates the email link for `email_change_email` if the \"Secure email change\" setting is enabled under the \"Email\" provider in your Supabase project.\n- `generateLink()` handles the creation of the user for `signup`, `invite` and `magiclink`.\n","examples":[{"id":"generate-a-signup-link","name":"Generate a signup link","isSpotlight":true,"code":"```dart\nfinal res = await supabase.auth.admin.generateLink(\n  type: GenerateLinkType.signup,\n  email: 'email@example.com',\n  password: 'secret',\n);\nfinal actionLink = res.properties.actionLink;\n```\n"}]},{"id":"update-user-by-id","title":"updateUserById()","examples":[{"id":"updates-a-users-email","name":"Updates a user's email","isSpotlight":false,"code":"```dart\nfinal UserResponse res = await supabase.auth.admin.updateUserById(\n  '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',\n  attributes: AdminUserAttributes(\n    email: 'new@email.com',\n  ),\n);\n```\n"}]},{"id":"invoke","title":"invoke()","description":"Invokes a Supabase Function. See the [guide](/docs/guides/functions) for details on writing Functions.\n","notes":"- Requires an Authorization header.\n- Invoke params generally match the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) spec.\n","examples":[{"id":"basic-invocation","name":"Basic invocation.","isSpotlight":true,"code":"```dart\nfinal res = await supabase.functions.invoke('hello', body: {'foo': 'baa'});\nfinal data = res.data;\n```\n"},{"id":"specifying-response-type","name":"Specifying response type.","description":"By default, `invoke()` will parse the response as JSON. You can parse the response in the following formats: `json`, `blob`, `text`, and `arrayBuffer`.\n","isSpotlight":true,"code":"```dart\nfinal res = await supabase.functions.invoke(\n  'hello',\n  body: {'foo': 'baa'},\n  responseType: ResponseType.text,\n);\nfinal data = res.data;\n```\n"},{"id":"parsing-custom-headers","name":"Parsing custom headers.","description":"Any `headers` will be passed through to the function. A common pattern is to pass a logged-in user's JWT token as an Authorization header.\n","isSpotlight":true,"code":"```dart\nfinal res = await supabase.functions.invoke(\n  'hello',\n  body: {'foo': 'baa'},\n  headers: {\n    'Authorization': 'Bearer ${supabase.auth.currentSession?.accessToken}'\n  },\n);\n```\n"}]},{"id":"select","description":"Perform a SELECT query on the table or view.\n","title":"Fetch data: select()","notes":"- By default, Supabase projects will return a maximum of 1,000 rows. This setting can be changed in Project API Settings. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n- `select()` can be combined with [Filters](/docs/reference/dart/using-filters)\n- `select()` can be combined with [Modifiers](/docs/reference/dart/using-modifiers)\n- `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).\n","examples":[{"id":"getting-your-data","name":"Getting your data","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .select('name');\n```\n"},{"id":"selecting-specific-columns","name":"Selecting specific columns","description":"You can select specific fields from your tables.","code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .select('''\n    name,\n    cities (\n      name\n    )\n  ''');\n```\n"},{"id":"query-foreign-tables","name":"Query foreign tables","description":"If your database has relationships, you can query related tables too.","code":"```dart\nfinal data = await supabase\n  .from('products')\n  .select('''\n    id,\n    supplier:supplier_id ( name ),\n    purchaser:purchaser_id ( name )\n  ''');\n```\n"},{"id":"query-the-same-foreign-table-multiple-times","name":"Query the same foreign table multiple times","description":"Sometimes you will need to query the same foreign table twice.\nIn this case, you can use the name of the joined column to identify\nwhich join you intend to use. For convenience, you can also give an\nalias for each column.\n","code":"```dart\nfinal data = await supabase\n  .from('messages')\n  .select('*, users!inner(*)')\n  .eq('users.username', 'Jane');\n```\n"},{"id":"filtering-with-inner-joins","name":"Filtering with inner joins","description":"If you want to filter a table based on a child table's values you can use the `!inner()` function. For example, if you wanted\nto select all rows in a `message` table which belong to a user with the `username` \"Jane\":\n","code":"```dart\nfinal data = await supabase\n  .from('messages')\n  .select('*, users!inner(*)')\n  .eq('users.username', 'Jane');\n```\n"},{"id":"querying-with-count-option","name":"Querying with count option","description":"You can get the number of rows by using the count option.\nAllowed values for count option are [exact](https://postgrest.org/en/stable/api.html#exact-count), [planned](https://postgrest.org/en/stable/api.html#planned-count) and [estimated](https://postgrest.org/en/stable/api.html#estimated-count).\n","code":"```dart\nfinal res = await supabase.from('cities').select(\n      'name',\n      const FetchOptions(\n        count: CountOption.exact,\n      ),\n    );\n\nfinal count = res.count;\n```\n"},{"id":"querying-json-data","name":"Querying JSON data","description":"If you have data inside of a JSONB column, you can apply select\nand query filters to the data values. Postgres offers a\n[number of operators](https://www.postgresql.org/docs/current/functions-json.html)\nfor querying JSON data. Also see\n[PostgREST docs](http://postgrest.org/en/v7.0.0/api.html#json-columns) for more details.\n","code":"```dart\nfinal data = await supabase\n  .from('users')\n  .select('''\n    id, name,\n    address->street\n  ''')\n  .eq('address->postcode', 90210);\n```\n"},{"id":"return-data-as-csv","name":"Return data as CSV","description":"By default the data is returned in JSON format, however you can also request for it to be returned as Comma Separated Values.\n","code":"```dart\nfinal data = await supabase\n  .from('users')\n  .select()\n  .csv();\n```\n"},{"id":"switching-schemas-per-query","name":"Switching schemas per query","description":"You can perform queries on custom schemas.\nMake sure you've set up your [database privileges and API settings](/docs/guides/api/using-custom-schemas).\n","code":"```dart\nfinal data = await supabase\n  .useSchema('myschema')\n  .from('users')\n  .select();\n```\n"}]},{"id":"insert","description":"Perform an INSERT into the table or view.\n","title":"Create data: insert()","examples":[{"id":"create-a-record","name":"Create a record","isSpotlight":true,"code":"```dart\nawait supabase\n    .from('cities')\n    .insert({'name': 'The Shire', 'country_id': 554});\n```\n"},{"id":"bulk-create","name":"Bulk create","code":"```dart\nawait supabase.from('cities').insert([\n  {'name': 'The Shire', 'country_id': 554},\n  {'name': 'Rohan', 'country_id': 555},\n]);\n```\n"},{"id":"fetch-inserted-data","name":"Fetch inserted record","code":"```dart\nfinal List<Map<String, dynamic>> data =\n        await supabase.from('cities').insert([\n      {'name': 'The Shire', 'country_id': 554},\n      {'name': 'Rohan', 'country_id': 555},\n    ]).select();\n```\n"}]},{"id":"update","description":"Perform an UPDATE on the table or view.\n","title":"Modify data: update()","notes":"- `update()` should always be combined with [Filters](/docs/reference/dart/using-filters) to target the item(s) you wish to update.\n","examples":[{"id":"updating-your-data","name":"Update your data","isSpotlight":true,"code":"```dart\nawait supabase\n  .from('cities')\n  .update({ 'name': 'Middle Earth' })\n  .match({ 'name': 'Auckland' });\n```\n"},{"id":"updating-json-data","name":"Update JSON data","description":"Postgres offers a\n[number of operators](https://www.postgresql.org/docs/current/functions-json.html)\nfor working with JSON data. Right now it is only possible to update an entire JSON document,\nbut we are [working on ideas](https://github.com/PostgREST/postgrest/issues/465) for updating individual keys.\n","code":"```dart\nawait supabase\n  .from('users')\n  .update({\n    'address': {\n      'street': 'Melrose Place',\n      'postcode': 90210\n    }\n  })\n  .eq('address->postcode', 90210);\n```\n"},{"id":"fetch-updated-rows","name":"Fetch updated rows","code":"```dart\nfinal List<Map<String, dynamic>> data = await supabase\n    .from('users')\n    .update({\n      'address': {'street': 'Melrose Place', 'postcode': 90210}\n    })\n    .eq('address->postcode', 90210)\n    .select();\n```\n"}]},{"id":"upsert","description":"Perform an UPSERT on the table or view. Depending on the column(s) passed to `onConflict`, `.upsert()` allows you to perform the equivalent of `.insert()` if a row with the corresponding `onConflict` columns doesn't exist, or if it does exist, perform an alternative action depending on `ignoreDuplicates`.\n","title":"Upsert data: upsert()","notes":"- Primary keys must be included in `values` to use upsert.\n","examples":[{"id":"upsert-your-data","name":"Upsert your data","isSpotlight":true,"code":"```dart\nawait supabase\n  .from('messages')\n  .upsert({ 'id': 3, 'message': 'foo', 'username': 'supabot' });\n```\n"},{"id":"upserting-into-tables-with-constraints","name":"Upserting into tables with constraints","description":"Running the following will cause supabase to upsert data into the `users` table.\nIf the username 'supabot' already exists, the `onConflict` argument tells supabase to overwrite that row\nbased on the column passed into `onConflict`.\n","isSpotlight":true,"code":"```dart\nawait supabase\n  .from('users')\n  .upsert({ 'username': 'supabot' }, onConflict: 'username');\n```\n"},{"id":"return-the-exact-number-of-rows","name":"Return the exact number of rows","description":"Allowed values for count option are `exact`, `planned` and `estimated`.\n","code":"```dart\nfinal res = await supabase.from('users').upsert(\n  {'id': 3, 'message': 'foo', 'username': 'supabot'},\n  options: const FetchOptions(count: CountOption.exact),\n);\n\nfinal data = res.data;\nfinal count = res.count;\n```\n"}]},{"id":"delete","description":"Perform a DELETE on the table or view.\n","title":"Delete data: delete()","notes":"- `delete()` should always be combined with [Filters](/docs/reference/dart/using-filters) to target the item(s) you wish to delete.\n- If you use `delete()` with filters and you have RLS enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n","examples":[{"id":"delete-records","name":"Delete records","isSpotlight":true,"code":"```dart\nawait supabase\n  .from('cities')\n  .delete()\n  .match({ 'id': 666 });\n```\n"},{"id":"fetch-delete-records","name":"Fetch deleted records","code":"```dart\nfinal List<Map<String,dynamic>> data = await supabase\n  .from('cities')\n  .delete()\n  .match({ 'id': 666 })\n  .select();\n```\n"}]},{"id":"rpc","title":"Stored Procedures: rpc()","description":"You can call stored procedures as a \"Remote Procedure Call\".\n\nThat's a fancy way of saying that you can put some logic into your database then call it from anywhere.\nIt's especially useful when the logic rarely changes - like password resets and updates.\n","examples":[{"id":"call-a-stored-procedure","name":"Call a stored procedure","isSpotlight":true,"description":"This is an example invoking a stored procedure.","code":"```dart\nfinal data = await supabase\n  .rpc('hello_world');\n```\n"},{"id":"with-parameters","name":"With Parameters","code":"```dart\nfinal data = await supabase\n  .rpc('echo_city', params: { 'name': 'The Shire' });\n```\n"}]},{"id":"subscribe","description":"Subscribe to realtime changes in your database.\n","title":"on().subscribe()","notes":"- Realtime is disabled by default for new tables. You can turn it on by [managing replication](/docs/guides/realtime/postgres-changes#replication-setup).\n- If you want to receive the \"previous\" data for updates and deletes, you will need to set `REPLICA IDENTITY` to `FULL`, like this: `ALTER TABLE your_table REPLICA IDENTITY FULL;`\n","examples":[{"id":"listen-to-all-database-changes","name":"Listen to all database changes","isSpotlight":true,"code":"```dart\nsupabase.channel('*').on(\n  RealtimeListenTypes.postgresChanges,\n  ChannelFilter(event: '*', schema: '*'),\n  (payload, [ref]) {\n    print('Change received: ${payload.toString()}');\n  },\n).subscribe();\n```\n"},{"id":"listen-to-a-specific-table","name":"Listen to a specific table","code":"```dart\nsupabase.channel('public:countries').on(\n  RealtimeListenTypes.postgresChanges,\n  ChannelFilter(event: '*', schema: 'public', table: 'countries'),\n  (payload, [ref]) {\n    print('Change received: ${payload.toString()}');\n  },\n).subscribe();\n```\n"},{"id":"listen-to-inserts","name":"Listen to inserts","code":"```dart\nsupabase.channel('public:countries').on(\n  RealtimeListenTypes.postgresChanges,\n  ChannelFilter(event: 'INSERT', schema: 'public', table: 'countries'),\n  (payload, [ref]) {\n    print('Change received: ${payload.toString()}');\n  },\n).subscribe();\n```\n"},{"id":"listen-to-updates","name":"Listen to updates","description":"By default, Supabase will send only the updated record. If you want to receive the previous values as well you can\nenable full replication for the table you are listening too:\n\n```sql\nalter table \"your_table\" replica identity full;\n```\n","code":"```dart\nsupabase.channel('public:countries').on(\n  RealtimeListenTypes.postgresChanges,\n  ChannelFilter(event: 'UPDATE', schema: 'public', table: 'countries'),\n  (payload, [ref]) {\n    print('Change received: ${payload.toString()}');\n  },\n).subscribe();\n```\n"},{"id":"listen-to-deletes","name":"Listen to deletes","description":"By default, Supabase does not send deleted records. If you want to receive the deleted record you can\nenable full replication for the table you are listening too:\n\n```sql\nalter table \"your_table\" replica identity full;\n```\n","code":"```dart\nsupabase.channel('public:countries').on(\n  RealtimeListenTypes.postgresChanges,\n  ChannelFilter(event: 'DELETE', schema: 'public', table: 'countries'),\n  (payload, [ref]) {\n    print('Change received: ${payload.toString()}');\n  },\n).subscribe();\n```\n"},{"id":"listen-to-multiple-events","name":"Listen to multiple events","description":"You can chain listeners if you want to listen to multiple events for each table.","code":"```dart\nsupabase.channel('public:countries').on(RealtimeListenTypes.postgresChanges,\n    ChannelFilter(event: 'INSERT', schema: 'public', table: 'countries'),\n    (payload, [ref]) {\n  print('Change received: ${payload.toString()}');\n}).on(RealtimeListenTypes.postgresChanges,\n    ChannelFilter(event: 'DELETE', schema: 'public', table: 'countries'),\n    (payload, [ref]) {\n  print('Change received: ${payload.toString()}');\n}).subscribe();\n```\n"},{"id":"listening-to-row-level-changes","name":"Listen to row level changes","description":"You can listen to individual rows using the format `{table}:{col}=eq.{val}` - where `{col}` is the column name, and `{val}` is the value which you want to match.","code":"```dart\nsupabase.channel('public:countries:id=eq.200').on(\n    RealtimeListenTypes.postgresChanges,\n    ChannelFilter(\n      event: 'UPDATE',\n      schema: 'public',\n      table: 'countries',\n      filter: 'id=eq.200',\n    ), (payload, [ref]) {\n  print('Change received: ${payload.toString()}');\n}).subscribe();\n```\n"}]},{"id":"remove-channel","description":"Unsubscribes and removes Realtime channel from Realtime client.\n","title":"removeChannel()","notes":"- Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n","examples":[{"id":"removes-a-channel","name":"Remove a channel","isSpotlight":true,"code":"```dart\nfinal status = await supabase.removeChannel(channel);\n```\n"}]},{"id":"remove-all-channels","description":"Unsubscribes and removes all Realtime channels from Realtime client.\n","title":"removeAllChannels()","notes":"- Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.\n","examples":[{"id":"remove-all-channels","name":"Remove all channels","isSpotlight":true,"code":"```dart\nfinal statuses = await supabase.removeAllChannels();\n```\n"}]},{"id":"get-channels","description":"Returns all Realtime channels.\n","title":"getChannels()","examples":[{"id":"get-all-channels","name":"Get all channels","isSpotlight":true,"code":"```dart\nfinal channels = supabase.getChannels();\n```\n"}]},{"id":"stream","description":"Returns real-time data from your table as a `Stream`.\n","title":"stream()","notes":"- Realtime is disabled by default for new tables. You can turn it on by [managing replication](/docs/guides/realtime/postgres-changes#replication-setup).\n- `stream()` will emit the initial data as well as any further change on the database as `Stream<List<Map<String, dynamic>>>` by combining Postgrest and Realtime.\n- Takes a list of primary key column names that will be used to update and delete the proper records within the SDK.\n- The following filters are available\n  - `.eq('column', value)` listens to rows where the column equals the value\n  - `.neq('column', value)` listens to rows where the column does not equal the value\n  - `.gt('column', value)` listens to rows where the column is greater than the value\n  - `.gte('column', value)` listens to rows where the column is greater than or equal to the value\n  - `.lt('column', value)` listens to rows where the column is less than the value\n  - `.lte('column', value)` listens to rows where the column is less than or equal to the value\n  - `.inFilter('column', [val1, val2, val3])` listens to rows where the column is one of the values\n","examples":[{"id":"listen-to-table","name":"Listen to a table","isSpotlight":true,"code":"```dart\nsupabase.from('countries')\n  .stream(primaryKey: ['id'])\n  .listen((List<Map<String, dynamic>> data) {\n  // Do something awesome with the data\n});\n```\n"},{"id":"with-filter-order-limit","name":"With filter, order and limit","code":"```dart\nsupabase.from('countries')\n  .stream(primaryKey: ['id'])\n  .eq('id', 120)\n  .order('name')\n  .limit(10);\n```\n"},{"id":"with-in-filter","name":"With an IN filter","code":"```dart\nsupabase.from('countries')\n  .stream(primaryKey: ['id'])\n  .inFilter('id', [1, 2, 3])\n  .order('name')\n  .limit(10);\n```\n"},{"id":"using-stream-with-stream-builder","name":"Using `stream()` with `StreamBuilder`","description":"When using `stream()` with a `StreamBuilder` within your Flutter application, make sure to store your stream in a variable to prevent refetching upon rebuilding.\n","code":"```dart\nfinal supabase = Supabase.instance.client;\n\nclass MyWidget extends StatefulWidget {\n  const MyWidget({Key? key}) : super(key: key);\n\n  @override\n  State<MyWidget> createState() => _MyWidgetState();\n}\n\nclass _MyWidgetState extends State<MyWidget> {\n  // Persist the stream in a local variable to prevent refetching upon rebuilds\n  final _stream = supabase.from('countries').stream(primaryKey: ['id']);\n\n  @override\n  Widget build(BuildContext context) {\n    return StreamBuilder(\n      stream: _stream,\n      builder: (context, snapshot) {\n        // Return your widget with the data from the snapshot\n      },\n    );\n  }\n}\n```\n"}]},{"id":"list-buckets","description":"Retrieves the details of all Storage buckets within an existing product.\n","title":"listBuckets()","$ref":"@supabase/storage-js.packages/StorageBucketApi.default.listBuckets","notes":"- Policy permissions required:\n  - `buckets` permissions: `select`\n  - `objects` permissions: none\n","examples":[{"id":"list-buckets","name":"List buckets","isSpotlight":true,"code":"```dart\nfinal List<Bucket> buckets = await supabase\n  .storage\n  .listBuckets();\n```\n"}]},{"id":"get-bucket","description":"Retrieves the details of an existing Storage bucket.\n","title":"getBucket()","$ref":"@supabase/storage-js.packages/StorageBucketApi.default.getBucket","notes":"- Policy permissions required:\n  - `buckets` permissions: `select`\n  - `objects` permissions: none\n","examples":[{"id":"get-bucket","name":"Get bucket","isSpotlight":true,"code":"```dart\nfinal Bucket bucket = await supabase\n  .storage\n  .getBucket('avatars');\n```\n"}]},{"id":"create-bucket","description":"Creates a new Storage bucket\n","title":"createBucket()","notes":"- Policy permissions required:\n  - `buckets` permissions: `insert`\n  - `objects` permissions: none\n","examples":[{"id":"create-bucket","name":"Create bucket","isSpotlight":true,"code":"```dart\nfinal String bucketId = await supabase\n  .storage\n  .createBucket('avatars');\n```\n"}]},{"id":"empty-bucket","description":"Removes all objects inside a single bucket.\n","title":"emptyBucket()","notes":"- Policy permissions required:\n  - `buckets` permissions: `select`\n  - `objects` permissions: `select` and `delete`\n","examples":[{"id":"empty-bucket","name":"Empty bucket","isSpotlight":true,"code":"```dart\nfinal String result = await supabase\n  .storage\n  .emptyBucket('avatars');\n```\n"}]},{"id":"update-bucket","description":"Updates a new Storage bucket\n","title":"updateBucket()","notes":"- Policy permissions required:\n  - `buckets` permissions: `update`\n  - `objects` permissions: none\n","examples":[{"id":"update-bucket","name":"Update bucket","isSpotlight":true,"code":"```dart\nfinal res = await supabase\n  .storage\n  .updateBucket('avatars', const BucketOptions(public: false));\n```\n"}]},{"id":"delete-bucket","description":"Deletes an existing bucket. A bucket can't be deleted with existing objects inside it. You must first `empty()` the bucket.\n","title":"deleteBucket()","notes":"- Policy permissions required:\n  - `buckets` permissions: `select` and `delete`\n  - `objects` permissions: none\n","examples":[{"id":"delete-bucket","name":"Delete bucket","isSpotlight":true,"code":"```dart\nfinal String result = await supabase\n  .storage\n  .deleteBucket('avatars');\n```\n"}]},{"id":"from-upload","description":"Uploads a file to an existing bucket.\n","title":"from.upload()","$ref":"@supabase/storage-js.packages/StorageFileApi.default.upload","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `insert`\n","examples":[{"id":"upload-file","name":"Upload file","isSpotlight":true,"code":"```dart\nfinal avatarFile = File('path/to/file');\nfinal String path = await supabase.storage.from('avatars').upload(\n      'public/avatar1.png',\n      avatarFile,\n      fileOptions: const FileOptions(cacheControl: '3600', upsert: false),\n    );\n```\n"},{"id":"upload-file-on-web","name":"Upload file on web","code":"```dart\nfinal avatarFile = chosenFile.bytes;\nfinal String path = await supabase.storage.from('avatars').uploadBinary(\n      'public/avatar1.png',\n      avatarFile,\n      fileOptions: const FileOptions(cacheControl: '3600', upsert: false),\n    );\n```\n"}]},{"id":"from-update","description":"Replaces an existing file at the specified path with a new one.\n","title":"from.update()","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `update` and `select`\n","examples":[{"id":"update-file","name":"Update file","isSpotlight":true,"code":"```dart\nfinal avatarFile = File('path/to/local/file');\nfinal String path = await supabase.storage.from('avatars').update(\n      'public/avatar1.png',\n      avatarFile,\n      fileOptions: const FileOptions(cacheControl: '3600', upsert: false),\n    );\n```\n"}]},{"id":"from-move","description":"Moves an existing file, optionally renaming it at the same time.\n","title":"from.move()","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `update` and `select`\n","examples":[{"id":"move-file","name":"Move file","isSpotlight":true,"code":"```dart\nfinal String result = await supabase\n  .storage\n  .from('avatars')\n  .move('public/avatar1.png', 'private/avatar2.png');\n```\n"}]},{"id":"from-create-signed-url","description":"Create signed url to download file without requiring permissions. This URL can be valid for a set number of seconds.\n","title":"from.createSignedUrl()","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `select`\n","examples":[{"id":"create-signed-url","name":"Create Signed URL","isSpotlight":true,"code":"```dart\nfinal String signedUrl = await supabase\n  .storage\n  .from('avatars')\n  .createSignedUrl('avatar1.png', 60);\n```\n"},{"id":"create-signed-url-with-transform","name":"With transform","code":"```dart\nfinal String signedUrl = await supabase\n  .storage\n  .from('avatars')\n  .createSignedUrl(\n    'avatar1.png',\n    60,\n    transform: TransformOptions(\n      width: 200,\n      height: 200,\n    ),\n  );\n```\n"}]},{"id":"from-get-public-url","description":"Retrieve URLs for assets in public buckets\n","title":"from.getPublicUrl()","notes":"- The bucket needs to be set to public, either via [updateBucket()](/docs/reference/dart/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing \"Make public\"\n- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: none\n","examples":[{"id":"returns-the-url-for-an-asset-in-a-public-bucket","name":"Returns the URL for an asset in a public bucket","isSpotlight":true,"code":"```dart\nfinal String publicUrl = supabase\n  .storage\n  .from('public-bucket')\n  .getPublicUrl('avatar1.png');\n```\n"},{"id":"returns-the-url-for-an-asset-in-a-public-bucket-with-transform","name":"With transform","isSpotlight":true,"code":"```dart\nfinal String publicUrl = await supabase\n  .storage\n  .from('public-bucket')\n  .getPublicUrl(\n    'avatar1.png',\n    transform: TransformOptions(\n      width: 200,\n      height: 200,\n    ),\n  );\n```\n"}]},{"id":"from-download","description":"Downloads a file.\n","title":"from.download()","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `select`\n","examples":[{"id":"download-file","name":"Download file","isSpotlight":true,"code":"```dart\nfinal Uint8List file = await supabase\n  .storage\n  .from('avatars')\n  .download('avatar1.png');\n```\n"},{"id":"download-file-with-transform","name":"With transform","isSpotlight":true,"code":"```dart\nfinal Uint8List file = await supabase\n  .storage\n  .from('avatars')\n  .download(\n    'avatar1.png',\n    transform: TransformOptions(\n      width: 200,\n      height: 200,\n    ),\n  );\n```\n"}]},{"id":"from-remove","description":"Deletes files within the same bucket\n","title":"from.remove()","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `delete` and `select`\n","examples":[{"id":"delete-file","name":"Delete file","isSpotlight":true,"code":"```dart\nfinal List<FileObject> objects = await supabase\n  .storage\n  .from('avatars')\n  .remove(['avatar1.png']);\n```\n"}]},{"id":"from-list","description":"Lists all the files within a bucket.\n","title":"from.list()","notes":"- Policy permissions required:\n  - `buckets` permissions: none\n  - `objects` permissions: `select`\n","examples":[{"id":"list-files-in-a-bucket","name":"List files in a bucket","isSpotlight":true,"code":"```dart\nfinal List<FileObject> objects = await supabase\n  .storage\n  .from('avatars')\n  .list();\n```\n"}]},{"id":"using-modifiers","title":"Using Modifiers","description":"Filters work on the row level—they allow you to return rows that\nonly match certain conditions without changing the shape of the rows.\nModifiers are everything that don't fit that definition—allowing you to\nchange the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for\nqueries that return rows (e.g., `select()` or `rpc()` on a function that\nreturns a table response).\n"},{"id":"limit","title":"limit()","description":"Limits the result with the specified count.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .limit(1);\n```\n"},{"id":"with-embedded-resources","name":"With embedded resources","code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .select('name, cities(name)')\n  .eq('name', 'Rohan')\n  .limit(1,  foreignTable: 'cities' );\n```\n"}]},{"id":"order","title":"order()","description":"Orders the result with the specified column.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .order('id', ascending: true);\n```\n"},{"id":"with-embedded-resources","name":"With embedded resources","code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .select('name, cities(name)')\n  .eq('name', 'Rohan')\n  .order('name', foreignTable: 'cities');\n```\n"}]},{"id":"range","title":"range()","description":"Limits the result to rows within the specified range, inclusive.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .range(0,3);\n```\n"}]},{"id":"single","title":"single()","description":"Retrieves only one row from the result. Result must be one row (e.g. using limit), otherwise this will result in an error.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .single();\n```\n"}]},{"id":"using-filters","title":"Using Filters","description":"Filters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, and `delete()` queries.\n\nIf a Database function returns a table response, you can also apply filters.\n","examples":[{"id":"applying-filters","name":"Applying Filters","description":"Filters must be applied after any of `select()`, `update()`, `upsert()`,\n`delete()`, and `rpc()` and before\n[modifiers](/docs/reference/dart/using-modifiers).\n","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .eq('name', 'The Shire');  // Correct\n\nfinal data = await supabase\n  .from('cities')\n  .eq('name', 'The Shire')  // Incorrect\n  .select('name, country_id');\n```\n"},{"id":"chaining-filters","name":"Chaining Filters","description":"Filters must be applied after any of `select()`, `update()`, `upsert()`,\n`delete()`, and `rpc()` and before\n[modifiers](/docs/reference/dart/using-modifiers).\n","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .gte('population', 1000)\n  .lt('population', 10000)\n```\n"},{"id":"conditional-chaining","name":"Conditional Chaining","description":"Filters can be built up one step at a time and then executed as shown in the example code.\n","code":"```dart\nfinal filterByName = null;\nfinal filterPopLow = 1000;\nfinal filterPopHigh = 10000;\n\nvar query = supabase\n  .from('cities')\n  .select('name, country_id');\n\nif (filterByName != null)  { query = query.eq('name', filterByName); }\nif (filterPopLow != null)  { query = query.gte('population', filterPopLow); }\nif (filterPopHigh != null) { query = query.lt('population', filterPopHigh); }\n\nfinal data = await query;\n```\n"},{"id":"filter-by-value-within-json-column","name":"Filter by values within a JSON column","description":"Filters can be built up one step at a time and then executed. For example:\n","data":{"sql":"```sql\ncreate table\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\ninsert into\n  users (id, name, address)\nvalues\n  (1, 'Michael', '{ \"postcode\": 90210 }'),\n  (2, 'Jane', null);\n```\n"},"response":"```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"Michael\",\n      \"address\": {\n        \"postcode\": 90210\n      }\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n","code":"```dart\nfinal data = await supabase\n  .from('users')\n  .select()\n  .eq('address->postcode', 90210);\n```\n"},{"id":"filter-foreign-tables","name":"Filter Foreign Tables","code":"```dart\nfinal data = await supabase\n  .from('orchestral_sections')\n  .select('''\n    name,\n    instruments!inner (\n      name\n    )\n  ''')\n  .eq('instruments.name', 'violin');\n```\n","data":{"sql":"```sql\ncreate table\n  orchestral_sections (id int8 primary key, name text);\ncreate table\n  instruments (\n    id int8 primary key,\n    section_id int8 not null references orchestral_sections,\n    name text\n  );\n\ninsert into\n  orchestral_sections (id, name)\nvalues\n  (1, 'strings'),\n  (2, 'woodwinds');\ninsert into\n  instruments (id, section_id, name)\nvalues\n  (1, 2, 'flute'),\n  (2, 1, 'violin');\n```\n","response":"```json\n{\n  \"data\": [\n    {\n      \"name\": \"strings\",\n      \"characters\": [\n        {\n          \"name\": \"violin\"\n        }\n      ]\n    }\n  ],\n  \"status\": 200,\n  \"statusText\": \"OK\"\n}\n```\n"}}]},{"id":"or","title":"or()","description":"Finds all rows satisfying at least one of the filters.\n","notes":"- `.or()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for the filter names and values.\n\n  ```dart\n  .or('id.in.(6,7),arraycol.cs.{\"a\",\"b\"}')  // Use Postgres list () and 'in' for in_ filter. Array {} and 'cs' for contains.\n  .or('id.in.(${mylist.join(',')}),arraycol.cs.{${mylistArray.join(',')}}')\t// You can insert a Dart list for list or array column.\n  .or('id.in.(${mylist.join(',')}),rangecol.cs.(${mylistRange.join(',')}]')\t// You can insert a Dart list for list or range column.\n  ```\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .or('id.eq.20,id.eq.30');\n```\n"},{"id":"use-or-with-and","name":"Use `or` with `and`","code":"```dart\nfinal data = await supabase\n  .from('instruments')\n  .select('name, section_id')\n  .or('id.gt.20,and(name.eq.violin,section_id.eq.3)');\n```\n"}]},{"id":"not","title":"not()","description":"Finds all rows which doesn't satisfy the filter.\n","notes":"- `.not()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for the filter names and values.\n\n  ```dart\n  .not('name','eq','violin')\n  .not('arraycol','cs','{\"a\",\"b\"}') // Use Postgres array {} for array column and 'cs' for contains.\n  .not('rangecol','cs','(1,2]') // Use Postgres range syntax for range column.\n  .not('id','in','(6,7)')  // Use Postgres list () and 'in' for in_ filter.\n  .not('id','in','(${mylist.join(',')})')  // You can insert a Dart list array.\n  ```\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('instruments')\n  .select('name, section_id')\n  .not('name', 'eq', 'violin');\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('instruments')\n  .update({ 'name': 'piano' })\n  .not('name', 'eq', 'guitar');\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('instruments')\n  .delete()\n  .not('name', 'eq', 'harp');\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_instruments)\n  .not('name', 'eq', 'violin');\n```\n"}]},{"id":"match","title":"match()","description":"Finds all rows whose columns match the specified `query` object.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('instruments')\n  .select('name, section_id')\n  .match({'name': 'drums', 'section_id': 2});\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('instruments')\n  .update({ 'name': 'piano' })\n  .match({'name': 'harpsichord', 'section_id': 2});\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('instruments')\n  .delete()\n  .match({'name': 'harpsichord', 'country_id': 2});\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_instruments')\n  .match({'name': 'violin', 'country_id': 3});\n```\n"}]},{"id":"eq","title":"eq()","description":"Finds all rows whose value on the stated `column` exactly matches the specified `value`.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('instruments')\n  .select('name, section_id')\n  .eq('name', 'xylophone');\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('instruments')\n  .update({ 'name': 'piano' })\n  .eq('name', 'harpsichord');\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('instruments')\n  .delete()\n  .eq('name', 'tambourine');\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_instruments')\n  .eq('name', 'guqin');\n```\n"}]},{"id":"neq","title":"neq()","description":"Finds all rows whose value on the stated `column` doesn't match the specified `value`.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('instruments')\n  .select('name, section_id')\n  .neq('name', 'violin');\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('instruments')\n  .update({ 'name': 'piano' })\n  .neq('name', 'harp');\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('instruments')\n  .delete()\n  .neq('name', 'cello');\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_instruments')\n  .neq('name', 'violin');\n```\n"}]},{"id":"gt","title":"gt()","description":"Finds all rows whose value on the stated `column` is greater than the specified `value`.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .gt('country_id', 250);\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .update({ 'name': 'Mordor' })\n  .gt('country_id', 250);\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .delete()\n  .gt('country_id', 250);\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_cities')\n  .gt('country_id', 250);\n```\n"}]},{"id":"gte","title":"gte()","description":"Finds all rows whose value on the stated `column` is greater than or equal to the specified `value`.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .gte('country_id', 250);\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .update({ 'name': 'Mordor' })\n  .gte('country_id', 250);\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .delete()\n  .gte('country_id', 250);\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_cities')\n  .gte('country_id', 250);\n```\n"}]},{"id":"lt","title":"lt()","description":"Finds all rows whose value on the stated `column` is less than the specified `value`.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .lt('country_id', 250);\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .update({ 'name': 'Mordor' })\n  .lt('country_id', 250);\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .delete()\n  .lt('country_id', 250);\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_cities')\n  .lt('country_id', 250);\n```\n"}]},{"id":"lte","title":"lte()","description":"Finds all rows whose value on the stated `column` is less than or equal to the specified `value`.\n","$ref":"@supabase/postgrest-js.PostgrestFilterBuilder.lte","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .lte('country_id', 250);\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .update({ 'name': 'Mordor' })\n  .lte('country_id', 250);\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .delete()\n  .lte('country_id', 250);\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_cities')\n  .lte('country_id', 250);\n```\n"}]},{"id":"like","title":"like()","description":"Finds all rows whose value in the stated `column` matches the supplied `pattern` (case sensitive).\n","$ref":"@supabase/postgrest-js.PostgrestFilterBuilder.lte","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .like('name', '%la%');\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .update({ 'name': 'Mordor' })\n  .like('name', '%la%');\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .delete()\n  .like('name', '%la%');\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_cities')\n  .like('name', '%la%');\n```\n"}]},{"id":"ilike","title":"ilike()","description":"Finds all rows whose value in the stated `column` matches the supplied `pattern` (case insensitive).\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .ilike('name', '%la%');\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .update({ 'name': 'Mordor' })\n  .ilike('name', '%la%');\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .delete()\n  .ilike('name', '%la%');\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_cities')\n  .ilike('name', '%la%');\n```\n"}]},{"id":"is","title":"is_()","description":"A check for exact equality (null, true, false), finds all rows whose value on the stated `column` exactly match the specified `value`.\n\n`is_` and `in_` filter methods are suffixed with `_` to avoid collisions with reserved keywords.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .is_('name', null);\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .update({ 'name': 'Mordor' })\n  .is_('name', null);\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .delete()\n  .is_('name', null);\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_cities')\n  .is_('name', null);\n```\n"}]},{"id":"in","title":"in_()","description":"Finds all rows whose value on the stated `column` is found on the specified `values`.\n\n`is_` and `in_` filter methods are suffixed with `_` to avoid collisions with reserved keywords.\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .in_('name', ['Minas Tirith', 'Minas Morgul']);\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .update({ 'name': 'Minas Morgul' })\n  .in_('name', ['Minas Ithil', 'Minas Tirith']);\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .delete()\n  .in_('name', ['Minas Tirith', 'Minas Morgul']);\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_cities')\n  .in_('name', ['Minas Tirith', 'Minas Morgul']);\n```\n"}]},{"id":"contains","title":"contains()","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .select('name, id, main_exports')\n  .contains('main_exports', ['oil']);\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .update({ 'name': 'Mordor' })\n  .contains('main_exports', ['oil']);\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .delete()\n  .contains('main_exports', ['oil']);\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_countries')\n  .contains('main_exports', ['oil']);\n```\n"}]},{"id":"contained-by","title":"containedBy()","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .select('name, id, main_exports')\n  .containedBy('main_exports', ['cars', 'food', 'machine']);\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .update({ 'name': 'Mordor' })\n  .containedBy('main_exports', ['orks', 'surveillance', 'evil']);\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .delete()\n  .containedBy('main_exports', ['cars', 'food', 'machine']);\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_countries')\n  .containedBy('main_exports', ['cars', 'food', 'machine']);\n```\n"}]},{"id":"range-lt","title":"rangeLt()","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .select('name, id, population_range_millions')\n  .rangeLt('population_range_millions', '[150, 250]');\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .update({ 'name': 'Mordor' })\n  .rangeLt('population_range_millions', '[150, 250]');\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .delete()\n  .rangeLt('population_range_millions', '[150, 250]');\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_countries')\n  .rangeLt('population_range_millions', '[150, 250]');\n```\n"}]},{"id":"range-gt","title":"rangeGt()","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .select('name, id, population_range_millions')\n  .rangeGt('population_range_millions', '[150, 250]');\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .update({ 'name': 'Mordor' })\n  .rangeGt('population_range_millions', '[150, 250]');\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .delete()\n  .rangeGt('population_range_millions', '[150, 250]');\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_countries')\n  .rangeGt('population_range_millions', '[150, 250]');\n```\n"}]},{"id":"range-gte","title":"rangeGte()","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .select('name, id, population_range_millions')\n  .rangeGte('population_range_millions', '[150, 250]');\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .update({ 'name': 'Mordor' })\n  .rangeGte('population_range_millions', '[150, 250]');\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .delete()\n  .rangeGte('population_range_millions', '[150, 250]');\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_countries')\n  .rangeGte('population_range_millions', '[150, 250]');\n```\n"}]},{"id":"range-lte","title":"rangeLte()","$ref":"@supabase/postgrest-js.PostgrestFilterBuilder.rangeLte","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .select('name, id, population_range_millions')\n  .rangeLte('population_range_millions', '[150, 250]');\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .update({ 'name': 'Mordor' })\n  .rangeLte('population_range_millions', '[150, 250]');\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .delete()\n  .rangeLte('population_range_millions', '[150, 250]');\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_countries')\n  .rangeLte('population_range_millions', [150, 250]);\n```\n"}]},{"id":"range-adjacent","title":"rangeAdjacent()","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .select('name, id, population_range_millions')\n  .rangeAdjacent('population_range_millions', '[70, 185]');\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .update({ 'name': 'Mordor' })\n  .rangeAdjacent('population_range_millions', '[70, 185]');\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .delete()\n  .rangeAdjacent('population_range_millions', '[70, 185]');\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_countries')\n  .rangeAdjacent('population_range_millions', '[70, 185]');\n```\n"}]},{"id":"overlaps","title":"overlaps()","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .select('name, id, main_exports')\n  .overlaps('main_exports', ['computers', 'minerals']);\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .update({ 'name': 'Mordor' })\n  .overlaps('main_exports', ['computers', 'minerals']);\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('countries')\n  .delete()\n  .overlaps('main_exports', ['computers', 'minerals']);\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_countries')\n  .overlaps('main_exports', ['computers', 'minerals']);\n```\n"}]},{"id":"text-search","title":"textSearch()","description":"Finds all rows whose tsvector value on the stated `column` matches to_tsquery(query).\n","examples":[{"id":"text-search","name":"Text search","code":"```dart\nfinal data = await supabase\n  .from('quotes')\n  .select('catchphrase')\n  .textSearch('catchphrase', \"'fat' & 'cat'\",\n    config: 'english'\n  );\n```\n"},{"id":"basic-normalization","name":"Basic normalization","description":"Uses PostgreSQL's `plainto_tsquery` function.","code":"```dart\nfinal data = await supabase\n  .from('quotes')\n  .select('catchphrase')\n  .textSearch('catchphrase', \"'fat' & 'cat'\",\n    type: TextSearchType.plain,\n    config: 'english'\n  );\n```\n"},{"id":"full-normalization","name":"Full normalization","description":"Uses PostgreSQL's `phraseto_tsquery` function.","code":"```dart\nfinal data = await supabase\n  .from('quotes')\n  .select('catchphrase')\n  .textSearch('catchphrase', \"'fat' & 'cat'\",\n    type: TextSearchType.phrase,\n    config: 'english'\n  );\n```\n"},{"id":"web-search","name":"Websearch","description":"Uses PostgreSQL's `websearch_to_tsquery` function.\nThis function will never raise syntax errors, which makes it possible to use raw user-supplied input for search, and can be used\nwith advanced operators.\n\n- `unquoted text`: text not inside quote marks will be converted to terms separated by & operators, as if processed by plainto_tsquery.\n- `\"quoted text\"`: text inside quote marks will be converted to terms separated by `<->` operators, as if processed by phraseto_tsquery.\n- `OR`: the word “or” will be converted to the | operator.\n- `-`: a dash will be converted to the ! operator.\n","code":"```dart\nfinal data = await supabase\n  .from('quotes')\n  .select('catchphrase')\n  .textSearch('catchphrase', \"'fat or cat'\",\n    type: TextSearchType.websearch,\n    config: 'english'\n  );\n```\n"}]},{"id":"filter","title":"filter()","description":"Finds all rows whose `column` satisfies the filter.\n","notes":"- `.filter()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for the filter names and values, so it should only be used as an escape hatch in case other filters don't work.\n  ```dart\n    .filter('arraycol','cs','{\"a\",\"b\"}') // Use Postgres array {} and 'cs' for contains.\n    .filter('rangecol','cs','(1,2]') // Use Postgres range syntax for range column.\n    .filter('id','in','(6,7)')  // Use Postgres list () and 'in' for in_ filter.\n    .filter('id','cs','{${mylist.join(',')}}')  // You can insert a Dart array list.\n  ```\n","examples":[{"id":"with-select","name":"With `select()`","isSpotlight":true,"code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .select('name, country_id')\n  .filter('name', 'in', '(\"Minas Tirith\",\"Minas Morgul\")');\n```\n"},{"id":"with-update","name":"With `update()`","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .update({ 'name': 'Minas Morgul' })\n  .filter('name', 'in', '(\"Minas Ithil\",\"Minas Tirith\")');\n```\n"},{"id":"with-delete","name":"With `delete()`","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .delete()\n  .filter('name', 'in', '(\"Minas Tirith\",\"Minas Morgul\")');\n```\n"},{"id":"with-rpc","name":"With `rpc()`","code":"```dart\n// Only valid if the Stored Procedure returns a table type.\nfinal data = await supabase\n  .rpc('echo_all_cities')\n  .filter('name', 'in', '(\"Minas Tirith\",\"Minas Morgul\")');\n```\n"},{"id":"filter-embedded-resources","name":"Filter embedded resources","code":"```dart\nfinal data = await supabase\n  .from('cities')\n  .select('name, countries ( name )')\n  .filter('countries.name', 'in', '(\"Rohan\",\"Gondor\")');\n```\n"}]}]