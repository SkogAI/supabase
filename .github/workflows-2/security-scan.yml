name: Security Scanning

on:
  push:
    branches:
      - master
      - main
  pull_request:
  schedule:
    # Run weekly on Wednesday at 3 AM UTC
    - cron: '0 3 * * 3'

jobs:
  secret-scanning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  dependency-scanning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  sql-injection-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for SQL injection vulnerabilities
        run: |
          echo "Scanning for potential SQL injection patterns..."

          # Check for string concatenation in SQL files
          if grep -r "||" supabase/migrations/ 2>/dev/null | grep -v "-- "; then
            echo "⚠️  Warning: String concatenation found in SQL files"
            echo "Consider using parameterized queries"
          fi

          # Check for dynamic SQL
          if grep -r "EXECUTE.*||" supabase/migrations/ 2>/dev/null; then
            echo "⚠️  Warning: Dynamic SQL execution found"
            echo "Review for potential SQL injection risks"
          fi

      - name: Generate comprehensive security analysis with Claude Code
        if: always()
        uses: anthropics/claude-code-action@v1
        continue-on-error: true
        with:
          github_token: ${{ github.token }}
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            Perform comprehensive security analysis and generate report to $GITHUB_STEP_SUMMARY:

            Available security scan results:
            - TruffleHog secret scanning results
            - Trivy vulnerability scan (trivy-results.sarif)
            - SQL injection pattern checks

            Tasks:
            1. Analyze all security scan results
            2. Prioritize findings by severity
            3. Review SQL code for injection vulnerabilities
            4. Check authentication/authorization patterns
            5. Analyze RLS policies for gaps
            6. Review API endpoint security
            7. Check for exposed secrets or credentials
            8. Provide remediation steps for each finding
            9. Generate security score and recommendations
            10. Create actionable security improvement checklist
