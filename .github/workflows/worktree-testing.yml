name: Worktree Testing

on:
  push:
    branches:
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  detect-worktree:
    name: Detect Worktree Branch
    runs-on: ubuntu-latest
    outputs:
      is_worktree: ${{ steps.check.outputs.is_worktree }}
      branch_type: ${{ steps.check.outputs.branch_type }}
    
    steps:
      - name: Check if worktree branch
        id: check
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          if [[ "$BRANCH_NAME" =~ ^(feature|bugfix|hotfix)/ ]]; then
            echo "is_worktree=true" >> $GITHUB_OUTPUT
            echo "branch_type=${BRANCH_NAME%%/*}" >> $GITHUB_OUTPUT
            echo "✓ Detected worktree branch: $BRANCH_NAME"
          else
            echo "is_worktree=false" >> $GITHUB_OUTPUT
            echo "Not a worktree branch: $BRANCH_NAME"
          fi

  validate-worktree:
    name: Validate Worktree
    runs-on: ubuntu-latest
    needs: detect-worktree
    if: needs.detect-worktree.outputs.is_worktree == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Run CI validation
        run: |
          chmod +x .github/scripts/ci-worktree.sh
          .github/scripts/ci-worktree.sh
        continue-on-error: true
        id: ci_check

      - name: Generate test report
        if: always()
        run: |
          echo "# Worktree CI Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** \`${{ needs.detect-worktree.outputs.branch_type }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.ci_check.outcome }}" == "success" ]; then
            echo "## ✅ All CI checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ CI checks failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review the logs above for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail if checks failed
        if: steps.ci_check.outcome != 'success'
        run: |
          echo "CI checks failed"
          exit 1

  database-tests:
    name: Database Tests
    runs-on: ubuntu-latest
    needs: detect-worktree
    if: needs.detect-worktree.outputs.is_worktree == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase
        run: supabase start

      - name: Wait for services
        run: |
          echo "Waiting for Supabase services..."
          sleep 15
          supabase status

      - name: Run RLS tests
        if: hashFiles('tests/rls_test_suite.sql') != ''
        run: |
          echo "Running RLS policy tests..."
          supabase db execute --file tests/rls_test_suite.sql

      - name: Run storage tests
        if: hashFiles('tests/storage_test_suite.sql') != ''
        run: |
          echo "Running storage policy tests..."
          supabase db execute --file tests/storage_test_suite.sql

      - name: Test migrations
        run: |
          echo "Testing database migrations..."
          supabase db reset --db-only

      - name: Validate type generation
        run: |
          echo "Validating TypeScript type generation..."
          supabase gen types typescript --local > types/database.test.ts
          
          if diff types/database.ts types/database.test.ts > /dev/null; then
            echo "✓ Types are up to date"
          else
            echo "⚠ Types may be out of sync"
            echo "Run: npm run types:generate"
          fi
          
          rm -f types/database.test.ts

      - name: Stop Supabase
        if: always()
        run: supabase stop --no-backup

  edge-functions:
    name: Edge Functions Tests
    runs-on: ubuntu-latest
    needs: detect-worktree
    if: needs.detect-worktree.outputs.is_worktree == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Lint functions
        if: hashFiles('supabase/functions/**/*.ts') != ''
        run: |
          cd supabase/functions
          deno fmt --check
          deno lint

      - name: Type check functions
        if: hashFiles('supabase/functions/**/*.ts') != ''
        run: |
          cd supabase/functions
          for dir in */; do
            if [ -f "${dir}index.ts" ]; then
              echo "Type checking ${dir}index.ts"
              deno check "${dir}index.ts"
            fi
          done

      - name: Run function tests
        if: hashFiles('supabase/functions/**/*.ts') != ''
        run: |
          cd supabase/functions
          deno test --allow-all

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: detect-worktree
    if: needs.detect-worktree.outputs.is_worktree == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for secrets
        run: |
          echo "Scanning for potential secrets..."
          
          # Check for common secret patterns
          if grep -r "api[_-]key.*=.*['\"]" --include="*.ts" --include="*.js" --include="*.sql" . 2>/dev/null; then
            echo "⚠ Possible hardcoded API keys found"
          fi
          
          if grep -r "password.*=.*['\"]" --include="*.ts" --include="*.js" --include="*.sql" . 2>/dev/null; then
            echo "⚠ Possible hardcoded passwords found"
          fi
          
          if grep -r "secret.*=.*['\"]" --include="*.ts" --include="*.js" --include="*.sql" . 2>/dev/null; then
            echo "⚠ Possible hardcoded secrets found"
          fi

      - name: Check .env files
        run: |
          if find . -name ".env" -not -path "./node_modules/*" 2>/dev/null | grep -q ".env"; then
            echo "❌ Found .env files that should not be committed"
            find . -name ".env" -not -path "./node_modules/*"
            exit 1
          else
            echo "✓ No .env files found in repository"
          fi

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [detect-worktree, validate-worktree, database-tests, edge-functions, security-scan]
    if: always() && needs.detect-worktree.outputs.is_worktree == 'true'
    
    steps:
      - name: Generate summary
        run: |
          echo "# 🌳 Worktree Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** \`${{ needs.detect-worktree.outputs.branch_type }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CI Validation | ${{ needs.validate-worktree.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Database Tests | ${{ needs.database-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Edge Functions | ${{ needs.edge-functions.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY

      - name: Check if all tests passed
        if: |
          needs.validate-worktree.result != 'success' ||
          needs.database-tests.result != 'success' ||
          needs.edge-functions.result != 'success' ||
          needs.security-scan.result != 'success'
        run: |
          echo "One or more test suites failed"
          exit 1
