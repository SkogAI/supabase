name: Edge Functions Testing

on:
  pull_request:
    paths:
      - 'supabase/functions/**'
      - '.github/workflows/edge-functions-test.yml'
  push:
    branches:
      - main
      - develop
    paths:
      - 'supabase/functions/**'

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Check formatting
        run: |
          cd supabase/functions
          deno fmt --check

      - name: Lint functions
        run: |
          cd supabase/functions
          deno lint

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Type check all functions
        run: |
          cd supabase/functions
          for dir in */; do
            if [ -f "${dir}index.ts" ]; then
              echo "Type checking ${dir}index.ts"
              deno check "${dir}index.ts"
            fi
          done

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Run unit tests
        run: |
          cd supabase/functions
          deno test --allow-all --coverage=coverage

      - name: Generate coverage report
        run: |
          cd supabase/functions
          deno coverage coverage --lcov > coverage.lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./supabase/functions/coverage.lcov
          flags: edge-functions
          name: edge-functions-coverage
          fail_ci_if_error: false

      - name: Coverage summary
        run: |
          cd supabase/functions
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          deno coverage coverage >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase
        run: supabase start

      - name: Wait for services
        run: |
          echo "Waiting for Supabase services to be ready..."
          sleep 10
          supabase status

      - name: Run integration tests
        env:
          RUN_INTEGRATION_TESTS: 'true'
          FUNCTION_URL: 'http://localhost:54321/functions/v1'
        run: |
          cd supabase/functions
          deno test --allow-all --allow-env --allow-net

      - name: Function logs on failure
        if: failure()
        run: |
          echo "## Function Logs" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          supabase functions logs 2>&1 | tail -100 >> $GITHUB_STEP_SUMMARY || echo "No logs available" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Stop Supabase
        if: always()
        run: supabase stop --no-backup

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Check for vulnerabilities
        run: |
          cd supabase/functions
          echo "Scanning for common security issues..."
          
          # Check for hardcoded secrets (basic check)
          if grep -r "api[_-]key.*=.*['\"]" --include="*.ts" --exclude-dir=_shared .; then
            echo "::warning::Possible hardcoded API keys found. Please use environment variables."
          fi
          
          if grep -r "password.*=.*['\"]" --include="*.ts" --exclude-dir=_shared .; then
            echo "::warning::Possible hardcoded passwords found. Please use environment variables."
          fi

      - name: Dependency audit
        run: |
          cd supabase/functions
          echo "Checking dependencies..."
          # List all unique dependencies
          echo "## Dependencies" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          grep -rh "from ['\"]https://" --include="*.ts" . | sort -u >> $GITHUB_STEP_SUMMARY || echo "No external dependencies" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, unit-tests, integration-tests, security-scan]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "# Edge Functions Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Format | ${{ needs.lint-and-format.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type Check | ${{ needs.type-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY

      - name: Fail if any test failed
        if: |
          needs.lint-and-format.result != 'success' ||
          needs.type-check.result != 'success' ||
          needs.unit-tests.result != 'success' ||
          needs.integration-tests.result != 'success'
        run: |
          echo "One or more test suites failed"
          exit 1
